(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    364558,       8377]
NotebookOptionsPosition[    354908,       8053]
NotebookOutlinePosition[    355449,       8073]
CellTagsIndexPosition[    355406,       8070]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"Weibull", ":"}]], "Input",
 CellChangeTimes->{{3.543684992882703*^9, 3.543684994655665*^9}, {
  3.544320894879453*^9, 3.544320906231942*^9}, {3.544321013728986*^9, 
  3.544321015677552*^9}, {3.546149536487394*^9, 3.546149537999375*^9}},
 EmphasizeSyntaxErrors->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"ClearAll", "[", 
   RowBox[{"\[Alpha]", ",", "\[Sigma]", ",", "\[Mu]", ",", "x"}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.54613653746201*^9, 3.546136542655197*^9}, {
  3.546136596080742*^9, 3.546136617338891*^9}, {3.546139146090529*^9, 
  3.546139146249962*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p", " ", "=", " ", 
  RowBox[{
   FractionBox["k", "\[Lambda]"], 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
    RowBox[{"k", "-", "1"}]]}]}]], "Input",
 CellChangeTimes->{{3.543684783475436*^9, 3.543684946824956*^9}, 
   3.543685129663494*^9, {3.544295734613175*^9, 3.54429574288267*^9}, {
   3.54429580082901*^9, 3.54429582329368*^9}, {3.544320780873962*^9, 
   3.544320785346142*^9}, 3.544320837287442*^9, {3.544320881922005*^9, 
   3.54432088239278*^9}, {3.54432100764836*^9, 3.544321019573801*^9}, 
   3.546149541553032*^9}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", "k", 
   " ", 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
    RowBox[{
     RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"]], "Output",
 CellChangeTimes->{
  3.544320837880473*^9, {3.544320883580563*^9, 3.544320911227469*^9}, 
   3.545309803843712*^9, 3.546016483142384*^9, 3.546017657044242*^9, 
   3.546060076762132*^9, 3.546060141670154*^9, 3.546060377463162*^9, 
   3.546061431182232*^9, 3.54606188717779*^9, 3.546071462150901*^9, 
   3.546136812639187*^9, 3.546138975120109*^9, 3.546148046460689*^9, 
   3.546149544392845*^9, 3.546151403683482*^9, {3.54623018096315*^9, 
   3.546230186401331*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Theta]", " ", "=", " ", "k"}], ";"}]], "Input",
 CellChangeTimes->{{3.546137329720142*^9, 3.546137340576589*^9}, {
  3.546149548558869*^9, 3.546149554463107*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"ss", " ", "=", " ", 
   RowBox[{"FullSimplify", "[", 
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{"Log", "[", "p", "]"}], ",", "\[Theta]"}], "]"}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.543684996758039*^9, 3.543685116992625*^9}, {
   3.543685161495624*^9, 3.543685164824434*^9}, {3.543685617602922*^9, 
   3.543685622261405*^9}, {3.544295746546906*^9, 3.544295827428027*^9}, {
   3.544295874222879*^9, 3.544295884036298*^9}, 3.546016486016091*^9, {
   3.54601942039296*^9, 3.546019421197285*^9}, {3.546137342783463*^9, 
   3.54613734607702*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"1", "-", 
   RowBox[{"k", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        FractionBox[
         RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], ")"}], " ", 
    RowBox[{"Log", "[", 
     FractionBox[
      RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], "]"}]}]}], "k"]], "Output",
 CellChangeTimes->{
  3.544295884678365*^9, 3.545309805435313*^9, 3.546016487855942*^9, 
   3.546017670089106*^9, 3.546019421888676*^9, 3.546059377336055*^9, 
   3.546060078214513*^9, {3.546060139149627*^9, 3.546060144271088*^9}, 
   3.546060382291988*^9, 3.546061435830015*^9, 3.546061887191896*^9, 
   3.546071462301595*^9, 3.546136812733527*^9, {3.546137347255125*^9, 
   3.546137353812429*^9}, 3.54613897527059*^9, 3.546148046689522*^9, 
   3.546149558534132*^9, 3.546232064476071*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ss", "'"}], " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"D", "[", 
    RowBox[{"ss", ",", "\[Theta]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.543685180126496*^9, 3.543685298634426*^9}, {
   3.543685431540192*^9, 3.543685489527895*^9}, 3.543685534481716*^9, {
   3.543685624867701*^9, 3.543685665571384*^9}, {3.543688058809387*^9, 
   3.543688137132826*^9}, {3.54368832453227*^9, 3.543688330973921*^9}, {
   3.544295753339424*^9, 3.544295760783175*^9}, {3.544295853271568*^9, 
   3.544295889194162*^9}, {3.546016489095013*^9, 3.54601649563242*^9}, {
   3.546019427600456*^9, 3.546019428430676*^9}, {3.54613735651055*^9, 
   3.546137357241563*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox["1", 
    SuperscriptBox["k", "2"]]}], "-", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"], " ", 
   SuperscriptBox[
    RowBox[{"Log", "[", 
     FractionBox[
      RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], "]"}], "2"]}]}]], "Output",
 CellChangeTimes->{{3.543685658802668*^9, 3.54368566906248*^9}, {
   3.54368807593941*^9, 3.543688142568622*^9}, 3.543688332640362*^9, {
   3.54429586658533*^9, 3.544295890282246*^9}, 3.545309806594238*^9, {
   3.54601648969558*^9, 3.546016496189694*^9}, 3.546017677241552*^9, 
   3.546019429586647*^9, 3.546059378810901*^9, 3.546060079358672*^9, 
   3.546060145605671*^9, 3.546060384883913*^9, 3.546061436928236*^9, 
   3.546061887206539*^9, 3.546071462474284*^9, 3.546136812904919*^9, 
   3.546137359182575*^9, 3.546138975369357*^9, 3.546148046818373*^9, 
   3.546149560252101*^9, 3.54623206886184*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"p", "^", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}], "*", "ss"}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.546016522942259*^9, 3.546016539967992*^9}, {
   3.546017704408171*^9, 3.546017705125968*^9}, 3.546019441035926*^9, {
   3.546019471091529*^9, 3.546019479505023*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", 
         SuperscriptBox[
          RowBox[{"(", 
           FractionBox[
            RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", 
       "k", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         FractionBox[
          RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
    RowBox[{"1", "+", "\[Alpha]"}]], " ", 
   RowBox[{"(", 
    RowBox[{"1", "-", 
     RowBox[{"k", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SuperscriptBox[
         RowBox[{"(", 
          FractionBox[
           RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], ")"}], 
      " ", 
      RowBox[{"Log", "[", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], "]"}]}]}], ")"}]}], 
  "k"]], "Output",
 CellChangeTimes->{
  3.546016544655516*^9, {3.546017682666078*^9, 3.546017707524088*^9}, 
   3.546019442560441*^9, 3.546019480115117*^9, 3.546060081264836*^9, 
   3.546060146559043*^9, 3.546060400916709*^9, 3.546061439971061*^9, 
   3.546061887221677*^9, 3.546071464395533*^9, 3.546136814598201*^9, 
   3.546137368746807*^9, 3.546138977048079*^9, 3.54614804861861*^9, 
   3.546149564604638*^9, 3.546149648173352*^9, 3.546232072442872*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"csIntCitatel1", "/.", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], "\[Rule]", " ", 
     RowBox[{"y", "*", "\[Lambda]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016644463204*^9, 3.546016698494855*^9}, {
  3.546017718072268*^9, 3.546017718824221*^9}, {3.546019484592136*^9, 
  3.546019489873669*^9}, {3.5460588628943*^9, 3.546058863025369*^9}, {
  3.546058985559764*^9, 3.54605898695691*^9}, {3.546149570336845*^9, 
  3.546149571255931*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", 
         SuperscriptBox["y", "k"]}]], " ", "k", " ", 
       SuperscriptBox["y", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
    RowBox[{"1", "+", "\[Alpha]"}]], " ", 
   RowBox[{"(", 
    RowBox[{"1", "-", 
     RowBox[{"k", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SuperscriptBox["y", "k"]}], ")"}], " ", 
      RowBox[{"Log", "[", "y", "]"}]}]}], ")"}]}], "k"]], "Output",
 CellChangeTimes->{
  3.546016699867985*^9, {3.54601771087677*^9, 3.546017720075646*^9}, 
   3.546019451857504*^9, 3.54601949082593*^9, 3.546058865086693*^9, 
   3.546058991110302*^9, 3.546059305292639*^9, {3.546060081368136*^9, 
   3.546060082414614*^9}, 3.546060147815039*^9, 3.546060407046361*^9, 
   3.546061531311124*^9, 3.546061887295093*^9, 3.546071465443946*^9, 
   3.546136815322759*^9, 3.546137371159345*^9, 3.546138977799651*^9, 
   3.546148049399068*^9, 3.546149656219562*^9, 3.546232076199355*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel3", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"csIntCitatel2", "*", "\[Lambda]"}], "/.", 
    RowBox[{"y", "\[Rule]", " ", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{"1", "/", "k"}], ")"}]}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232088390435*^9, 3.546232095185625*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", 
         SuperscriptBox[
          RowBox[{"(", 
           SuperscriptBox["t", 
            FractionBox["1", "k"]], ")"}], "k"]}]], " ", "k", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         SuperscriptBox["t", 
          FractionBox["1", "k"]], ")"}], 
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
    RowBox[{"1", "+", "\[Alpha]"}]], " ", "\[Lambda]", " ", 
   RowBox[{"(", 
    RowBox[{"1", "-", 
     RowBox[{"k", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SuperscriptBox[
         RowBox[{"(", 
          SuperscriptBox["t", 
           FractionBox["1", "k"]], ")"}], "k"]}], ")"}], " ", 
      RowBox[{"Log", "[", 
       SuperscriptBox["t", 
        FractionBox["1", "k"]], "]"}]}]}], ")"}]}], "k"]], "Output",
 CellChangeTimes->{3.546232100824901*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel4", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"csIntCitatel3", "/", "k"}], "*", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "k"}], ")"}], "/", "k"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232112593013*^9, 3.546232125917882*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", "t"}]], " ", 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", "t"}]], " ", "k", " ", 
       SuperscriptBox["t", 
        FractionBox[
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}], "k"]]}], "\[Lambda]"], ")"}], 
    "\[Alpha]"], " ", 
   RowBox[{"(", 
    RowBox[{"1", "+", 
     RowBox[{"Log", "[", "t", "]"}], "-", 
     RowBox[{"t", " ", 
      RowBox[{"Log", "[", "t", "]"}]}]}], ")"}]}], "k"]], "Output",
 CellChangeTimes->{3.546232131595805*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel5", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"Integrate", "[", 
    RowBox[{"csIntCitatel4", ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "\[Infinity]"}], "}"}]}], "]"}], "]"}], 
  " "}]], "Input",
 CellChangeTimes->{{3.546016758763041*^9, 3.546016792970542*^9}, {
  3.546017733204061*^9, 3.546017740186443*^9}, {3.546017914630278*^9, 
  3.546017915139312*^9}, {3.54601813955664*^9, 3.546018141998787*^9}, {
  3.546019493851544*^9, 3.546019499184226*^9}, {3.546058803868124*^9, 
  3.546058826478995*^9}, {3.546058870461028*^9, 3.546058872003744*^9}, {
  3.546059018757644*^9, 3.546059019951728*^9}, {3.546059209756854*^9, 
  3.546059224271504*^9}, {3.546060118428053*^9, 3.546060118951836*^9}, {
  3.546060429719045*^9, 3.546060435859049*^9}, {3.54606155661684*^9, 
  3.546061556750753*^9}, {3.54606187684573*^9, 3.546061879156262*^9}, {
  3.546149679351288*^9, 3.546149686924944*^9}, {3.546232153175871*^9, 
  3.54623216243717*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"\[Alpha]", " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
      RowBox[{
       RowBox[{"-", "2"}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}]}]], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox["k", "\[Lambda]"], ")"}], "\[Alpha]"], " ", 
     RowBox[{"Gamma", "[", 
      RowBox[{"1", "+", "\[Alpha]", "-", 
       FractionBox["\[Alpha]", "k"]}], "]"}], " ", 
     RowBox[{"(", 
      RowBox[{"k", "-", 
       RowBox[{"Log", "[", 
        RowBox[{"1", "+", "\[Alpha]"}], "]"}], "+", 
       RowBox[{"PolyGamma", "[", 
        RowBox[{"0", ",", 
         RowBox[{"1", "+", "\[Alpha]", "-", 
          FractionBox["\[Alpha]", "k"]}]}], "]"}]}], ")"}]}], 
    SuperscriptBox["k", "2"]], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", 
      FractionBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}], "k"], 
      "]"}], "\[GreaterEqual]", 
     RowBox[{"-", "1"}]}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.546016797608153*^9, 3.546017744115164*^9, {3.546017901155742*^9, 
   3.546017918255887*^9}, 3.54601814479272*^9, 3.5460194592406*^9, 
   3.546019501847466*^9, 3.546058816227488*^9, 3.546058858910903*^9, 
   3.546058988908802*^9, 3.546059027020108*^9, {3.546059207468971*^9, 
   3.546059213730049*^9}, 3.546059311153677*^9, 3.54606008545984*^9, {
   3.546060121584368*^9, 3.54606015090936*^9}, 3.546060482353594*^9, 
   3.546061561105924*^9, 3.546061888934606*^9, 3.546071469576597*^9, 
   3.546136819048198*^9, 3.546137375365945*^9, 3.546138981516168*^9, 
   3.546148053135883*^9, 3.546150578307016*^9, 3.5462322891228228`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"p", "^", 
    RowBox[{"(", 
     RowBox[{"1", "+", "\[Alpha]"}], ")"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016812881654*^9, 3.546016818147665*^9}, {
  3.546016886250683*^9, 3.546016904857094*^9}, {3.546018151081055*^9, 
  3.546018151902321*^9}, {3.546019505441384*^9, 3.546019506907304*^9}, {
  3.546059876912032*^9, 3.546059883931349*^9}, {3.546060057180457*^9, 
  3.546060062381365*^9}}],

Cell[BoxData[
 SuperscriptBox[
  RowBox[{"(", 
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       SuperscriptBox[
        RowBox[{"(", 
         FractionBox[
          RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", "k",
      " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
  RowBox[{"1", "+", "\[Alpha]"}]]], "Output",
 CellChangeTimes->{3.546230203148988*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"csIntJmenovatel1", "/.", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], "\[Rule]", " ", 
     RowBox[{"y", "*", "\[Lambda]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016918820028*^9, 3.546016933459735*^9}, {
  3.546018162034847*^9, 3.546018162802109*^9}, {3.546019511970786*^9, 
  3.546019518337126*^9}, {3.546059893179542*^9, 3.546059893847781*^9}, {
  3.546060047266137*^9, 3.546060052681203*^9}, {3.546230217034243*^9, 
  3.546230217998498*^9}}],

Cell[BoxData[
 SuperscriptBox[
  RowBox[{"(", 
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       SuperscriptBox["y", "k"]}]], " ", "k", " ", 
     SuperscriptBox["y", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
  RowBox[{"1", "+", "\[Alpha]"}]]], "Output",
 CellChangeTimes->{{3.546230207442299*^9, 3.546230219675734*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel3", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"csIntJmenovatel2", "*", "\[Lambda]"}], "/.", 
    RowBox[{"y", "\[Rule]", " ", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{"1", "/", "k"}], ")"}]}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.54623072884787*^9, 3.546230785760333*^9}, {
  3.546231604373572*^9, 3.546231605426678*^9}, {3.546231716620151*^9, 
  3.546231717085787*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", 
        SuperscriptBox[
         RowBox[{"(", 
          SuperscriptBox["t", 
           FractionBox["1", "k"]], ")"}], "k"]}]], " ", "k", " ", 
      SuperscriptBox[
       RowBox[{"(", 
        SuperscriptBox["t", 
         FractionBox["1", "k"]], ")"}], 
       RowBox[{
        RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
   RowBox[{"1", "+", "\[Alpha]"}]], " ", "\[Lambda]"}]], "Output",
 CellChangeTimes->{{3.546230757338739*^9, 3.546230786864854*^9}, 
   3.54623122497391*^9, 3.546231390679448*^9, 3.546231620590633*^9, 
   3.546231718726483*^9, 3.546231912776218*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel4", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"csIntJmenovatel3", "/", "k"}], "*", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "k"}], ")"}], "/", "k"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546231135452288*^9, 3.546231187522384*^9}, 
   3.546231380041735*^9, {3.546231608893195*^9, 3.546231609558657*^9}, {
   3.546231727310628*^9, 3.546231732399831*^9}, {3.546231878599405*^9, 
   3.546231893664122*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"-", "t"}]], " ", 
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", "t"}]], " ", "k", " ", 
      SuperscriptBox["t", 
       FractionBox[
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}], "k"]]}], "\[Lambda]"], ")"}], 
   "\[Alpha]"]}]], "Output",
 CellChangeTimes->{
  3.5462311903916*^9, 3.54623123012743*^9, 3.546231393222635*^9, 
   3.546231736337671*^9, {3.546231899759423*^9, 3.546231920689016*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel5", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"Integrate", "[", 
    RowBox[{"csIntJmenovatel4", ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "\[Infinity]"}], "}"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.546017079018856*^9, 3.546017090969569*^9}, {
  3.546018190056803*^9, 3.546018190821094*^9}, {3.546059043677427*^9, 
  3.54605904460088*^9}, {3.546059403368323*^9, 3.546059411524818*^9}, {
  3.546059479614725*^9, 3.546059492483282*^9}, {3.546059617399394*^9, 
  3.546059617680817*^9}, {3.546059915271946*^9, 3.546059916341114*^9}, {
  3.546060024912348*^9, 3.546060025553251*^9}, {3.546061569414866*^9, 
  3.546061603372963*^9}, {3.54606187218996*^9, 3.546061873288195*^9}, {
  3.546230234851797*^9, 3.546230235704077*^9}, {3.54623031496448*^9, 
  3.546230316811469*^9}, {3.546230894174747*^9, 3.54623093187054*^9}, {
  3.546231021434708*^9, 3.546231058033388*^9}, {3.546231204938011*^9, 
  3.546231254795637*^9}, {3.54623130518147*^9, 3.546231317577529*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}]}]], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      FractionBox["k", "\[Lambda]"], ")"}], "\[Alpha]"], " ", 
    RowBox[{"Gamma", "[", 
     RowBox[{"1", "+", "\[Alpha]", "-", 
      FractionBox["\[Alpha]", "k"]}], "]"}]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.546230539424707*^9, 3.546230928296439*^9, 3.546231130736478*^9, 
   3.546231217042055*^9, {3.546231310240832*^9, 3.546231332557165*^9}, 
   3.546231408953687*^9, 3.546231758805175*^9, 3.546231931318572*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cs", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"csIntCitatel5", "/", "csIntJmenovatel5"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546017159619789*^9, 3.546017171553549*^9}, {
   3.546018198699244*^9, 3.54601820322215*^9}, 3.546061584597621*^9, {
   3.546061615263666*^9, 3.546061627686996*^9}, {3.546232301287677*^9, 
   3.546232306940481*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"\[Alpha]", " ", 
     RowBox[{"(", 
      RowBox[{"k", "-", 
       RowBox[{"Log", "[", 
        RowBox[{"1", "+", "\[Alpha]"}], "]"}], "+", 
       RowBox[{"PolyGamma", "[", 
        RowBox[{"0", ",", 
         RowBox[{"1", "+", "\[Alpha]", "-", 
          FractionBox["\[Alpha]", "k"]}]}], "]"}]}], ")"}]}], 
    RowBox[{
     SuperscriptBox["k", "2"], " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", 
      FractionBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}], "k"], 
      "]"}], "\[GreaterEqual]", 
     RowBox[{"-", "1"}]}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232321705469*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"cs", "'"}], " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"D", "[", 
    RowBox[{"cs", ",", "\[Theta]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546017177523059*^9, 3.546017189050696*^9}, {
  3.546018219369372*^9, 3.546018251272656*^9}, {3.546137392518803*^9, 
  3.546137393253288*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"\[Alpha]", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "k"}], " ", 
        RowBox[{"(", 
         RowBox[{"k", "-", 
          RowBox[{"2", " ", 
           RowBox[{"Log", "[", 
            RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
          RowBox[{"2", " ", 
           RowBox[{"PolyGamma", "[", 
            RowBox[{"0", ",", 
             RowBox[{"1", "+", "\[Alpha]", "-", 
              FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], "+", 
       RowBox[{"\[Alpha]", " ", 
        RowBox[{"PolyGamma", "[", 
         RowBox[{"1", ",", 
          RowBox[{"1", "+", "\[Alpha]", "-", 
           FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], 
    RowBox[{
     SuperscriptBox["k", "4"], " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", 
      FractionBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}], "k"], 
      "]"}], "\[GreaterEqual]", 
     RowBox[{"-", "1"}]}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232329374177*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia", " ", "=", 
  RowBox[{"FullSimplify", "[", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"ss", "'"}], " ", "-", " ", 
      RowBox[{"cs", "'"}], "-", 
      RowBox[{"\[Alpha]", 
       RowBox[{"(", 
        RowBox[{"ss", "-", "cs"}], ")"}], 
       RowBox[{"(", 
        RowBox[{"cs", "-", "ss"}], ")"}]}]}], ")"}], "*", 
    RowBox[{"p", "^", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016927559429*^9, 3.546016927697169*^9}, {
   3.546017069821145*^9, 3.546017085073989*^9}, 3.546017230368702*^9, {
   3.546017453638702*^9, 3.546017454633499*^9}, {3.546017487540381*^9, 
   3.546017511750122*^9}, 3.546060275246113*^9, {3.546060594894228*^9, 
   3.546060607304117*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      FractionBox[
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"-", 
          SuperscriptBox[
           RowBox[{"(", 
            FractionBox[
             RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", 
        "k", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          FractionBox[
           RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
     RowBox[{"1", "+", "\[Alpha]"}]], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", 
        SuperscriptBox["k", "2"]]}], "-", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         FractionBox[
          RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"], " ", 
       SuperscriptBox[
        RowBox[{"Log", "[", 
         FractionBox[
          RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], "]"}], "2"]}], "+", 
      FractionBox[
       RowBox[{"\[Alpha]", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "\[Alpha]"}], " ", 
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              RowBox[{"k", " ", 
               RowBox[{"(", 
                RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", "1"}], "+", 
                 SuperscriptBox[
                  RowBox[{"(", 
                   FractionBox[
                    RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], 
                ")"}], " ", 
               RowBox[{"Log", "[", 
                FractionBox[
                 RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], "]"}]}]}], 
             ")"}]}], "+", 
           RowBox[{"\[Alpha]", " ", 
            RowBox[{"PolyGamma", "[", 
             RowBox[{"0", ",", 
              RowBox[{"1", "+", "\[Alpha]", "-", 
               FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}], "2"]}], 
       RowBox[{
        SuperscriptBox["k", "4"], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"]}]], "+", 
      FractionBox[
       RowBox[{"\[Alpha]", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"k", " ", 
           RowBox[{"(", 
            RowBox[{"k", "-", 
             RowBox[{"2", " ", 
              RowBox[{"Log", "[", 
               RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
             RowBox[{"2", " ", 
              RowBox[{"PolyGamma", "[", 
               RowBox[{"0", ",", 
                RowBox[{"1", "+", "\[Alpha]", "-", 
                 FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], "-", 
          RowBox[{"\[Alpha]", " ", 
           RowBox[{"PolyGamma", "[", 
            RowBox[{"1", ",", 
             RowBox[{"1", "+", "\[Alpha]", "-", 
              FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], 
       RowBox[{
        SuperscriptBox["k", "4"], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]}], ")"}]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", 
      FractionBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}], "k"], 
      "]"}], "\[GreaterEqual]", 
     RowBox[{"-", "1"}]}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232363544007*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"Ia", "/.", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], "\[Rule]", 
     RowBox[{"y", "*", "\[Lambda]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016832069324*^9, 3.54601683491256*^9}, {
  3.546016912126374*^9, 3.546016916727737*^9}, {3.546017322178493*^9, 
  3.546017372508301*^9}, {3.546017463020216*^9, 3.54601752428375*^9}, {
  3.546232394685446*^9, 3.546232395694052*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      FractionBox[
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"-", 
          SuperscriptBox["y", "k"]}]], " ", "k", " ", 
        SuperscriptBox["y", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
     RowBox[{"1", "+", "\[Alpha]"}]], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", 
        SuperscriptBox["k", "2"]]}], "-", 
      RowBox[{
       SuperscriptBox["y", "k"], " ", 
       SuperscriptBox[
        RowBox[{"Log", "[", "y", "]"}], "2"]}], "+", 
      FractionBox[
       RowBox[{"\[Alpha]", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              RowBox[{"k", " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", "1"}], "+", 
                 SuperscriptBox["y", "k"]}], ")"}], " ", 
               RowBox[{"(", 
                RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
               RowBox[{"Log", "[", "y", "]"}]}]}], ")"}]}], "-", 
           RowBox[{"\[Alpha]", " ", 
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
           RowBox[{"\[Alpha]", " ", 
            RowBox[{"PolyGamma", "[", 
             RowBox[{"0", ",", 
              RowBox[{"1", "+", "\[Alpha]", "-", 
               FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}], "2"]}], 
       RowBox[{
        SuperscriptBox["k", "4"], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"]}]], "+", 
      FractionBox[
       RowBox[{"\[Alpha]", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"k", " ", 
           RowBox[{"(", 
            RowBox[{"k", "-", 
             RowBox[{"2", " ", 
              RowBox[{"Log", "[", 
               RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
             RowBox[{"2", " ", 
              RowBox[{"PolyGamma", "[", 
               RowBox[{"0", ",", 
                RowBox[{"1", "+", "\[Alpha]", "-", 
                 FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], "-", 
          RowBox[{"\[Alpha]", " ", 
           RowBox[{"PolyGamma", "[", 
            RowBox[{"1", ",", 
             RowBox[{"1", "+", "\[Alpha]", "-", 
              FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], 
       RowBox[{
        SuperscriptBox["k", "4"], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]}], ")"}]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", 
      FractionBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}], "k"], 
      "]"}], "\[GreaterEqual]", 
     RowBox[{"-", "1"}]}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{{3.546232392215838*^9, 3.546232413442848*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"Ia1", "*", "\[Lambda]"}], "/.", 
    RowBox[{"y", "\[Rule]", " ", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{"1", "/", "k"}], ")"}]}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232427015182*^9, 3.546232435156028*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      FractionBox[
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"-", 
          SuperscriptBox[
           RowBox[{"(", 
            SuperscriptBox["t", 
             FractionBox["1", "k"]], ")"}], "k"]}]], " ", "k", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          SuperscriptBox["t", 
           FractionBox["1", "k"]], ")"}], 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
     RowBox[{"1", "+", "\[Alpha]"}]], " ", "\[Lambda]", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", 
        SuperscriptBox["k", "2"]]}], "-", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         SuperscriptBox["t", 
          FractionBox["1", "k"]], ")"}], "k"], " ", 
       SuperscriptBox[
        RowBox[{"Log", "[", 
         SuperscriptBox["t", 
          FractionBox["1", "k"]], "]"}], "2"]}], "+", 
      FractionBox[
       RowBox[{"\[Alpha]", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              RowBox[{"k", " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", "1"}], "+", 
                 SuperscriptBox[
                  RowBox[{"(", 
                   SuperscriptBox["t", 
                    FractionBox["1", "k"]], ")"}], "k"]}], ")"}], " ", 
               RowBox[{"(", 
                RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
               RowBox[{"Log", "[", 
                SuperscriptBox["t", 
                 FractionBox["1", "k"]], "]"}]}]}], ")"}]}], "-", 
           RowBox[{"\[Alpha]", " ", 
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
           RowBox[{"\[Alpha]", " ", 
            RowBox[{"PolyGamma", "[", 
             RowBox[{"0", ",", 
              RowBox[{"1", "+", "\[Alpha]", "-", 
               FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}], "2"]}], 
       RowBox[{
        SuperscriptBox["k", "4"], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"]}]], "+", 
      FractionBox[
       RowBox[{"\[Alpha]", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"k", " ", 
           RowBox[{"(", 
            RowBox[{"k", "-", 
             RowBox[{"2", " ", 
              RowBox[{"Log", "[", 
               RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
             RowBox[{"2", " ", 
              RowBox[{"PolyGamma", "[", 
               RowBox[{"0", ",", 
                RowBox[{"1", "+", "\[Alpha]", "-", 
                 FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], "-", 
          RowBox[{"\[Alpha]", " ", 
           RowBox[{"PolyGamma", "[", 
            RowBox[{"1", ",", 
             RowBox[{"1", "+", "\[Alpha]", "-", 
              FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], 
       RowBox[{
        SuperscriptBox["k", "4"], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]}], ")"}]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", 
      FractionBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}], "k"], 
      "]"}], "\[GreaterEqual]", 
     RowBox[{"-", "1"}]}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232478566571*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia3", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Ia2", "/", "k"}], "*", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "k"}], ")"}], "/", "k"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.54623247327657*^9, 3.546232478732023*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    FractionBox["1", 
     SuperscriptBox["k", "5"]], 
    RowBox[{
     SuperscriptBox["t", 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       FractionBox["1", "k"]}]], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", "t"}]], " ", "k", " ", 
         SuperscriptBox["t", 
          FractionBox[
           RowBox[{
            RowBox[{"-", "1"}], "+", "k"}], "k"]]}], "\[Lambda]"], ")"}], 
      RowBox[{"1", "+", "\[Alpha]"}]], " ", "\[Lambda]", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", 
        SuperscriptBox["k", "2"]}], "-", 
       RowBox[{
        SuperscriptBox["k", "2"], " ", "t", " ", 
        SuperscriptBox[
         RowBox[{"Log", "[", "t", "]"}], "2"]}], "+", 
       FractionBox[
        RowBox[{"\[Alpha]", " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"k", "-", 
            RowBox[{"k", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "1"}], "+", "t"}], ")"}], " ", 
             RowBox[{"(", 
              RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
             RowBox[{"Log", "[", "t", "]"}]}], "+", 
            RowBox[{"\[Alpha]", " ", 
             RowBox[{"Log", "[", 
              RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "-", 
            RowBox[{"\[Alpha]", " ", 
             RowBox[{"PolyGamma", "[", 
              RowBox[{"0", ",", 
               RowBox[{"1", "+", "\[Alpha]", "-", 
                FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}], "2"]}], 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"]], "+", 
       FractionBox[
        RowBox[{"\[Alpha]", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{"k", "-", 
              RowBox[{"2", " ", 
               RowBox[{"Log", "[", 
                RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
              RowBox[{"2", " ", 
               RowBox[{"PolyGamma", "[", 
                RowBox[{"0", ",", 
                 RowBox[{"1", "+", "\[Alpha]", "-", 
                  FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], "-", 
           RowBox[{"\[Alpha]", " ", 
            RowBox[{"PolyGamma", "[", 
             RowBox[{"1", ",", 
              RowBox[{"1", "+", "\[Alpha]", "-", 
               FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], 
        RowBox[{"1", "+", "\[Alpha]"}]]}], ")"}]}]}], ",", 
   RowBox[{
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}], ">", "\[Alpha]"}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232498458661*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia4", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"Integrate", "[", 
    RowBox[{"Ia3", ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "\[Infinity]"}], "}"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.546017553376211*^9, 3.546017578186591*^9}, {
  3.546060190028669*^9, 3.546060215541151*^9}, {3.546232494373554*^9, 
  3.546232519267088*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{"-", 
    RowBox[{
     FractionBox["1", 
      SuperscriptBox["k", "4"]], 
     RowBox[{
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
       RowBox[{
        RowBox[{"-", "3"}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", 
           FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}]}]], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        FractionBox["k", "\[Lambda]"], ")"}], "\[Alpha]"], " ", 
      RowBox[{"Gamma", "[", 
       RowBox[{"1", "+", "\[Alpha]", "-", 
        FractionBox["\[Alpha]", "k"]}], "]"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"k", "+", 
           RowBox[{
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "2"}], " ", "k"}], "+", 
              RowBox[{"2", " ", "\[Alpha]"}], "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"k", "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", 
                  "\[Alpha]"}]}], ")"}], " ", 
               RowBox[{"Log", "[", 
                RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}]}]}], ")"}]}],
         "-", 
        RowBox[{"2", " ", "k", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "k"}], "+", "\[Alpha]", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"k", "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], 
             ")"}], " ", 
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}], " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"0", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}], "+", 
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"k", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], 
          ")"}], " ", 
         SuperscriptBox[
          RowBox[{"PolyGamma", "[", 
           RowBox[{"0", ",", 
            RowBox[{"1", "+", "\[Alpha]", "-", 
             FractionBox["\[Alpha]", "k"]}]}], "]"}], "2"]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox["k", "2"], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "k", " ", 
            "\[Alpha]"}], "+", 
           SuperscriptBox["\[Alpha]", "2"]}], ")"}], " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"1", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}]}]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"k", "+", 
      RowBox[{"k", " ", "\[Alpha]"}]}], ">", "\[Alpha]"}], "&&", 
    RowBox[{"\[Alpha]", ">", 
     RowBox[{"-", "1"}]}], "&&", 
    RowBox[{"k", ">", "0"}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232723877207*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IF", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"-", 
     RowBox[{"Ia4", "^", 
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}]}]}], " ", "*", " ", 
    RowBox[{"(", 
     RowBox[{"p", "^", "\[Alpha]"}], ")"}], "*", 
    RowBox[{"(", 
     RowBox[{"ss", "-", "cs"}], ")"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546018347393014*^9, 3.546018403066614*^9}, {
   3.546018436099692*^9, 3.546018441274599*^9}, 3.546019614310392*^9, {
   3.546019656617135*^9, 3.546019704529838*^9}, {3.546057935083661*^9, 
   3.546057940051575*^9}, {3.546060690488888*^9, 3.546060692698881*^9}, {
   3.546136907926816*^9, 3.54613692580183*^9}, {3.546232739391533*^9, 
   3.546232740164084*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["k", "2"], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
       RowBox[{"2", "+", "\[Alpha]", "-", 
        FractionBox["\[Alpha]", "k"]}]], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        FractionBox["1", "\[Lambda]"], ")"}], 
       RowBox[{"-", "\[Alpha]"}]], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        FractionBox[
         RowBox[{
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"-", 
            SuperscriptBox[
             RowBox[{"(", 
              FractionBox[
               RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", 
          SuperscriptBox[
           RowBox[{"(", 
            FractionBox[
             RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
           RowBox[{
            RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
       "\[Alpha]"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"\[Alpha]", " ", 
         RowBox[{"Log", "[", 
          RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"1", "-", 
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                FractionBox[
                 RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], 
             ")"}], " ", 
            RowBox[{"Log", "[", 
             FractionBox[
              RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], "]"}]}]}], ")"}]}], 
        "-", 
        RowBox[{"\[Alpha]", " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"0", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], ")"}], "/", 
    
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Gamma", "[", 
       RowBox[{"1", "+", "\[Alpha]", "-", 
        FractionBox["\[Alpha]", "k"]}], "]"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"k", "+", 
           RowBox[{
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "2"}], " ", "k"}], "+", 
              RowBox[{"2", " ", "\[Alpha]"}], "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"k", "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", 
                  "\[Alpha]"}]}], ")"}], " ", 
               RowBox[{"Log", "[", 
                RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}]}]}], ")"}]}],
         "-", 
        RowBox[{"2", " ", "k", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "k"}], "+", "\[Alpha]", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"k", "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], 
             ")"}], " ", 
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}], " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"0", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}], "+", 
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"k", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], 
          ")"}], " ", 
         SuperscriptBox[
          RowBox[{"PolyGamma", "[", 
           RowBox[{"0", ",", 
            RowBox[{"1", "+", "\[Alpha]", "-", 
             FractionBox["\[Alpha]", "k"]}]}], "]"}], "2"]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox["k", "2"], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "k", " ", 
            "\[Alpha]"}], "+", 
           SuperscriptBox["\[Alpha]", "2"]}], ")"}], " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"1", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], ")"}]}], 
   ",", 
   RowBox[{
    RowBox[{"k", ">", "0"}], "&&", 
    RowBox[{
     RowBox[{"1", "+", "\[Alpha]"}], ">", "0"}], "&&", 
    RowBox[{"\[Alpha]", "<", 
     RowBox[{"k", "+", 
      RowBox[{"k", " ", "\[Alpha]"}]}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232757750575*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IF1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"IF", "/.", 
    RowBox[{"\[Mu]", "->", "0"}]}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.546017428290329*^9, {3.546018467395976*^9, 3.546018491191415*^9}, {
   3.546018587031472*^9, 3.546018597806486*^9}, 3.546157241026402*^9}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["k", "2"], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
       RowBox[{"2", "+", "\[Alpha]", "-", 
        FractionBox["\[Alpha]", "k"]}]], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        FractionBox[
         RowBox[{
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"-", 
            SuperscriptBox[
             RowBox[{"(", 
              FractionBox["x", "\[Lambda]"], ")"}], "k"]}]], " ", 
          SuperscriptBox[
           RowBox[{"(", 
            FractionBox["x", "\[Lambda]"], ")"}], "k"]}], "x"], ")"}], 
       "\[Alpha]"], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        FractionBox["1", "\[Lambda]"], ")"}], 
       RowBox[{"-", "\[Alpha]"}]], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"\[Alpha]", " ", 
         RowBox[{"Log", "[", 
          RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"1", "-", 
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                FractionBox["x", "\[Lambda]"], ")"}], "k"]}], ")"}], " ", 
            RowBox[{"Log", "[", 
             FractionBox["x", "\[Lambda]"], "]"}]}]}], ")"}]}], "-", 
        RowBox[{"\[Alpha]", " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"0", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], ")"}], "/", 
    
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Gamma", "[", 
       RowBox[{"1", "+", "\[Alpha]", "-", 
        FractionBox["\[Alpha]", "k"]}], "]"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"k", "+", 
           RowBox[{
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "2"}], " ", "k"}], "+", 
              RowBox[{"2", " ", "\[Alpha]"}], "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"k", "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", 
                  "\[Alpha]"}]}], ")"}], " ", 
               RowBox[{"Log", "[", 
                RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}]}]}], ")"}]}],
         "-", 
        RowBox[{"2", " ", "k", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "k"}], "+", "\[Alpha]", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"k", "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], 
             ")"}], " ", 
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}], " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"0", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}], "+", 
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"k", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], 
          ")"}], " ", 
         SuperscriptBox[
          RowBox[{"PolyGamma", "[", 
           RowBox[{"0", ",", 
            RowBox[{"1", "+", "\[Alpha]", "-", 
             FractionBox["\[Alpha]", "k"]}]}], "]"}], "2"]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox["k", "2"], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "k", " ", 
            "\[Alpha]"}], "+", 
           SuperscriptBox["\[Alpha]", "2"]}], ")"}], " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"1", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], ")"}]}], 
   ",", 
   RowBox[{
    RowBox[{"k", ">", "0"}], "&&", 
    RowBox[{
     RowBox[{"1", "+", "\[Alpha]"}], ">", "0"}], "&&", 
    RowBox[{"\[Alpha]", "<", 
     RowBox[{"k", "+", 
      RowBox[{"k", " ", "\[Alpha]"}]}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232774650792*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IF2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"IF1", "/.", 
    RowBox[{"\[Lambda]", "\[Rule]", "1"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232789850054*^9, 3.546232814587751*^9}, {
  3.546232870367111*^9, 3.546232891695176*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["k", "2"], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           SuperscriptBox["x", "k"]}]], " ", 
         SuperscriptBox["x", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}]]}], ")"}], "\[Alpha]"], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
       RowBox[{"2", "+", "\[Alpha]", "-", 
        FractionBox["\[Alpha]", "k"]}]], " ", 
      RowBox[{"(", 
       RowBox[{"k", "-", 
        RowBox[{
         SuperscriptBox["k", "2"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", 
           SuperscriptBox["x", "k"]}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
         RowBox[{"Log", "[", "x", "]"}]}], "+", 
        RowBox[{"\[Alpha]", " ", 
         RowBox[{"Log", "[", 
          RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "-", 
        RowBox[{"\[Alpha]", " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"0", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], ")"}], "/", 
    
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Gamma", "[", 
       RowBox[{"1", "+", "\[Alpha]", "-", 
        FractionBox["\[Alpha]", "k"]}], "]"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"k", "+", 
           RowBox[{
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "2"}], " ", "k"}], "+", 
              RowBox[{"2", " ", "\[Alpha]"}], "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"k", "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", 
                  "\[Alpha]"}]}], ")"}], " ", 
               RowBox[{"Log", "[", 
                RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}]}]}], ")"}]}],
         "-", 
        RowBox[{"2", " ", "k", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "k"}], "+", "\[Alpha]", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"k", "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], 
             ")"}], " ", 
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}], " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"0", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}], "+", 
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"k", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], 
          ")"}], " ", 
         SuperscriptBox[
          RowBox[{"PolyGamma", "[", 
           RowBox[{"0", ",", 
            RowBox[{"1", "+", "\[Alpha]", "-", 
             FractionBox["\[Alpha]", "k"]}]}], "]"}], "2"]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox["k", "2"], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "k", " ", 
            "\[Alpha]"}], "+", 
           SuperscriptBox["\[Alpha]", "2"]}], ")"}], " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"1", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], ")"}]}], 
   ",", 
   RowBox[{
    RowBox[{"k", ">", "0"}], "&&", 
    RowBox[{
     RowBox[{"1", "+", "\[Alpha]"}], ">", "0"}], "&&", 
    RowBox[{"\[Alpha]", "<", 
     RowBox[{"k", "+", 
      RowBox[{"k", " ", "\[Alpha]"}]}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546233010925664*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"IFun", " ", "=", " ", 
   RowBox[{"Function", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k", ",", "\[Alpha]"}], "}"}], " ", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["k", "2"], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox["\[ExponentialE]", 
            RowBox[{"-", 
             SuperscriptBox["x", "k"]}]], " ", 
           SuperscriptBox["x", 
            RowBox[{
             RowBox[{"-", "1"}], "+", "k"}]]}], ")"}], "\[Alpha]"], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
         RowBox[{"2", "+", "\[Alpha]", "-", 
          FractionBox["\[Alpha]", "k"]}]], " ", 
        RowBox[{"(", 
         RowBox[{"k", "-", 
          RowBox[{
           SuperscriptBox["k", "2"], " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", "1"}], "+", 
             SuperscriptBox["x", "k"]}], ")"}], " ", 
           RowBox[{"(", 
            RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
           RowBox[{"Log", "[", "x", "]"}]}], "+", 
          RowBox[{"\[Alpha]", " ", 
           RowBox[{"Log", "[", 
            RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "-", 
          RowBox[{"\[Alpha]", " ", 
           RowBox[{"PolyGamma", "[", 
            RowBox[{"0", ",", 
             RowBox[{"1", "+", "\[Alpha]", "-", 
              FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], ")"}], 
      "/", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Gamma", "[", 
         RowBox[{"1", "+", "\[Alpha]", "-", 
          FractionBox["\[Alpha]", "k"]}], "]"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"k", " ", 
           RowBox[{"(", 
            RowBox[{"k", "+", 
             RowBox[{
              RowBox[{"Log", "[", 
               RowBox[{"1", "+", "\[Alpha]"}], "]"}], " ", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"-", "2"}], " ", "k"}], "+", 
                RowBox[{"2", " ", "\[Alpha]"}], "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"k", "+", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", 
                    "\[Alpha]"}]}], ")"}], " ", 
                 RowBox[{"Log", "[", 
                  RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}]}]}], 
            ")"}]}], "-", 
          RowBox[{"2", " ", "k", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", "k"}], "+", "\[Alpha]", "+", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"k", "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}],
                ")"}], " ", 
              RowBox[{"Log", "[", 
               RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}], " ", 
           RowBox[{"PolyGamma", "[", 
            RowBox[{"0", ",", 
             RowBox[{"1", "+", "\[Alpha]", "-", 
              FractionBox["\[Alpha]", "k"]}]}], "]"}]}], "+", 
          RowBox[{"k", " ", 
           RowBox[{"(", 
            RowBox[{"k", "+", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], 
            ")"}], " ", 
           SuperscriptBox[
            RowBox[{"PolyGamma", "[", 
             RowBox[{"0", ",", 
              RowBox[{"1", "+", "\[Alpha]", "-", 
               FractionBox["\[Alpha]", "k"]}]}], "]"}], "2"]}], "+", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["k", "2"], "+", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "k", " ", 
              "\[Alpha]"}], "+", 
             SuperscriptBox["\[Alpha]", "2"]}], ")"}], " ", 
           RowBox[{"PolyGamma", "[", 
            RowBox[{"1", ",", 
             RowBox[{"1", "+", "\[Alpha]", "-", 
              FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], ")"}]}]}],
     "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.54608073954952*^9, 3.546080787340927*^9}, {
   3.546080827508503*^9, 3.546080832763547*^9}, {3.546080881724667*^9, 
   3.54608089839569*^9}, {3.546136031913543*^9, 3.546136106756538*^9}, {
   3.546136264957334*^9, 3.546136269166274*^9}, {3.546136300237964*^9, 
   3.546136302873075*^9}, 3.546136404353272*^9, {3.546136877306471*^9, 
   3.546136878124014*^9}, {3.546136974390393*^9, 3.546136995325726*^9}, {
   3.546137115334749*^9, 3.546137121892679*^9}, {3.546233026432763*^9, 
   3.546233039064002*^9}}],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<PlotLegends`\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.546078399638204*^9, 3.546078434270568*^9}, {
  3.546078523483738*^9, 3.546078526611331*^9}, {3.546078631725602*^9, 
  3.546078677869414*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"IFun", "[", 
      RowBox[{"1", ",", "0.05"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"1", ",", "0.1"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"1", ",", "0.3"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"1", ",", "0.5"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"1", ",", "1"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "6"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotLegend", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<\[Alpha] = 0.05\>\"", ",", "\"\<\[Alpha] = 0.1\>\"", ",", 
      "\"\<\[Alpha] = 0.3\>\"", ",", "\"\<\[Alpha] = 0.5\>\"", ",", 
      "\"\<\[Alpha] = 1\>\"", ",", "\"\<\[Alpha] = 2\>\""}], "}"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"LegendPosition", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"-", "0.4"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Dashed", ",", " ", "Thick", ",", "Thin", ",", " ", "Dotted", ",", " ", 
      "Yellow", ",", " ", "Blue"}], "}"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.546071566443362*^9, 3.546071604772914*^9}, {
   3.546071664304524*^9, 3.546071734557583*^9}, {3.546071769565434*^9, 
   3.546071781503191*^9}, {3.546077877666447*^9, 3.546077878779971*^9}, {
   3.546078077257591*^9, 3.546078094273397*^9}, {3.546078128979278*^9, 
   3.546078131508565*^9}, {3.546078195525481*^9, 3.546078246143438*^9}, {
   3.54607831567725*^9, 3.546078368785814*^9}, {3.546078441904356*^9, 
   3.546078501052553*^9}, 3.546078697301196*^9, {3.546078795298968*^9, 
   3.546078819926423*^9}, {3.546078851304196*^9, 3.54607891370029*^9}, {
   3.546079894604615*^9, 3.546079946211399*^9}, {3.546136122778719*^9, 
   3.546136164810206*^9}, 3.546136449027762*^9, 3.54623312566578*^9, {
   3.54623315837957*^9, 3.546233172933139*^9}}],

Cell[BoxData[
 GraphicsBox[{InsetBox[
    GraphicsBox[{{}, {}, 
      {Hue[0.67, 0.6, 0.6], Dashing[{Small, Small}], LineBox[CompressedData["
1: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
k6b///+j/wMJIm59
        "]]}, 
      {Hue[0.9060679774997897, 0.6, 0.6], Thickness[Large], 
       LineBox[CompressedData["
1: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
ZaDAgEt09juUz8ScMpgrdUYYsBaTc0WLMMOhaT5cmwFYLj5rR3hXYKZcnjED
fl010Q4ifDnV+17zIwYE9nQ6JhB+ht6NmfJkgDedapVCOKdHpX1zCAOEQ7cj
iYSHZ0W59iUxwMx0ZuUNYV6uP6rqnxnwPGwy+TFhRKr9qUkFAwx5Hl64TPiR
8qe8Z60M0Er8+UeMcKKe/0TMCANMWM8XUInvb7G9L/l1lgEeJDn/d4RZXqsZ
dLEwgedNnLcG4SPvd4fO8zEh9heaO0Hsz93S1VpeSSbwxSdvf0k4tKObRf4I
E9Aq7a+8hCun85UuqDJB8l9pVhix33vErTJe3WUCFvkw3oWoT8CQRFKgHRP2
fWUL+03Ucym2OyrCkwk6hv03LxKuEVHzTYlnwhWVOve/RD4O9yx7ZGcz4V/t
6wk1wtGROc5fypggEdh73iuDqO920fs/+phwcIF3hU7krbO12aiRzoQ9UboG
PIRVgl/pdS4zwS6cWi9H5NPXe/m9PdcMdPLsWdck8mvIZhr6QnYGXHL87cQS
cQimqQRxHJ6B/fyB+1aJ/qiqEPHzO0Hc9wuUbSX6R96z+XmoxgzEBn6TvxdD
zKe1k3bvzWbgRqE2WTwSB8UBQWtp6xkoe70x/jUchwelMxaZj2cg69DhKxfC
cGhzSTXOezkDT3lVanSJfk5Z4tOuTCI8L6zA5odDX+fUhXMZM0D9fZRk4IvD
ti/VGnW5M3DeBQLTiXPwiYM7tKEzoFd3buXAS6J/ZsblaYMzoDyk2NnuSuSN
jm5lFZ2FikRT04SHOEjWRm/2lpiFFyyyEo4PcNBPd9y0RXYW6p/T2NSI+YaZ
y63xnZiFbqaDbjUxD8PwyCkJPWK9t0qr/U1ing5a158JnYVfsQdiDc4SeZS1
F7SInoWCj/5ybqo4SDk53Ql6Pwv0esp8OBB55PGY78ubhbrDJec/KuFAR4J3
PG6fBdXBS0P2B4n6Jec9TBWYA56B5xTz7cTzs4VfGsTmILeOK3adBwdv5dKN
Oak5OK39uyGIOF/su76HwbE5CCe5XInchMMFcmdpz/U5MNUIfaf6hwb/Hv7h
4no7B1/x24pCvTSwL169fjhhDuz1CvMOdNJgnJ2UqJ82B5p69pqnWmnQEUdW
TC6aA5ojfx9CnHfZzSK3lHvmoMHo8mlGMQ2Mjp7+aCsyD5VsZsHdkTSo+Ot5
sSNmHvykPtryXCLWi9gv2X6YhyYftQ6f8zT4deJeIlfWPLzUqVtfUaMBt/PZ
BdWSeXivv7u4/iQN9OY3x37umYcXySdP75WhwcRk6GSQ4AJcTlJ7VsBCA4HB
ZD/NNwvAd6og/W7uCFigNTXlLxaBe1H79q9/VFhR4pVU9FuExwlMdt4/xP9Q
gb5rRsgiXNu6nq04S4WsjF8HwxMXoVVTgd92jAqMMPawB+WLwH87+0V6IxUe
WyC3Bf4uwjvVJ8sKcVTw5CuefWC3BGUc8eqfTlDh3b00UUHjP1DTnzsgUTUE
B2+MLK2brQDzr8X13k99MDR/pQnRXIWASgPQt+iCuWERBaHra/Cq+2a9/fVW
CM56el9ffwOK6cZbBxerQZqHfOlJDAkh6daLVraVQOEjz6ygBBZkMsPPCD3m
Ax17wzivhrIimIXz52ykAJV62S5z+x0b0jkkXiXBXY0qaQ8rJsSwIy9sd3Ld
5mhDBx+9UgkM2IT4nv2XW6jYg+Yp3dz6I4QDqdPXlHvFOowK6VX3pr/iRPRN
ospli2ko0EghlY/JiODV87rzY2PoOyGLrdJPNiMVYSPvgo3o6Iv4Bz7HLLcg
8x/C7jglTKFxTVE/gx5xITf+Hhk5IDCDutuEzey050bctFwDUltm0UkTGeGb
d7cidrtClDps5lH/tQn2IfNtSP7WnKgJ+UW0ZEqDuc2AB/FJsHTLaF5Cu/ae
oJ2U4kUEDGPiL5svoxay9w6FpfAiKTtvMf+K/UUr9Axdz+ziQw4Ie213yl9F
j96YyBBI4kPEtZLnUy3WUKuX57qVd/AjEY5bqq6sraO+5uS/LGH8yKiefMVR
NRL2bafJxoTAdoR03sr6hBAL9nXdm21/0Hak5vGVVlIvC9aUrzYRyCeATO94
VhidwYr9EDf/GRAqgOABpIO1DmyYV9H1pJEtgkh0TZfw0kF27JbkgJFhoCCy
09rTSmSRHVstPLRDjlMIEayIjTD+uAlzY6M3RDwTQuw3rBNe3ebAhKSUTPaS
KIjrv90f20Q5MWcbvYUtLhTEyme4Nb+GExM7bloj7UpBkk3tRQvrOTFszS5W
1Z2C3I9kPVjcxIltCQxUf/qcgqyWb80t7eDE4rOqwumvKYjzZoeDGJUT+zl+
5FhNNAUpRBJY0WVOTOAej9OrMgpi8laAFC5Dxr7u36mVVE5B6o14X7yRI2NG
c/t3fcMoSPXzD41+8mQs/fm5nwtVFGQq/mWFpyIZO5XoLmTaSEG2sHTtsETI
2N3ByULVIQpSsk086sgNMsaZsuJnRKUgUiHSefsNydhHK847T2nE+jvhEZJG
ZGxpVZIz7xcFCZaILuYzJWN+ogb6EkwK8vrGP5tpWzJ2iHZfTnmWgvzUmWzH
7clYR4bjxo15ChKjtZ+1z5GM7VIKSQv+Q0HsUgNKfriSse+kBNePKxSk+1Km
eukzMmZR8/FKzSoFSXTkjsp9Tsa4g0v2jK5RkFS13IIULzL2Wb/mz8YGBcke
Do2O9iFj/wPO2s6r
        "]]}, 
      {Hue[0.14213595499957954`, 0.6, 0.6], Thickness[Tiny], 
       LineBox[CompressedData["
1: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
        "]]}, 
      {Hue[0.37820393249936934`, 0.6, 0.6], Dashing[{0, Small}], 
       LineBox[CompressedData["
1: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
WqtoiGsUZBTmx8YVVdWSZ+Vo6GlVXgu/Pxs3Hjrw0UqBhsIad57/EcjGQ6pK
7eGbaOi1cV24djjZP2Pu0IQGDQ2tXlHZHcPGDg2vqQ+XaEh9xSsVtww2dqZf
vPTViIY2pD/VSshk4yfajITcqzS094HTqdpvbOxX7Hmw0YyG3m/y3L0km43j
0mzsBa1pyOZrv4lnHhv/Cj7EuuRMQ0fqNbrFy9lY5WxvvGQ0DQX2m6QHNbNx
W0nUiX+vachTL+ivVQsbe+06Ncp5S0PPglvdDjLZmCuTsyctjoZ0bBfbDLSy
cVhrYPW5JBpKfGVWqdjOxvOv7h2PxDQ0FhwyeLybjT/VTYQ+zaWhc1u+/1nE
Y+MLBxI0rPNp6PaQwaki4q9rGe57i2noQdhp/p29bHyN1y/TVUVDy3xCjwoN
sPGPGyFoHYuG6ks0hU+PsLET6ziH1kZDfEopN6eI12vze/xtp6GSeuaW0FE2
dlO2qivn0NDZ4G8lP8fYeMfoflOrARrqO5qjozbJxpH2g54pMzTUrqB/NH2a
jY/1vFWOmKUhwTC/12iGjafOGfx046NQzuJ0w2JiXbVC2dMCFOq4t0Dwxz82
FpwN+zwlQqFVQ75Lq+bY2NL1UIP6MgpNyb8cyp7Xhqc8arqXr6DQsUM1R8aJ
H7+4MDUtSyGD9pPt6+e34cjo20sz5SikGnW4wp/4B448r7qeQrkilqEX+Nvw
heJ1llIbKVS57nq/F3FPVarjmBKF9ryse5hFPJ9V9jJ5C4Wejg+YLxVowyoz
E+xNuyikFf7mWBlxDr/LkKgahRYPa8aPEWuJiM4b2EMhX/lbR2QF27CxzBq5
D4hC//pO6d4kDtqpbfyfJoUo1xxv4QVtWA412yw4SqHJ9xULlIg/HTZ5zDlG
oZHOWwU6xCWn7797o02hXTF+YkHEf21ieSvPUEhW3YLDEGrDTxy3/pk9SyHt
Na4eqsR0t+8LWQYU2jF52E6feKN/3foIQwrZNLbK+RAbfp6zXGJKoUUxtxum
iHvTPZwmzSi08P6aDJpwG76bI+Xz6xqF9uY/71xH7Fu94VPADQptsYqmnyXO
HTgzLGFLoa1hP7s/EJ8Y75g3ZEeh0XIfaUzcPHODqrYn44eL+9YQj4i4qXg7
UkhQ8YbxGPEDuvgBywcUytauwAIL27DIsjD9Y84UcuJNmkoSy69Psl3oRqEV
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
gWztqj5+38TE/wMmWOED
        "]]}, 
      {RGBColor[1, 1, 0], LineBox[CompressedData["
1:eJwV1Xk81M8fB3A51+46E4UoSaGSq5TqPSRH5eiQComQVHRTlJTkvskZkrMQ
PhW+Mu4jKkRuOXY3V+TKUfL7/P7ax/Mxuzvznnm9ZzbaOB+3Y2djY+tdxcb2
/0/n8sVk3BMJLYoseD5CK/OWH1wsi4+C+Jj64oiHtDKxYyXEZo9oELDhW/4Z
QC3LcI1y9rOOBZfevXmRWbxlDbWHmSfknsMhpSNKE4KUshwXYRMLziSQjXHa
pnyKp8zF3yM7aC4JxNWnrN+ncpdRCs44zLS/gJIuteJLVlxlTTU11ZvrU+BQ
mlkxo5azLKZLddPp4pew1lRSR2U3Z5kCO39fSXwaBEck/161laNseo2b5mRg
OizkqKUFZbCX/Sc/HL3RIwOmFecdlrezlx09VnHC2zoLEjqi/2zUXVXmnHSn
3lguByIvr2/011vBGsSQ3COxXFid/uZAsvc/zGa7Vfss5xsI7Nm/6l7DMq53
iUwMmHsDMeKB4xp2f/HZROezU+35cKTIPjKieREfkJfz9TMpgJ8HlXR37V7E
MgU97zfVF8Co+pm92UkLeKzGYM2pYgKSHr2lX38wj90nNjUVx7+Dxr3bS8B6
Dp937fp3Ys17uGo1W3VhYBbrsIdu/xn4HvSGL//Vs53FfKL//KQ9CoELhEdH
r8/g5/s7DnlZF8M7lR+ikllTuDwg4D9DuVIQqhhzdP8zjktHOxtpmaUg7qIf
L6Q8jkv0t/TVK2K4WjQQ7+Y4hs3ZrdlS1pYBQ41b9+zwCDYt/SMjLVUOHygS
l87x/cAnr75QfGBVDuX1UaxX51j4uKSBWm9SOXR2Kx/mKmBik3tRh+I2VQCD
f/SCny0DH96l7CAmXwkcoWW7moYHsD6z/dodx0owCKnodzAZwHoRD+62vaoE
Z78zw/eL+7HOdINf+I4qWPxl8rtC8Ts+kGOfLaBWDU+3vhoTaerCqnLx0zxQ
C6Ps+/dc6WvBKm3af+wf1kLYq9v9ElPNeKfXCEdNeS1MGKi4HeVpxjsGd63x
0qmDQzl6bG1un/HW58272Q7Xg/F2O8qzl7VYUpTn/sLJBrhhF3zRV+EdFq/O
fmIW1QAx544fdNUowOtunQx6194A+sXv3381eYNFW5ITb51thCqp4BANlIoF
g/ZV/LL6BEtVUz1DE8eBi/sGz4jjF9Cca916zJmAYQMPgZn0L7BZxuNlTuo7
+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
        "]]}, 
      {RGBColor[0, 0, 1], LineBox[CompressedData["
1:eJwVV3c8Ve8ft12jFK6bkTKyU0aFyudJCi0jVPaIuBHJSlaisldUUqGQhL6S
EXmszGRk79UlyV6Zv/v755zX+/Wc533en/dnnPMIWTnp2dDR0NBIUy//v6/w
1RxcHEqAVmkKvPrNVtZQc+7XZbFX4Fp3cH2ch7Us24NTx4QhCZDaeuRhYZYy
j1C/rIilJHD3OeSteJxQRvh0zW6hMwXOthF8V6OYypqrq78dqHsDvCRGR+8G
xrLnPQoiV7+8hYDgF1GHORjLpOh2DpQkpoHOjgUpqRz6snniveMz4enwLaGv
S5KVvqxYcuKZkN87SBFNnq2+SVd2Qbfi8kPL95C1NFPOeIq2zCnJvU5bLBvq
5u8qeuptYaW8UbEAUg7cN+rpqjLZxDTXJdSMGD4Cvc/4/oVbG7jOI+512NJH
sBr3+XcuYw0bvXYymuvMhc1huv10DitYVVIsOETnE/TqnyTIZi5j4U99BSJ1
nyCc9h4laWYJ/6nWIhp+yYOii5QW10eL2HtapPlLYj7M7TjZeOHvHLbw7Nm6
TCyAGUnOBYLuHFaniz74N7wAfkn/tYspnMU7eLZC9vkVgrHX2Cu6AzP41cmu
M4GWX0Dm9IRsRd8kDqiJcN3b8wUyj4x0c/f8xjd0z7zJ1ysG7ZZH3pL9E/iw
TS7N79MlMH7bd3FogYLLw8KKL4qVAttxS61ls1FcOtn9nS2jFKz3dh57e2cE
l2iKD9RJY7jl8uHEq/BhbExnSfNmTxl0H8gMzUgexAal68L7BMtBcrUhwm9/
N9Z3TJH2NS+H3cF1XnbxnVhPQEuxP6kc1O9pyeRzd2Adr/gzL0QqwOJSv32C
5E987qicHUmyEhpmIqdumzZgzV+dzu7kSnBqaY1urazFGk9877ZnVoJbW3JB
87FqrD7fEBIrWwULb05V6WmUY9Vs2ywOxW9g+lQ2QGomByuIJc4zQw3cmsrT
WmT4D+Tb1dZt/WuAVeviwtm6PDgc+Ju+urwGvAIzVCq9CkF25CgxUL0W9BKs
d3xPwyDxquUYzbk6uCree7YqvhrELnoi89A6yKC1XfspXwsHNgS1Sr/XgZzu
seqJ6joQNnIw8tauh0x/gzcVnd9BgIfZZ1W/AejGr+2S12kBvm9ZQVfiG8BP
Tj7djqYVeF31I/I7GyBHUrnhSFYr8LQmv3Y1+g4ys3J87Rs/YVfEiYpZ80Zw
lFN17XXrAEYmF+bf5Ca4fyluxqu3Bya0/DgW0psgvPXhq5jLvVAfHkbaHGuC
F+tGfc51vVAT8jP28aFmsN5p+zk1uw9COaffJGY0g7fYlaBx8wHwzltMF6pt
hkIXxk/SNQNwy3A9M43SDJRdS8fvyQyCTgIh76NIC8hfepxuPDcI3MIiVVUv
W6DxeoyOV+4QMFZJ1mqVtIBebzP+NDAEyzaHv//oaQGCmJDWLtZh6Mo42dZF
agWisyY/MhuGl3JXx6aiW0H7hIdH+8YwiJ0KZyA+/Alz2elzPsRRII3GEhLe
/oTAQ0u8ZkdGgRCUwL6v8idUDj78EqU/CpO16dySNG3QNJnxcCVqFHJ0KkRP
erXBaU/lMQ66MUiar5WoeNYGuk/cC2oFxiDmSZOMRkEbFJ+1Vho/OgauXX2K
uottoGC6LWxmPwZKFivqNrfaQdE1usypZgwk6bY0J8Paoe+mv31M/xjwvWW4
6JTZDv6pqQnSC2OwMb7b4O5EO5RWul+vE/gFZU4yNuFWHXDi9NXocftf8N9u
BXvO+x3Qeq0vZ+HeL0j5pOz49HUHuHwMlQsK/wWBK2fdkvs6gE3gmzrk/AIt
P8ugz4ad0Mjy4pHq318gH1l+Ntm1E55K64WZrv8CgddChPCYTvBS5rrMxUKB
2dLhkOs/OoE++ccfTREK9Pw4dUFnqhMKavfFNhyiQOVA8o4TrF1Qffpq+uRx
CsRvWUZxne2CiC3GYPrLFPDfWaG7bd0FrWed6GnMKEAWFOb6c78LYpJ/qr+y
o8BJ1ZG4iq9dMMAsqPbNmwJjPlYvbh/phvTW3YeGkijwI7zCxPRyN9Be5mPb
mUGBwpfCglq3u6FWTzto/CMFQr+OJO3P6gbhnuHpZEwB10Y1K/aGbpD1CRYK
qqaAWX+KyOpENyyHct3d00gB+U2rtCbRHnDPfT9/uZsCAjsqbxSr9YAFrZry
1gAFmPaKSKZb9IDH4Zm/JmPU+GUeTMb49kDCbBfv7d8U6D4xmumb2AMz9C8q
jk9ToOLCaUfylx6wztGf/DpPgQ8mb2QNu3rAeCQ/cnWZGr+39X8HuXsBT1if
fLFFjT+s0oVXvhfOOl2XZ6QbB/1EEUVGnV54fi7WV5pxHFQ/PFiadeyFBXf1
XRyEcRAvGc3vC+0Fm/4PrR9Zx2HX99OetRm9UJs2nbV7xzis9b5RzqvpBVG9
A4/kOcZh7A/9+utfvZAeeRtx7x6HH+vWJaH0fbAyzFBUwDkOhWxVPh5CfdDA
dLBxL/c4pPCLgjX0gbeEuaEGcRzCpANptE37IL5bTfoIzzi4HR8rV7nXB029
JfsmqNjsvPoDsed94PrpH4MlaRw0jd+qcxb0QRbBMyOJiuVvMjBttfVBYCdn
dzoVC9y7XvN7vg/ondlMPaiYKbTqcfuuftDR4NrgoOLZBNFz5bL9sJhg4OVC
5e95H8iWdaEfNMb9n7+m6qn8Mvb9GbkfGOSb9zyj6v1Qrx4R+LgfGKW4P5tw
jUN8z1tt57R+IOwtkZimxus/ybDbpKofHlQNSF/cNQ7kteutGiP9oDmp5uq1
k+o367dYBZoB4KTc+OzOPg4n+Q4Y7BMcgNjF8CQ1qr9iUkE8bCcGgM6+dGyA
meq3yq/O5WsDsF70U/YCNT9rWmeej3gMgA35vmQoNX9j11KNfsQNAG+TsU/i
NgUK7tr0p7YMAKH9bq3SPwqkqd7s5JunzjkxJyHPJWp/0N9uieQchJGc6J+B
cxRwD/f+dvfyIASJy9mxUOvLVi8AT98ZhD9RNh0B1PozJD0usn5CnYNPz33+
PkiBo8mxWRfbByFqcg23tVNAzPZ5esXSIOwTHbF60kzth7imZn62IZBoqbou
3kCBe0bt9VHSQyD9sexqPbU/jMeGSr0chqDv8m11UjoFWqtHj3/2HgJvcS2F
IGq/ncugFM6EDcG6oPmfhucUULk1lXs9awgUn7CoUUIpwLe6knZpegjYx0QH
zW9R5wEbR6Sw8zBYXxOfm5ShgN70bnZT/2HItjry4KAoBeqbuYOfRg2DA/GV
sB4/Bb7E8T1g/28Yas70Pj9NnS8J+8Q8lueGgYHnkW/76C8wUjhpXn9nBH5E
6vruf/ILuo1uHnLxGAX7TyYPLMbGIGREw+Hpw1GQWoiVjOgeAxWyaEZJ3Chw
EicTs36MQeLdfmHmvFEwrjcmVBaOgcUzbZ7E2VF4WH8pWjtsDMbbFTa/Uefw
GGXiq6TcGCzpbNTzmvwCosV2dvidUditEW5bjsYBOzwjaFGGYVebTe4x4z8w
jKUkOen7QWS/Q0aQ1QzIPxzctp3ogLABoeTw2zNQf/vrbvmfHbCc2Pkszn8G
zl5uzmAp7YBa3tOPU1/NgIru9qOB2A5w4OK78a1nBlj1buXuQx1gTH89JkBy
FiIXdQcYXrRD6vJunYrkWXCSUuG5Z9QGSv2ODadi5kDd57pcKvX7nS3pQrRL
mIPGin2j0n9bQNTd3TwiZQ7q2I5slXe3wC4Ov4We3DkYltK2F/jUAr9RFL/r
zzmYE+rpCbZtgYS3uTfTuOdBfeYly5nmZti4ucLG9nQe5Ef3KV4wa4LyNf8L
bS8WgFVMOE5aoQHaeF2Wnd4swAAba0MtsQEoStZJbJkLUPmxoNd3tR7YPc4s
qn1ZAJnV45ZHSuvBcIEl8b+uBZAtpKmqP1cPk39i/kQQF4HEtv9PmF0dcPe/
DdGKXIRm0R31/Pk1YIdra0sDlqDuQ5NKanwV/FPeJawYsgQ2JW+WIv2qICTv
yr2M6CXY/vo3ItKuCjIzKAefJC2B850CyUaVKpiOZYi1L12C+Msiz9FQJbja
IVPutSXYwb8lsClbCf67C+fsby9D0WUdcZde6n9h2Pa5Qc9lqFOh5A5Wl0MK
k8Zbff9lWHQY8rXILYfK9XZDiFwG+eSpNy+Cy4GJslDMnbUM7m6tn5eVyiHs
y6GHeGIZUooM4hRflMFz63Q+osUK8N6SzJjoKQWH83sqZOxWQCng+BHNT6Wg
qhBsr+68Aq0tcqdaQkthhO5m4R3/FfghbWVgfrIUZFJkDVuTVoDWLKDrRspX
KB36HB05vALepekfd7iWwKhpFYHVehWsLyrk1Cl+gfwzRz4K3VwFBxxxkI/z
Czw+mHZF+c4qcPAqCEXNFIHM5qM0uwfU50/j33/eF4F74nn1mjer4NtyM8xc
pAgIva1+gWOrIL3oksrPXwgHrw4vb9n8gys+aRo7D+RDIidshTr+gzLJPsYO
Qj6wNiYy8rr9A27+Dqbiqc8wceoqt0LgP6hp/+7Ul/cZ3ko3yd1I+QcF7WeP
eZ39DHzbJQ5NA/8ATYxEsDvlAVPas5HXV9Yg61q7PaUtF9wsln/LmK/Blv4L
JFGSC2N8+nNFtmtg+eKtbeCbXCiP5KBpc1uDpheXzoS65IL33Yd7CU/WwOXg
zZbm3bkwf8H1qnPzGoRJ6rqIG/wHAwvaP5DWOuQWneht6suBCP5OEWfddbBk
JvvOZeWA6mmzu6+vrcMTzWzPc3458DrGQXTLfh0KlKYSkoVzwEIu2Ks4ZB0y
zS2KBm5mw+itCrGj39fhnp/hrA0hCyZ+K/pJa2/Agxq3Wyfs3sOz3SVtRlc2
IDZ+VX0U3oOm8mmpEPMNsOuJ2fhCeg8Zj3XbJ5w2oCxsW2ujJgPI4rek06I2
gMHUka5cKgP+Xk/v3N+6AV7ido8l/qXD/CDvYR6DTbgqdvymaGEq7LdeUdxn
ugn0ESsgE58K2pQ2ZQmbTQg5YR9k6poKH6YiT6u4bUKtzfmi43KpYPuP8YpZ
3CbszPKQGfnwFno4533S2jdBjOfa79zMN1B+pr7hqOEW3K2madKoTobZ2vRm
MNsCb1YVNdmMZBC8ENSuabsFwrpIQDksGbz00KCR+xacbqRxKNZLBkXz/Hnf
+C0w6HTQvzWcBO88U3hrOrYgkkYrwIExCaIyvW5cubINDWzJonGNiWBMe+Z7
u9k27DV4qXj6dSKIXeGQ07fdBscV3XyJ24lQQvd2TcdtG1L/mh5+TkyEiWuN
4edit8Ei6dICi+ULAML+vJNN2xBNi/+s0SaAR64VTYwIDYIM04hU8lMw6a+R
1xWnQeHFdObdak9BjXDQZpc0DTLZCKFT5X8K7GYrdRHyNEj05dC/Z9/jIYUl
LDb0FA3iSz+iFCUXDz8sPosFmdOgX9f2LVxliAMxDsJFzxc0qF5IfJr+ewx8
mL2f9vg1DWLPOWvBnR4D8q3r28/e0KDrmf9OXAmIAYibyS3KpEFp9e06d5Rj
4Cp/5571Yhr06I5fxlZGNISIp4359NEgSRMVFrknUTAN6t4P9tKi4UT2kB2k
cHAVKm2PFaJFU61rlPmuMFijUzr09gAt+mrNG3XoRRgwV0uPVB2kRQcVBg9n
7Q+D/Re4NJlUaVHvOdl32YdCQe/qCFewGS36IZgRecc0GPKd/TMjXtMiXw4J
VaulIAgpns279oYWzeur8oxXBYE5k2WpaDotmi7Me5L1JAgIiadavmTToiux
hpZbikFgVEO3QvlKiwbsI3XSPQNha2+QGvTRokSp7H1dbA/gTENw98weOuQx
EEXfbO4PfDxrI18E6JBrAq837TF/mLYgTwXtp0PZ7I7bN3f6Q/zyuW1+CTr0
ZnxTo+OeH0wIsR/QPEaHRgRiK4jgC2GeEc5JBnSoeMeuArmee9B2IJZZN4YO
/d378O59cw/QEt+j5BhPh+gmG/YEET2gVOKlXXACHWpKrS/caHCHDOn0uvIU
OqTv+O7zGRV38JUrDpX/RIfGXs8Nygq4gcTJUQ7uNjrEYljcNbzoAt76Cns6
ifQoc2g1e9eUI8wZFGou8NKjpWh/z3UXR7C9cvIuhyA96gpGsh/WHEDXSKNH
Q4weye1tv2HM7gBiFsaJhUfpkdSxvTHtSmRovvlgf8IVepR9vgEsPtuC6IOf
EqbP6ZHv5wPMakct4GouvZztS3p0oZMgn59pDmHDCspOyfQoTX/2vcyUGSzB
E637GfSIJkCVOORsCtUb+uTUInr0iWzrpxBsBPbuHZl/u+lR94PsPRKL+pBt
3y3ry8eAzALOlW3qnIGRZyzHHgkyoC41hXpbPnUg1SpDlDADqrze8GH5lxr4
iyVop0gxoP7068l+DxDojho5V6swoLrKSzRNOcdg0aTvv53GDEjkgftJ3r0k
UNYZVHz9goF6VuB/N046jksmGP9avWZAUvI3Hg6PncCq92VSxd4woMf1xbIf
s1Wxeu5dYvZ7BsSXFzntKHAKX+LmXi4pYkAyIx6Df2PVsVWXZkFPJwOqejBF
XFQ+j8ecnZxe9TKgy1Xmf+kIF/ANlnhxq0EGxLszS/FF2wXsoDL69DeFASHB
Y+FO9pewe6KP5+oSA/pF9yftb5kODrXIVebhZkT2BceGMwsu453/uua6SYxo
2Iif4sClj6OitzNe8jMiiyh70fu39HF8xQW+AyKMSLs2pCFN2AAniY6vKcgz
It1fUXTbAYY4b4K/RFeHEfXGPF1MFr2G+52DVMPDGBExSOqb55wppikr25sS
xYgCr09qnQEzLMqxsZH/hBFll4TE2oSZYXKWS/FQIiNq+lVpkCpqjld/mysp
ZjEiG0rG8VdiFpjTWkW+t5ERMTGJq/wAS3w01233bAsjMlSxexpqaYmv0f43
y9DBiELvGxmsBVjipNfiObIDjKgZNPDfKkt8sI9bJmCayr/pVqZ0xgprGswc
kORgQmsyjmblx6zxzbdSjKpcTCiksTSyTt8aRyzYjOmRmNDmkB1XyG1r3B7d
l+K9jwlxOXcWH3lvja1+1O1rPsSEaDk4+E/vuY59NN7yeugwodh81ZKo8es4
V/najm/RTIhHwkPwk4EtFp0PSXwSx4Se+t0KlLK3xXHvS6SvP2dCL2smFW55
22JP/v3n6JOZUFeM9zPjFFusukl5eOojE2IIMA7s+GOLG8pcaUp/MKFEy31y
YW438Im7aZHhrUyouJTx4mTQDZwt1yVo2sGETJfmD/HG38AxKcdPbvRT+Rs6
zSY/38BXA+m8VP5S92+U9lgu3MBjGlEL+WzMKK/Nh2vIxg4b0lQEPORgRo3y
RB3yHTtcU7iw25CLus5/3q/O3w6/l7xyeImPGQVoV31mfmGHndkEHRWkmNHO
m0l3Qhrt8OaPTEqOJjNykKWpGJSyx7ce9bv5XWBGnw2Ox3QcscdDwMGorcOM
OsZHFNKQPa766CIyfYUZ6QmKdDcb2OOQGGULmRvMqHnMj9/I1x7zGNZ0vwti
Rrp1trxOtfb47Im3yCaYGfmZqGmONttjD+H76ULhzOhD4Gd0pNsed02ruCU8
YUY72unN7vy2xy8eZe8Ke8OMSn0kJ00JZPzdMdRDM50ZFSyYM1dzkPHGZbsB
hkxmhAMUHu0gkbHZfuEPPrnMqOhcrvvxA2S8vyhOw6mcGYV82/bbg8hY57VL
tvQ3ZuT8qEDw/lkyvh+kTZyoZUbVh+nf118g4xFdllGLZmZULr94lvYaGadO
evvqDTKj2KqJFlpnMu5ovvZr5ygzOnA6aKeHGxkzFRy90EBhRv0XeD/98CJj
uwezvOrTzOiIbtLfA0FkLCVw/fORTWbU9/So7N1nZGxEd0pgnoaAihwlcple
knHoxN4H2QwE9PCaEZtnMhlP5XXqiLMT0Ohe9lmm92Scc/H81B5+AmrJzr7a
U0TGQwoSl9sFCWhEVcIs9CsZ7+Jj/BItTEDW9IHPhMrJ2IVS+ohVioAGHpde
2aohY0U/eZENJQJyR83pPm1kbGPDEVJ4goBO3DHfNOkk4/jzU7OuiIACJk72
CPeQ8QoprfSvBgHJXD/fZDVIxhJbAQfenyeg/roPyv3DZHx1zDzMVpuAXBIr
mlTHyPjLR16jQUMCcv1zRqhwgown45fLXhhR9WdePtg8Scb8Pj/Fr5oRkGeD
IVPzFBl7a4UvNdsQUOldk9JHs2ScdYhsEm5PQDRtd6ZgnowHiBqVWo4ExB7+
PmhogYxhhCa6wpWAXvg9iutdpsbrNy/Y7ElA30S38vVWqfniH/vQ701AQ0XM
rdn/yPhTYbvKH38CGiY8Is2ukXGgQU3taiABJS0JFPJskLHhfKEhUzABidVL
jAlvkrF45PsxrnAC+h1Q28C9Rcar0okuQtEEdI+v+9UUFdfXhtMciiMg2fbl
sPfbZJxo4xdx4jkBHQjz+XaJ5iZ2pLstcO4lARmuPvbopmLV11bvryQTEN/m
Yss52pt41wl9JZtUAiLPm9K/oeKRrjPVLhkExDWzX2WEij+5HdP3z6LycZq8
JdDdxIGckiPh/xHQm+/TTjxUbJjD5/ziMwHdkvKqZ6NiiQvsW++KCAj4LYcn
qPv/TWyG5n8lIKbi2uEsKq4PmuGtKiegawnPVo2oOFF4OL3lGwFpMt3Tm/2/
Xtx6ZLCOgDa1+/lv/V+vSVXlVCMBneGe9W+jxrfr32fdtRYCuh+QniVCxcNx
6YPMHQQU+qa40ZjqR678c0diDwEJJb1j96H6F9gUsi48QEDHmHPiHlH9NXDw
Dj48Qs0/V1vsvXUyFmO5RVKlEBDdwrDcNWo+VlPNU89PEtBzgl3Cfmq+6tR0
Fa5NE9CCYvFKywoZO3grarsuE9Ap039KC4tkrMor1n9/jYDE5246W1PrgSOf
dDNyi4DY9ItPl85R9cysPXzPxILc+h9bKU6T8YOwKe5CVhYkKf5tW5tab/qS
AynfdrIgcXbjPkNqPa5YlZcO8bCgnSlvF8UoZFy7nXthmo8FiVgZ+M+OknFC
4tuedUEW1G1u9CeVWu8nOh4t84izIOnT6xttfWQcoHVJ9uIxFnT61YCuZiuV
nwIlRsdZkGHBmoBbExkfeCB3zg5YUNh9/s2I71T+Em7bBxosyMFWMzakmox3
Hu59WXSFqtezRzqV2s/Peex2iHmyoPJQGcLjRDIuFNA5P32PBQVfD77QS50X
XcJKwfl+LCiP5d7O/XFkvOcQgVHjEQtqDb91zzec2r8a7zZuxLOgw+8K6WN8
yPiJ58SfjDwWxKnAni5tTMZ5vs2SLoUsaOqMfcobQzL+GVh4Q6WEBXUd3f99
px4Zc0Y/Hq2vZEEBjjO7sSYZR2dI9P5pZUGk4Sb5kCNkHNFjV39wjgXtj/5e
MMROxtlDOoTlRRZULTDk+JSZjBspSmdLV1nQmIvKkBodGbMvECou0bCiHWb5
Vz1X7HEoW0aREwcrosTaSlkM2+PHJ36/++8gKxoQ8HM79skeB7yyf3SEzIp2
Vxv4vta2x2rGtlOXbrGiwqfKHOGa9ph+j7WunQsrctJpfel8yh4HRpvwv/Bi
Ra18Fbx8Cvb4YaB2Dk0oK3oWGnv+H9EeB5OPdDZksqL7Uo2cW912OOoorbjV
X1ZUUq8V8s3YDr/88aw6wpkNNW8uNW+eu4F9bsXO7nVhR/lxtp2xdDb4j6XE
nmtWO5BPokmrZKMVDt2cZBiw3YkURsQaFVwt8JcpjZmdRhyoTmnzeWqVCe44
oDSiIroLMYd5XldkvIbtJK0PxabuQm/cfWKuXjXA5YbG904J7kaZ3A5fXM7r
YYWrkxncybvRJGfAK/naS9jhwdnOk/ycKEX8SFoc5zn82JawRhvLifw9wmnn
d5/FX/dabk9yc6FaC+ED5tfUcNHWQ3qpCC60NR2s2lWniiPmhGKPRVHXFU3M
IFcVW42VCJ+J4ULBTYPz+QmqmLV+/pRFPBcaeaSm33lTFZvEmfnHv+JCoSOb
s707VfGW9NFNuhwudKPisvnUlZNY/dqv5d4mLtRt3Ez4vXQc//h0ejJ8Nzd6
eGflr565Mg44mfcrmosblU3t6pg8r4yP1ogOxxG5EZd4DzlKSRm/6mHsesnL
jdLuJ99l4FTGjrS137KEuJGMSOHZyG9KmF37QnKjHDfqo3T7ShxSwucm9a/u
0ONGR2JessqxH8Pf9ttWh8Vwo+hn6XIjfxTx/sEW3ltPuNF/TCT9r32K2Ovl
SUfteG60cN89I6VRER/mI3JzJnCjKp1/baE5ijiRq8ryaTI3Ei8+86jzjiJ2
ZRLeTP7Ijeg76EW0txSw6FS/QsEPbvS6/jV7PJ8CDiwwSB5mJaLlRqXsU05y
+HDL+cd/2InI69nPUDtLOdw7ecppaScR/ZSKLnp+WQ7LC8qeZOEiooOX2Cf5
lOTwYCBT92F+IiJ4TQ0+pZXDKnoFu/ylicjzkpC8e/xhPDu1x1/wAhH1/jrh
LR15CJsI95kZhxPRRozH46lQGZzt3PhSLZKIKgJCtfzdZTAtLu2TjCaihiRn
JRFLGZxmnGy0+oSIMm0/eMYflcGzT2wN4xKJqDHvn4vciDQOZJ672JRJRDzS
e4YOn5DGH6YYT56uJyImk6OHuNYl8Xr+IX5pZh7kIl/8zCpFHMsmLn8jsPAg
B1qmI61R4tji/ldnCisPGpv5cuSSnziuOn++OnknDzr1RUv9pok4Dhuyvb2H
hwelFanmK5HEsQDrqxrGAzyIbXp9kzdSDJ8wZXcdUuNBK308gfjRAexN//t7
nC8P+kfJfDOTIIK3TquwJfrzIDcGctJGiAi+HxiqlRLAg+iy/TeJ90TwQ0bZ
6uyHPGj7p8BnR2MRHMl8B9dE8KDD1WzCHwVEcArb5n//XvEgDc0y9bvJwriO
a/dTU0x9fxfZZOiTEOYRVbY8QENC/uec8iwX92H0PGiFQEdCdz+rjlJ692H7
na3hU/QkFFTpzOJbuQ+XrJK/fGImId2cTNaRmH3YqjGRS42DhNrdfj/2k9+H
s91pqs0ESajg041mRjdBfLauRurZCRJ6GLP29w/TXuxxy3CR9S51/+8dIs+N
+bDA0eu1YvdIqHFeoG5EnQ+Xbd5OVPMhIQ1nNQSyfJg1PFzd6z4JEVwEbhym
5cOvMque/A6m8mtabM2l8+LqCfkjtQkkNPrINufX6h7Mbc3hHlRCQsfPiuyS
eUfCRVJ7zyWXktDZjDHJvFgSNpuXEvxaRkKXJy31LvqR8Lv7Z6sXq0iI2bDn
ea4hCR9P8uG53khCK+1jYRpMJGzV/ydfbYCEnjcX3om048HMqf9CzIZI6LDi
p1PCBjz4gwOzudcICfUxjJ7/dooHL68LM+dSSNTzdsjwcX4eHMJndEVohoSG
p2M+/P5BxIdGbkifnCOhtQMxyxvFRNyW4bZ9dYGE5IsYSfsziFhQOTo9aoWE
eDNJGXEPiLiS5vW9D/9IKDP5E+2EMxHb1X7Qrl0nIWFevKVlRsTsUV9ExjZJ
aN/9ptji80T835Xale1tqt8XH+SdUCbi/wGX/ZPC
        "]]}},
     AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
     Axes->True,
     AxesOrigin->{0, 0},
     DisplayFunction:>$DisplayFunction,
     FormatType->TraditionalForm,
     PlotRange->{{0, 6}, {-3.489071368419425, 0.7216376533240099}},
     PlotRangeClipping->True,
     PlotRangePadding->{
       Scaled[0.02], 
       Scaled[0.02]}], {-1, -0.6180339887498948}, {
    Left, Bottom}, {2, 1.2360679774997896`}], GraphicsGroupBox[{
     {GrayLevel[0], 
      RectangleBox[{1.05, -0.45}, {1.425418994413408, 0.3499999999999999}]}, 
     {GrayLevel[1], EdgeForm[{GrayLevel[0], Thickness[0.001]}], 
      GraphicsGroupBox[{
        RectangleBox[{1, -0.4}, {1.3754189944134079`, 0.3999999999999999}], 
        InsetBox[
         GraphicsBox[{{{InsetBox[
              GraphicsBox[
               {RGBColor[0, 0, 1], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 0.08}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 2\"\>", {1.2100000000000002`, 0.58}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {RGBColor[1, 1, 0], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 1.24}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 1\"\>", {1.2100000000000002`, 1.74}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.37820393249936846`, 0.6, 0.6], Dashing[{0., Small}], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 2.4}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.5\"\>", {1.2100000000000002`, 2.9}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.1421359549995791, 0.6, 0.6], Thickness[Tiny], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 3.56}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.3\"\>", \
{1.2100000000000002`, 4.0600000000000005`}, {-1, 0}, Automatic, {1, 0}]}, {
             InsetBox[
              GraphicsBox[
               {Hue[0.9060679774997897, 0.6, 0.6], Thickness[Large], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 4.72}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.1\"\>", {1.2100000000000002`, 5.22}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.67, 0.6, 0.6], Dashing[{Small, Small}], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 5.88}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.05\"\>", {1.2100000000000002`, 6.38}, \
{-1, 0}, Automatic, {1, 0}]}}, {}},
          AspectRatio->2.1309523809523805`,
          FormatType->TraditionalForm,
          PlotRange->{{-0.1, 3.26}, {-0.1, 7.059999999999999}}], {1, -0.4}, {
         Left, Bottom}, {0.37541899441340787`, 0.7999999999999999}]}]}}]},
  AspectRatio->Automatic,
  Background->None,
  ColorOutput->Automatic,
  ImageSize->{631., Automatic},
  PlotRange->All]], "Output",
 CellChangeTimes->{
  3.54623313329417*^9, {3.54623316422757*^9, 3.546233175420794*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.546137165687608*^9, 3.546137166387722*^9}}],

Cell[" ", "Text",
 Editable->False,
 Selectable->False,
 CellFrame->{{0, 0}, {0, 3}},
 ShowCellBracket->False,
 CellMargins->{{0, 0}, {1, 1}},
 CellElementSpacings->{"CellMinHeight"->1},
 CellFrameMargins->0,
 CellFrameColor->RGBColor[0, 0, 1],
 CellSize->{Inherited, 5}],

Cell[BoxData[
 RowBox[{"Weibull", ":"}]], "Input",
 CellChangeTimes->{{3.543684992882703*^9, 3.543684994655665*^9}, {
  3.544320894879453*^9, 3.544320906231942*^9}, {3.544321013728986*^9, 
  3.544321015677552*^9}, {3.546149536487394*^9, 3.546149537999375*^9}},
 EmphasizeSyntaxErrors->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"ClearAll", "[", 
   RowBox[{"\[Alpha]", ",", "\[Sigma]", ",", "\[Mu]", ",", "x"}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.54613653746201*^9, 3.546136542655197*^9}, {
  3.546136596080742*^9, 3.546136617338891*^9}, {3.546139146090529*^9, 
  3.546139146249962*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p", " ", "=", " ", 
  RowBox[{
   FractionBox["k", "\[Lambda]"], 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
    RowBox[{"k", "-", "1"}]]}]}]], "Input",
 CellChangeTimes->{{3.543684783475436*^9, 3.543684946824956*^9}, 
   3.543685129663494*^9, {3.544295734613175*^9, 3.54429574288267*^9}, {
   3.54429580082901*^9, 3.54429582329368*^9}, {3.544320780873962*^9, 
   3.544320785346142*^9}, 3.544320837287442*^9, {3.544320881922005*^9, 
   3.54432088239278*^9}, {3.54432100764836*^9, 3.544321019573801*^9}, 
   3.546149541553032*^9}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", "k", 
   " ", 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
    RowBox[{
     RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"]], "Output",
 CellChangeTimes->{
  3.544320837880473*^9, {3.544320883580563*^9, 3.544320911227469*^9}, 
   3.545309803843712*^9, 3.546016483142384*^9, 3.546017657044242*^9, 
   3.546060076762132*^9, 3.546060141670154*^9, 3.546060377463162*^9, 
   3.546061431182232*^9, 3.54606188717779*^9, 3.546071462150901*^9, 
   3.546136812639187*^9, 3.546138975120109*^9, 3.546148046460689*^9, 
   3.546149544392845*^9, 3.546151403683482*^9, {3.54623018096315*^9, 
   3.546230186401331*^9}, 3.546233513423806*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Theta]", " ", "=", " ", "\[Lambda]"}], ";"}]], "Input",
 CellChangeTimes->{{3.546137329720142*^9, 3.546137340576589*^9}, {
  3.546149548558869*^9, 3.546149554463107*^9}, {3.546233499084344*^9, 
  3.546233500287852*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"ss", " ", "=", " ", 
   RowBox[{"FullSimplify", "[", 
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{"Log", "[", "p", "]"}], ",", "\[Theta]"}], "]"}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.543684996758039*^9, 3.543685116992625*^9}, {
   3.543685161495624*^9, 3.543685164824434*^9}, {3.543685617602922*^9, 
   3.543685622261405*^9}, {3.544295746546906*^9, 3.544295827428027*^9}, {
   3.544295874222879*^9, 3.544295884036298*^9}, 3.546016486016091*^9, {
   3.54601942039296*^9, 3.546019421197285*^9}, {3.546137342783463*^9, 
   3.54613734607702*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"k", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], ")"}]}], 
  "\[Lambda]"]], "Output",
 CellChangeTimes->{
  3.544295884678365*^9, 3.545309805435313*^9, 3.546016487855942*^9, 
   3.546017670089106*^9, 3.546019421888676*^9, 3.546059377336055*^9, 
   3.546060078214513*^9, {3.546060139149627*^9, 3.546060144271088*^9}, 
   3.546060382291988*^9, 3.546061435830015*^9, 3.546061887191896*^9, 
   3.546071462301595*^9, 3.546136812733527*^9, {3.546137347255125*^9, 
   3.546137353812429*^9}, 3.54613897527059*^9, 3.546148046689522*^9, 
   3.546149558534132*^9, 3.546232064476071*^9, {3.546233504193507*^9, 
   3.546233516686043*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ss", "'"}], " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"D", "[", 
    RowBox[{"ss", ",", "\[Theta]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.543685180126496*^9, 3.543685298634426*^9}, {
   3.543685431540192*^9, 3.543685489527895*^9}, 3.543685534481716*^9, {
   3.543685624867701*^9, 3.543685665571384*^9}, {3.543688058809387*^9, 
   3.543688137132826*^9}, {3.54368832453227*^9, 3.543688330973921*^9}, {
   3.544295753339424*^9, 3.544295760783175*^9}, {3.544295853271568*^9, 
   3.544295889194162*^9}, {3.546016489095013*^9, 3.54601649563242*^9}, {
   3.546019427600456*^9, 3.546019428430676*^9}, {3.54613735651055*^9, 
   3.546137357241563*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"k", "-", 
   RowBox[{"k", " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", "k"}], ")"}], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      FractionBox[
       RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]}], 
  SuperscriptBox["\[Lambda]", "2"]]], "Output",
 CellChangeTimes->{{3.543685658802668*^9, 3.54368566906248*^9}, {
   3.54368807593941*^9, 3.543688142568622*^9}, 3.543688332640362*^9, {
   3.54429586658533*^9, 3.544295890282246*^9}, 3.545309806594238*^9, {
   3.54601648969558*^9, 3.546016496189694*^9}, 3.546017677241552*^9, 
   3.546019429586647*^9, 3.546059378810901*^9, 3.546060079358672*^9, 
   3.546060145605671*^9, 3.546060384883913*^9, 3.546061436928236*^9, 
   3.546061887206539*^9, 3.546071462474284*^9, 3.546136812904919*^9, 
   3.546137359182575*^9, 3.546138975369357*^9, 3.546148046818373*^9, 
   3.546149560252101*^9, 3.54623206886184*^9, 3.546233518378738*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"p", "^", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}], "*", "ss"}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.546016522942259*^9, 3.546016539967992*^9}, {
   3.546017704408171*^9, 3.546017705125968*^9}, 3.546019441035926*^9, {
   3.546019471091529*^9, 3.546019479505023*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"k", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], ")"}], " ", 
   
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", 
         SuperscriptBox[
          RowBox[{"(", 
           FractionBox[
            RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", 
       "k", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         FractionBox[
          RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
    RowBox[{"1", "+", "\[Alpha]"}]]}], "\[Lambda]"]], "Output",
 CellChangeTimes->{
  3.546016544655516*^9, {3.546017682666078*^9, 3.546017707524088*^9}, 
   3.546019442560441*^9, 3.546019480115117*^9, 3.546060081264836*^9, 
   3.546060146559043*^9, 3.546060400916709*^9, 3.546061439971061*^9, 
   3.546061887221677*^9, 3.546071464395533*^9, 3.546136814598201*^9, 
   3.546137368746807*^9, 3.546138977048079*^9, 3.54614804861861*^9, 
   3.546149564604638*^9, 3.546149648173352*^9, 3.546232072442872*^9, 
   3.546233524049641*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"csIntCitatel1", "/.", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], "\[Rule]", " ", 
     RowBox[{"y", "*", "\[Lambda]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016644463204*^9, 3.546016698494855*^9}, {
  3.546017718072268*^9, 3.546017718824221*^9}, {3.546019484592136*^9, 
  3.546019489873669*^9}, {3.5460588628943*^9, 3.546058863025369*^9}, {
  3.546058985559764*^9, 3.54605898695691*^9}, {3.546149570336845*^9, 
  3.546149571255931*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"k", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     SuperscriptBox["y", "k"]}], ")"}], " ", 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", 
         SuperscriptBox["y", "k"]}]], " ", "k", " ", 
       SuperscriptBox["y", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
    RowBox[{"1", "+", "\[Alpha]"}]]}], "\[Lambda]"]], "Output",
 CellChangeTimes->{
  3.546016699867985*^9, {3.54601771087677*^9, 3.546017720075646*^9}, 
   3.546019451857504*^9, 3.54601949082593*^9, 3.546058865086693*^9, 
   3.546058991110302*^9, 3.546059305292639*^9, {3.546060081368136*^9, 
   3.546060082414614*^9}, 3.546060147815039*^9, 3.546060407046361*^9, 
   3.546061531311124*^9, 3.546061887295093*^9, 3.546071465443946*^9, 
   3.546136815322759*^9, 3.546137371159345*^9, 3.546138977799651*^9, 
   3.546148049399068*^9, 3.546149656219562*^9, 3.546232076199355*^9, 
   3.54623352857147*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel3", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"csIntCitatel2", "*", "\[Lambda]"}], "/.", 
    RowBox[{"y", "\[Rule]", " ", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{"1", "/", "k"}], ")"}]}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232088390435*^9, 3.546232095185625*^9}}],

Cell[BoxData[
 RowBox[{"k", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "1"}], "+", 
    SuperscriptBox[
     RowBox[{"(", 
      SuperscriptBox["t", 
       FractionBox["1", "k"]], ")"}], "k"]}], ")"}], " ", 
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", 
        SuperscriptBox[
         RowBox[{"(", 
          SuperscriptBox["t", 
           FractionBox["1", "k"]], ")"}], "k"]}]], " ", "k", " ", 
      SuperscriptBox[
       RowBox[{"(", 
        SuperscriptBox["t", 
         FractionBox["1", "k"]], ")"}], 
       RowBox[{
        RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
   RowBox[{"1", "+", "\[Alpha]"}]]}]], "Output",
 CellChangeTimes->{3.546232100824901*^9, 3.546233537073972*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel4", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"csIntCitatel3", "/", "k"}], "*", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "k"}], ")"}], "/", "k"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232112593013*^9, 3.546232125917882*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "1"}], "+", "t"}], ")"}], " ", 
  SuperscriptBox["t", 
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}], "k"]], " ", 
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", "t"}]], " ", "k"}], "\[Lambda]"], ")"}], 
   RowBox[{"1", "+", "\[Alpha]"}]]}]], "Output",
 CellChangeTimes->{3.546232131595805*^9, 3.546233543221349*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel5", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"Integrate", "[", 
    RowBox[{"csIntCitatel4", ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "\[Infinity]"}], "}"}]}], "]"}], "]"}], 
  " "}]], "Input",
 CellChangeTimes->{{3.546016758763041*^9, 3.546016792970542*^9}, {
  3.546017733204061*^9, 3.546017740186443*^9}, {3.546017914630278*^9, 
  3.546017915139312*^9}, {3.54601813955664*^9, 3.546018141998787*^9}, {
  3.546019493851544*^9, 3.546019499184226*^9}, {3.546058803868124*^9, 
  3.546058826478995*^9}, {3.546058870461028*^9, 3.546058872003744*^9}, {
  3.546059018757644*^9, 3.546059019951728*^9}, {3.546059209756854*^9, 
  3.546059224271504*^9}, {3.546060118428053*^9, 3.546060118951836*^9}, {
  3.546060429719045*^9, 3.546060435859049*^9}, {3.54606155661684*^9, 
  3.546061556750753*^9}, {3.54606187684573*^9, 3.546061879156262*^9}, {
  3.546149679351288*^9, 3.546149686924944*^9}, {3.546232153175871*^9, 
  3.54623216243717*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{"-", 
    FractionBox[
     RowBox[{"\[Alpha]", " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
       RowBox[{
        RowBox[{"-", "2"}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", 
           FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}]}]], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        FractionBox["k", "\[Lambda]"], ")"}], "\[Alpha]"], " ", 
      RowBox[{"Gamma", "[", 
       RowBox[{"1", "+", "\[Alpha]", "-", 
        FractionBox["\[Alpha]", "k"]}], "]"}]}], "\[Lambda]"]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.546016797608153*^9, 3.546017744115164*^9, {3.546017901155742*^9, 
   3.546017918255887*^9}, 3.54601814479272*^9, 3.5460194592406*^9, 
   3.546019501847466*^9, 3.546058816227488*^9, 3.546058858910903*^9, 
   3.546058988908802*^9, 3.546059027020108*^9, {3.546059207468971*^9, 
   3.546059213730049*^9}, 3.546059311153677*^9, 3.54606008545984*^9, {
   3.546060121584368*^9, 3.54606015090936*^9}, 3.546060482353594*^9, 
   3.546061561105924*^9, 3.546061888934606*^9, 3.546071469576597*^9, 
   3.546136819048198*^9, 3.546137375365945*^9, 3.546138981516168*^9, 
   3.546148053135883*^9, 3.546150578307016*^9, 3.5462322891228228`*^9, 
   3.546233568384461*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"p", "^", 
    RowBox[{"(", 
     RowBox[{"1", "+", "\[Alpha]"}], ")"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016812881654*^9, 3.546016818147665*^9}, {
  3.546016886250683*^9, 3.546016904857094*^9}, {3.546018151081055*^9, 
  3.546018151902321*^9}, {3.546019505441384*^9, 3.546019506907304*^9}, {
  3.546059876912032*^9, 3.546059883931349*^9}, {3.546060057180457*^9, 
  3.546060062381365*^9}}],

Cell[BoxData[
 SuperscriptBox[
  RowBox[{"(", 
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       SuperscriptBox[
        RowBox[{"(", 
         FractionBox[
          RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", "k",
      " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
  RowBox[{"1", "+", "\[Alpha]"}]]], "Output",
 CellChangeTimes->{
  3.546230203148988*^9, {3.546233577473427*^9, 3.54623358052292*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"csIntJmenovatel1", "/.", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], "\[Rule]", " ", 
     RowBox[{"y", "*", "\[Lambda]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016918820028*^9, 3.546016933459735*^9}, {
  3.546018162034847*^9, 3.546018162802109*^9}, {3.546019511970786*^9, 
  3.546019518337126*^9}, {3.546059893179542*^9, 3.546059893847781*^9}, {
  3.546060047266137*^9, 3.546060052681203*^9}, {3.546230217034243*^9, 
  3.546230217998498*^9}}],

Cell[BoxData[
 SuperscriptBox[
  RowBox[{"(", 
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       SuperscriptBox["y", "k"]}]], " ", "k", " ", 
     SuperscriptBox["y", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
  RowBox[{"1", "+", "\[Alpha]"}]]], "Output",
 CellChangeTimes->{{3.546230207442299*^9, 3.546230219675734*^9}, 
   3.546233583258629*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel3", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"csIntJmenovatel2", "*", "\[Lambda]"}], "/.", 
    RowBox[{"y", "\[Rule]", " ", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{"1", "/", "k"}], ")"}]}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.54623072884787*^9, 3.546230785760333*^9}, {
  3.546231604373572*^9, 3.546231605426678*^9}, {3.546231716620151*^9, 
  3.546231717085787*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", 
        SuperscriptBox[
         RowBox[{"(", 
          SuperscriptBox["t", 
           FractionBox["1", "k"]], ")"}], "k"]}]], " ", "k", " ", 
      SuperscriptBox[
       RowBox[{"(", 
        SuperscriptBox["t", 
         FractionBox["1", "k"]], ")"}], 
       RowBox[{
        RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
   RowBox[{"1", "+", "\[Alpha]"}]], " ", "\[Lambda]"}]], "Output",
 CellChangeTimes->{{3.546230757338739*^9, 3.546230786864854*^9}, 
   3.54623122497391*^9, 3.546231390679448*^9, 3.546231620590633*^9, 
   3.546231718726483*^9, 3.546231912776218*^9, 3.546233587684638*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel4", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"csIntJmenovatel3", "/", "k"}], "*", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "k"}], ")"}], "/", "k"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546231135452288*^9, 3.546231187522384*^9}, 
   3.546231380041735*^9, {3.546231608893195*^9, 3.546231609558657*^9}, {
   3.546231727310628*^9, 3.546231732399831*^9}, {3.546231878599405*^9, 
   3.546231893664122*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"-", "t"}]], " ", 
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", "t"}]], " ", "k", " ", 
      SuperscriptBox["t", 
       FractionBox[
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}], "k"]]}], "\[Lambda]"], ")"}], 
   "\[Alpha]"]}]], "Output",
 CellChangeTimes->{
  3.5462311903916*^9, 3.54623123012743*^9, 3.546231393222635*^9, 
   3.546231736337671*^9, {3.546231899759423*^9, 3.546231920689016*^9}, 
   3.546233592071807*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel5", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"Integrate", "[", 
    RowBox[{"csIntJmenovatel4", ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "\[Infinity]"}], "}"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.546017079018856*^9, 3.546017090969569*^9}, {
  3.546018190056803*^9, 3.546018190821094*^9}, {3.546059043677427*^9, 
  3.54605904460088*^9}, {3.546059403368323*^9, 3.546059411524818*^9}, {
  3.546059479614725*^9, 3.546059492483282*^9}, {3.546059617399394*^9, 
  3.546059617680817*^9}, {3.546059915271946*^9, 3.546059916341114*^9}, {
  3.546060024912348*^9, 3.546060025553251*^9}, {3.546061569414866*^9, 
  3.546061603372963*^9}, {3.54606187218996*^9, 3.546061873288195*^9}, {
  3.546230234851797*^9, 3.546230235704077*^9}, {3.54623031496448*^9, 
  3.546230316811469*^9}, {3.546230894174747*^9, 3.54623093187054*^9}, {
  3.546231021434708*^9, 3.546231058033388*^9}, {3.546231204938011*^9, 
  3.546231254795637*^9}, {3.54623130518147*^9, 3.546231317577529*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}]}]], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      FractionBox["k", "\[Lambda]"], ")"}], "\[Alpha]"], " ", 
    RowBox[{"Gamma", "[", 
     RowBox[{"1", "+", "\[Alpha]", "-", 
      FractionBox["\[Alpha]", "k"]}], "]"}]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.546230539424707*^9, 3.546230928296439*^9, 3.546231130736478*^9, 
   3.546231217042055*^9, {3.546231310240832*^9, 3.546231332557165*^9}, 
   3.546231408953687*^9, 3.546231758805175*^9, 3.546231931318572*^9, 
   3.546233612404448*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cs", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"csIntCitatel5", "/", "csIntJmenovatel5"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546017159619789*^9, 3.546017171553549*^9}, {
   3.546018198699244*^9, 3.54601820322215*^9}, 3.546061584597621*^9, {
   3.546061615263666*^9, 3.546061627686996*^9}, {3.546232301287677*^9, 
   3.546232306940481*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{"-", 
    FractionBox["\[Alpha]", 
     RowBox[{"\[Lambda]", "+", 
      RowBox[{"\[Alpha]", " ", "\[Lambda]"}]}]]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232321705469*^9, 3.546233615617531*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"cs", "'"}], " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"D", "[", 
    RowBox[{"cs", ",", "\[Theta]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546017177523059*^9, 3.546017189050696*^9}, {
  3.546018219369372*^9, 3.546018251272656*^9}, {3.546137392518803*^9, 
  3.546137393253288*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox["\[Alpha]", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
     SuperscriptBox["\[Lambda]", "2"]}]], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232329374177*^9, 3.546233619140492*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia", " ", "=", 
  RowBox[{"FullSimplify", "[", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"ss", "'"}], " ", "-", " ", 
      RowBox[{"cs", "'"}], "-", 
      RowBox[{"\[Alpha]", 
       RowBox[{"(", 
        RowBox[{"ss", "-", "cs"}], ")"}], 
       RowBox[{"(", 
        RowBox[{"cs", "-", "ss"}], ")"}]}]}], ")"}], "*", 
    RowBox[{"p", "^", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016927559429*^9, 3.546016927697169*^9}, {
   3.546017069821145*^9, 3.546017085073989*^9}, 3.546017230368702*^9, {
   3.546017453638702*^9, 3.546017454633499*^9}, {3.546017487540381*^9, 
   3.546017511750122*^9}, 3.546060275246113*^9, {3.546060594894228*^9, 
   3.546060607304117*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k", "+", 
       FractionBox["1", 
        RowBox[{"1", "+", "\[Alpha]"}]], "+", 
       FractionBox[
        RowBox[{"\[Alpha]", " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"\[Alpha]", "+", 
            RowBox[{"k", " ", 
             RowBox[{"(", 
              RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "1"}], "+", 
               SuperscriptBox[
                RowBox[{"(", 
                 FractionBox[
                  RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], 
              ")"}]}]}], ")"}], "2"]}], 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"]], "-", 
       RowBox[{"k", " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "k"}], ")"}], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          FractionBox[
           RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]}], ")"}], 
     " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           SuperscriptBox[
            RowBox[{"(", 
             FractionBox[
              RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", 
         "k", " ", 
         SuperscriptBox[
          RowBox[{"(", 
           FractionBox[
            RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
      RowBox[{"1", "+", "\[Alpha]"}]]}], 
    SuperscriptBox["\[Lambda]", "2"]], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232363544007*^9, 3.546233625680107*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"Ia", "/.", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], "\[Rule]", 
     RowBox[{"y", "*", "\[Lambda]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016832069324*^9, 3.54601683491256*^9}, {
  3.546016912126374*^9, 3.546016916727737*^9}, {3.546017322178493*^9, 
  3.546017372508301*^9}, {3.546017463020216*^9, 3.54601752428375*^9}, {
  3.546232394685446*^9, 3.546232395694052*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k", "-", 
       RowBox[{"k", " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "k"}], ")"}], " ", 
        SuperscriptBox["y", "k"]}], "+", 
       FractionBox["1", 
        RowBox[{"1", "+", "\[Alpha]"}]], "+", 
       FractionBox[
        RowBox[{"\[Alpha]", " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"\[Alpha]", "+", 
            RowBox[{"k", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "1"}], "+", 
               SuperscriptBox["y", "k"]}], ")"}], " ", 
             RowBox[{"(", 
              RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]}], ")"}], "2"]}], 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"]]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           SuperscriptBox["y", "k"]}]], " ", "k", " ", 
         SuperscriptBox["y", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
      RowBox[{"1", "+", "\[Alpha]"}]]}], 
    SuperscriptBox["\[Lambda]", "2"]], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{{3.546232392215838*^9, 3.546232413442848*^9}, 
   3.546233631780497*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"Ia1", "*", "\[Lambda]"}], "/.", 
    RowBox[{"y", "\[Rule]", " ", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{"1", "/", "k"}], ")"}]}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232427015182*^9, 3.546232435156028*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k", "-", 
       RowBox[{"k", " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "k"}], ")"}], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          SuperscriptBox["t", 
           FractionBox["1", "k"]], ")"}], "k"]}], "+", 
       FractionBox["1", 
        RowBox[{"1", "+", "\[Alpha]"}]], "+", 
       FractionBox[
        RowBox[{"\[Alpha]", " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"\[Alpha]", "+", 
            RowBox[{"k", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "1"}], "+", 
               SuperscriptBox[
                RowBox[{"(", 
                 SuperscriptBox["t", 
                  FractionBox["1", "k"]], ")"}], "k"]}], ")"}], " ", 
             RowBox[{"(", 
              RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]}], ")"}], "2"]}], 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"]]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           SuperscriptBox[
            RowBox[{"(", 
             SuperscriptBox["t", 
              FractionBox["1", "k"]], ")"}], "k"]}]], " ", "k", " ", 
         SuperscriptBox[
          RowBox[{"(", 
           SuperscriptBox["t", 
            FractionBox["1", "k"]], ")"}], 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
      RowBox[{"1", "+", "\[Alpha]"}]]}], "\[Lambda]"], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232478566571*^9, 3.546233638036752*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia3", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Ia2", "/", "k"}], "*", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "k"}], ")"}], "/", "k"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.54623247327657*^9, 3.546232478732023*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"-", "t"}], " ", 
      RowBox[{"(", 
       RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", 
    SuperscriptBox["k", "\[Alpha]"], " ", 
    SuperscriptBox["t", 
     FractionBox[
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}], "k"]], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", "k", "-", 
      RowBox[{"k", " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", "k"}], ")"}], " ", "t"}], "+", 
      FractionBox["1", 
       RowBox[{"1", "+", "\[Alpha]"}]], "+", 
      FractionBox[
       RowBox[{"\[Alpha]", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"\[Alpha]", "+", 
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "t"}], ")"}], " ", 
            RowBox[{"(", 
             RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]}], ")"}], "2"]}], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"]]}], ")"}], " ", 
    SuperscriptBox["\[Lambda]", 
     RowBox[{
      RowBox[{"-", "2"}], "-", "\[Alpha]"}]]}], ",", 
   RowBox[{"\[Alpha]", "<", 
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232498458661*^9, 3.546233646492959*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia4", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"Integrate", "[", 
    RowBox[{"Ia3", ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "\[Infinity]"}], "}"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.546017553376211*^9, 3.546017578186591*^9}, {
  3.546060190028669*^9, 3.546060215541151*^9}, {3.546232494373554*^9, 
  3.546232519267088*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"-", 
     SuperscriptBox["k", 
      RowBox[{"2", "+", "\[Alpha]"}]]}], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
     RowBox[{
      RowBox[{"-", "3"}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}]}]], " ", 
    SuperscriptBox["\[Lambda]", 
     RowBox[{
      RowBox[{"-", "2"}], "-", "\[Alpha]"}]], " ", 
    RowBox[{"Gamma", "[", 
     RowBox[{"2", "+", "\[Alpha]", "-", 
      FractionBox["\[Alpha]", "k"]}], "]"}]}], ",", 
   RowBox[{
    RowBox[{"\[Alpha]", "<", 
     RowBox[{"k", "+", 
      RowBox[{"k", " ", "\[Alpha]"}]}]}], "&&", 
    RowBox[{"\[Alpha]", ">", 
     RowBox[{"-", "1"}]}], "&&", 
    RowBox[{"k", ">", "0"}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232723877207*^9, 3.546233680133625*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IF", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"-", 
     RowBox[{"Ia4", "^", 
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}]}]}], " ", "*", " ", 
    RowBox[{"(", 
     RowBox[{"p", "^", "\[Alpha]"}], ")"}], "*", 
    RowBox[{"(", 
     RowBox[{"ss", "-", "cs"}], ")"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546018347393014*^9, 3.546018403066614*^9}, {
   3.546018436099692*^9, 3.546018441274599*^9}, 3.546019614310392*^9, {
   3.546019656617135*^9, 3.546019704529838*^9}, {3.546057935083661*^9, 
   3.546057940051575*^9}, {3.546060690488888*^9, 3.546060692698881*^9}, {
   3.546136907926816*^9, 3.54613692580183*^9}, {3.546232739391533*^9, 
   3.546232740164084*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
      RowBox[{"2", "+", "\[Alpha]", "-", 
       FractionBox["\[Alpha]", "k"]}]], " ", 
     SuperscriptBox["\[Lambda]", 
      RowBox[{"1", "+", "\[Alpha]"}]], " ", 
     RowBox[{"(", 
      RowBox[{"\[Alpha]", "+", 
       RowBox[{"k", " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          SuperscriptBox[
           RowBox[{"(", 
            FractionBox[
             RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], 
         ")"}]}]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           SuperscriptBox[
            RowBox[{"(", 
             FractionBox[
              RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", 
         
         SuperscriptBox[
          RowBox[{"(", 
           FractionBox[
            RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
      "\[Alpha]"]}], 
    RowBox[{
     SuperscriptBox["k", "2"], " ", 
     RowBox[{"Gamma", "[", 
      RowBox[{"2", "+", "\[Alpha]", "-", 
       FractionBox["\[Alpha]", "k"]}], "]"}]}]], ",", 
   RowBox[{
    RowBox[{"\[Alpha]", "<", 
     RowBox[{"k", "+", 
      RowBox[{"k", " ", "\[Alpha]"}]}]}], "&&", 
    RowBox[{"\[Alpha]", ">", 
     RowBox[{"-", "1"}]}], "&&", 
    RowBox[{"k", ">", "0"}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232757750575*^9, 3.546233688982581*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IF1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"IF", "/.", 
    RowBox[{"\[Mu]", "->", "0"}]}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.546017428290329*^9, {3.546018467395976*^9, 3.546018491191415*^9}, {
   3.546018587031472*^9, 3.546018597806486*^9}, 3.546157241026402*^9}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
      RowBox[{"2", "+", "\[Alpha]", "-", 
       FractionBox["\[Alpha]", "k"]}]], " ", 
     RowBox[{"(", 
      RowBox[{"\[Alpha]", "+", 
       RowBox[{"k", " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          SuperscriptBox[
           RowBox[{"(", 
            FractionBox["x", "\[Lambda]"], ")"}], "k"]}], ")"}]}]}], ")"}], 
     " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           SuperscriptBox[
            RowBox[{"(", 
             FractionBox["x", "\[Lambda]"], ")"}], "k"]}]], " ", 
         SuperscriptBox[
          RowBox[{"(", 
           FractionBox["x", "\[Lambda]"], ")"}], "k"]}], "x"], ")"}], 
      "\[Alpha]"], " ", 
     SuperscriptBox["\[Lambda]", 
      RowBox[{"1", "+", "\[Alpha]"}]]}], 
    RowBox[{
     SuperscriptBox["k", "2"], " ", 
     RowBox[{"Gamma", "[", 
      RowBox[{"2", "+", "\[Alpha]", "-", 
       FractionBox["\[Alpha]", "k"]}], "]"}]}]], ",", 
   RowBox[{
    RowBox[{"\[Alpha]", "<", 
     RowBox[{"k", "+", 
      RowBox[{"k", " ", "\[Alpha]"}]}]}], "&&", 
    RowBox[{"\[Alpha]", ">", 
     RowBox[{"-", "1"}]}], "&&", 
    RowBox[{"k", ">", "0"}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232774650792*^9, 3.546233699094437*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IF2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"IF1", "/.", 
    RowBox[{"k", "\[Rule]", "1"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232789850054*^9, 3.546232814587751*^9}, {
   3.546232870367111*^9, 3.546232891695176*^9}, 3.546233703305696*^9}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"], " ", 
    RowBox[{"(", 
     RowBox[{"x", "+", 
      RowBox[{"x", " ", "\[Alpha]"}], "-", "\[Lambda]"}], ")"}], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      FractionBox[
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", 
         FractionBox["x", "\[Lambda]"]}]], "\[Lambda]"], ")"}], "\[Alpha]"], 
    " ", 
    SuperscriptBox["\[Lambda]", "\[Alpha]"]}], ",", 
   RowBox[{"\[Alpha]", ">", 
    RowBox[{"-", "1"}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546233010925664*^9, 3.546233716615459*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"IFun", " ", "=", " ", 
   RowBox[{"Function", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Lambda]", ",", "\[Alpha]"}], "}"}], " ", ",", 
     RowBox[{
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"], " ", 
      RowBox[{"(", 
       RowBox[{"x", "+", 
        RowBox[{"x", " ", "\[Alpha]"}], "-", "\[Lambda]"}], ")"}], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        FractionBox[
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           FractionBox["x", "\[Lambda]"]}]], "\[Lambda]"], ")"}], "\[Alpha]"],
       " ", 
      SuperscriptBox["\[Lambda]", "\[Alpha]"]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.54608073954952*^9, 3.546080787340927*^9}, {
   3.546080827508503*^9, 3.546080832763547*^9}, {3.546080881724667*^9, 
   3.54608089839569*^9}, {3.546136031913543*^9, 3.546136106756538*^9}, {
   3.546136264957334*^9, 3.546136269166274*^9}, {3.546136300237964*^9, 
   3.546136302873075*^9}, 3.546136404353272*^9, {3.546136877306471*^9, 
   3.546136878124014*^9}, {3.546136974390393*^9, 3.546136995325726*^9}, {
   3.546137115334749*^9, 3.546137121892679*^9}, {3.546233026432763*^9, 
   3.546233039064002*^9}, {3.546233731274747*^9, 3.546233735724144*^9}}],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<PlotLegends`\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.546078399638204*^9, 3.546078434270568*^9}, {
  3.546078523483738*^9, 3.546078526611331*^9}, {3.546078631725602*^9, 
  3.546078677869414*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"IFun", "[", 
      RowBox[{"1", ",", "0.05"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"1", ",", "0.1"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"1", ",", "0.3"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"1", ",", "0.5"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"1", ",", "1"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "6"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotLegend", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<\[Alpha] = 0.05\>\"", ",", "\"\<\[Alpha] = 0.1\>\"", ",", 
      "\"\<\[Alpha] = 0.3\>\"", ",", "\"\<\[Alpha] = 0.5\>\"", ",", 
      "\"\<\[Alpha] = 1\>\"", ",", "\"\<\[Alpha] = 2\>\""}], "}"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"LegendPosition", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"-", "0.4"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Dashed", ",", " ", "Thick", ",", "Thin", ",", " ", "Dotted", ",", " ", 
      "Yellow", ",", " ", "Blue"}], "}"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.546071566443362*^9, 3.546071604772914*^9}, {
   3.546071664304524*^9, 3.546071734557583*^9}, {3.546071769565434*^9, 
   3.546071781503191*^9}, {3.546077877666447*^9, 3.546077878779971*^9}, {
   3.546078077257591*^9, 3.546078094273397*^9}, {3.546078128979278*^9, 
   3.546078131508565*^9}, {3.546078195525481*^9, 3.546078246143438*^9}, {
   3.54607831567725*^9, 3.546078368785814*^9}, {3.546078441904356*^9, 
   3.546078501052553*^9}, 3.546078697301196*^9, {3.546078795298968*^9, 
   3.546078819926423*^9}, {3.546078851304196*^9, 3.54607891370029*^9}, {
   3.546079894604615*^9, 3.546079946211399*^9}, {3.546136122778719*^9, 
   3.546136164810206*^9}, 3.546136449027762*^9, 3.54623312566578*^9, {
   3.54623315837957*^9, 3.546233172933139*^9}}],

Cell[BoxData[
 GraphicsBox[{InsetBox[
    GraphicsBox[{{}, {}, 
      {Hue[0.67, 0.6, 0.6], Dashing[{Small, Small}], LineBox[CompressedData["
1:eJwVjn8803kcx4cxP8K+mX2rmZgsccVddUzH590vpDwmP2eV/JgfIeQhikik
Upts0iM5SvdQxF3RlSh9U2JdxXWcfohsqmt02AgjnPvj9Xj+83w+Hi/LsASf
CE0SieS1sP85tT2+1Dshy5VSHCLv/kVJnBCstOlgB6NhnKxx66KSeDH8IUbE
jkdb8vaeOStWEqO3Ngvj2JlIbGM/sO2oksimj5ntZuej6Iq2ssd8JfGszfOj
L7sMWQUVbHqGKYmEyylPuezfUPaAGcsua5RoFgrvebEfoPXl7e9494cJbZ0k
iiKmAyUUq8ClT0FsOxqaezvgFRI32Y40hXwk6g9H9Fa87EOpBOtal46MeMOP
tU9KHUDXZ3rOKBteE5i7KLIZ/kERbYEeRyz+JKhdEXWOu4YQb1/LW6sb9wgr
i7iq3LARFLvGWRKkcxk59e5/tlGiRGrvXDvT5BbUPJ21o6tkDK1keJiT9TpR
NCGVPsj+itrDHM04Nj2oOPzaMtOQScSs/J7tlCNDq3myibkINSLxRDRJ40fU
N8Zth20zyCmv9vzmUgVSvV/qQPefRdLu2DaD1n9RQXVaVGDgPPpbwQtXfRpF
bGNdr0MlJNBTScqtH6nQncSs6vxLGlDDPejLJMZRl3UhZadEE1Y7vl9mf24C
rcjptNlTrAVDgin32bwpxPF+v+5SCRlmDN/tWZ04jXoTc11FQm24GhPF0nT4
huo4QYZPxDqwtnr4HN94DtED2t5U5lIgZTz+JuvpPEJykvhRsi4wqk7EH2gk
QTE92pB9SA9SUqZ7Mhd+ZJftO7k+Rh/kvzc0pidpQmn7hdb8RANYPmby3M5P
CzLiC0eZSYvg/BWHVGINGYZCbZYEhRlC0U1fZ/UkGc7MDpL7Io3gdamH2L9D
Gxq/uI8Y8Y3h1PFu1e0iHei2dpI7r6BCgWfs0G1/CkSvCrcvrKCCQOMVm2ul
C80Bu9I3mmPg/jUj6Hy/LqzlDVbRyjHI7Hbt067Wg7gct1cujMXAcKu8mBGh
D6cidac1ChfD1qrmC1+WGkATM3R+kGYClnxZPqnHABrmTmjZ5puAfOCujBAu
gvZbmwdFGA1MkmQWdz0N4YlFZKtQQoPAEOF+iaYRHK/3L5fpmwKjM3NHY7UR
7Ga9C94lMgVO2XHPkhBjmLljz7Cj0OFzW9fVfC0qHNFSPC/KpIPpSP93ND8q
0FdwQq1JODyswUo516mQGh8wrn8YB8MlRybS1FQw+1EgZafjkNPNFLydpsLD
2QM/b8rAodNp3X3ONyroi0Rb0o7hMH34kd3UHBXKqlvOKfIW+oEM3WQyBq2f
f1gvvYiDT49jQ5QxBrRw45Tc+zg4Go3Nulpj0GDL9Cx/gAMmk98rYWMQrLI1
b3qIQ3lHuGBqJQaVx9xax1twuCs0O1hri8GGyxl0wQsc+oOzi1gOGIT1Dt3Z
1IeDpd6nv0gbMKBUqE8H9+NQRfFx3v0TBjVxlL1pchzEO/cI610wmJhhUeo+
4cD18R/dDxicXsYPtBzBwe/lQP2brRjYy6PsXJQ4KMbDkte5Y9BVdXCeN4bD
1UOnGGc9MDDniK8VTOLAt/1j1ZbtGDwmXUqvUeNgxfxcULYDg2hpDVc6g0Od
+oZ8yguDRQWNVh9mF/wrrOW+XAxqA6WT8/M4xKjB7VdvDP4DeYkoNQ==
        "]]}, 
      {Hue[0.9060679774997897, 0.6, 0.6], Thickness[Large], 
       LineBox[CompressedData["
1:eJwVkHk41HkcgGdcMyZfR8b8ypVqzNopUSnR5vsplk0HtRs5MmacuZOjHK3k
KBk5t6xmym6FkF2WHoofCdMWHrFR2wi1CeUakSy2/eN93n/f510rCD3sI0eh
UA584X9/2hcicgxNsEpNorcaucvIFO+vjDo5HvjZmsYU80Mysn38TYCQE4LD
43k2drYycrLKOj2Icwbnq6nVHDeVkYksma47JwOb19ucqFOQkY/b7P/5niPG
jdZF5hfLp8nQ61GPHDh3MLci4MLI8hTZlJ5+7wCnAdPmhcF5RZOkolI4bSSg
E4fwb9hdyR0j9/7IT6526sW7Wp/q5rq9Je+e9pHe7OrH7TLe+GXXQfK5a6BJ
ePRrXNFipivS6SM17IS+TTCMy4y7m9YOPyHVe3wqzd3GcNZ3/L2DM7+R6w2C
SpIFE9hS6wNHyq7BO6TBj3dnT2GGwVWqQ/8T3PQ5YX9PgQyzotudZvt6sT8p
kTQkfsR6+Tq3UrYN4HyvIm0tzzn8+aTjZT+HN9j46ODsks88vn5+i7bPrXe4
X+bQAXsX8BWxjVQ3/z2efrXalHVkEZd0GMafFkzizNIYP2fnZTxxmYh+4TmN
OWr0A6cKKOCfSDd7aDqDa8ISSjOuUUHb7/BWqs4s7jHMoR3KlgNa0mZBad8c
Zp/rNjqWLw+Fpv929N6ZxxaOr8yuFShAiLZ4vDN0AUvDkq2E6Ypg9UeHKIe2
iCstXFBLlhI0H5yNeVq9hFlObc+Lk2mwlVrYtV+fAniIkvUggg6qSV2nuvso
kM/yR5xTyqBRclC7WESFRPHx1G0BDGBv37kJHOVA1HGlNSNsBShvdyB5KvIQ
H5IzqReuAquUnDffJuVhjG+0ykWAwFM9woUrUICLi6MK/b6q4DMiGvoBKULd
e7sJVVc14MkNqEcUK8Izwx1Dlmx1MPazDfrmGyXw/9rLJOemOnjy5m1e9ypB
k5Nb7G59DTis+iG4zftL99HREmahBqR6ZHEHP9Eg6Jxt7y6dlWC69Jf78Bk6
nPelf6bmrASrwEt8zyU61Ovxl0eZmsDJ+zPFKUkZapdS5LkZmvALu0LXd1EZ
OqqsR4UaTIjc927MJY4BLQa+renZTGipi2x+NMOApLtHCgcZWpBBb7OI5K8A
93UvPdyEWsA8WZ3g1r0CFmpMdDbQWNBYeUdT01IF4uRHnuSdYYGl/bggvEAF
WGwLviGFgNUrU6vCqAiiQ5xmGKcJYL/8idh9DIHudm8JJ5YA+z1ej7s9EDQu
nri6J56Ak+v6sK8nAoZQaBNzloDK9K6ANC8E4tKHuSMXCOjLFT/qPI6g9d2W
bZKfCTCIjas4GIWA6aUWlXyfgHIvhrXeJQS1XD37wgYCmPt/ZRVnIvCY5urX
NxJQ1pJXuiUbQfFZ29aZhwSoRYhW2+Uh2Hk9nuXdTsDzv7uUggsQCKRjNXv6
CYiLEHPLixDQbs6neQwQoBfnzTIrQVAWROPFDBHAVXjZXHcbwezCOlrlWwLU
z330aitHkKbt6rx2goD6G4G10ioEJkN+G3ZNEUDTca4SVCPoKYlcPiojIHBo
TehwDQJ9i6yizDkCNn7L2zhZi6CZci22bJ6AF50DxhH3EPhLyhwkCwTYph2Z
mruPQCWzbv2bxS9/xx5ExTYg+N1ZMre8TECW/6aGJRLBf638IpQ=
        "]]}, 
      {Hue[0.14213595499957954`, 0.6, 0.6], Thickness[Tiny], 
       LineBox[CompressedData["
1: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
VphgfUou+pMTh/gf0+TxWQ==
        "]]}, 
      {Hue[0.37820393249936934`, 0.6, 0.6], Dashing[{0, Small}], 
       LineBox[CompressedData["
1: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
/A+50VDI
        "]]}, 
      {RGBColor[1, 1, 0], LineBox[CompressedData["
1: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
bOQd/gfy3E35
        "]]}, 
      {RGBColor[0, 0, 1], LineBox[CompressedData["
1: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
G/IvNq7/+0fGyuzjT7tatOH/AKzOsek=
        "]]}},
     AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
     Axes->True,
     AxesOrigin->{0, 0},
     DisplayFunction:>$DisplayFunction,
     FormatType->TraditionalForm,
     PlotRange->{{0, 6}, {-3.2117627720762387`, 4.328785989490237}},
     PlotRangeClipping->True,
     PlotRangePadding->{
       Scaled[0.02], 
       Scaled[0.02]}], {-1, -0.6180339887498948}, {
    Left, Bottom}, {2, 1.2360679774997896`}], GraphicsGroupBox[{
     {GrayLevel[0], 
      RectangleBox[{1.05, -0.45}, {1.425418994413408, 0.3499999999999999}]}, 
     {GrayLevel[1], EdgeForm[{GrayLevel[0], Thickness[0.001]}], 
      GraphicsGroupBox[{
        RectangleBox[{1, -0.4}, {1.3754189944134079`, 0.3999999999999999}], 
        InsetBox[
         GraphicsBox[{{{InsetBox[
              GraphicsBox[
               {RGBColor[0, 0, 1], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 0.08}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 2\"\>", {1.2100000000000002`, 0.58}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {RGBColor[1, 1, 0], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 1.24}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 1\"\>", {1.2100000000000002`, 1.74}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.37820393249936846`, 0.6, 0.6], Dashing[{0., Small}], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 2.4}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.5\"\>", {1.2100000000000002`, 2.9}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.1421359549995791, 0.6, 0.6], Thickness[Tiny], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 3.56}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.3\"\>", \
{1.2100000000000002`, 4.0600000000000005`}, {-1, 0}, Automatic, {1, 0}]}, {
             InsetBox[
              GraphicsBox[
               {Hue[0.9060679774997897, 0.6, 0.6], Thickness[Large], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 4.72}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.1\"\>", {1.2100000000000002`, 5.22}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.67, 0.6, 0.6], Dashing[{Small, Small}], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 5.88}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.05\"\>", {1.2100000000000002`, 6.38}, \
{-1, 0}, Automatic, {1, 0}]}}, {}},
          AspectRatio->2.1309523809523805`,
          FormatType->TraditionalForm,
          PlotRange->{{-0.1, 3.26}, {-0.1, 7.059999999999999}}], {1, -0.4}, {
         Left, Bottom}, {0.37541899441340787`, 0.7999999999999999}]}]}}]},
  AspectRatio->Automatic,
  Background->None,
  ColorOutput->Automatic,
  ImageSize->{671., Automatic},
  PlotRange->All]], "Output",
 CellChangeTimes->{
  3.54623313329417*^9, {3.54623316422757*^9, 3.546233175420794*^9}, 
   3.546233754573585*^9}]
}, Open  ]],

Cell["", "Text",
 Editable->False,
 Selectable->False,
 CellFrame->{{0, 0}, {0, 3}},
 ShowCellBracket->False,
 CellMargins->{{0, 0}, {1, 1}},
 CellElementSpacings->{"CellMinHeight"->1},
 CellFrameMargins->0,
 CellFrameColor->RGBColor[0, 0, 1],
 CellSize->{Inherited, 5}],

Cell[BoxData[
 RowBox[{"Weibull", ":"}]], "Input",
 CellChangeTimes->{{3.543684992882703*^9, 3.543684994655665*^9}, {
  3.544320894879453*^9, 3.544320906231942*^9}, {3.544321013728986*^9, 
  3.544321015677552*^9}, {3.546149536487394*^9, 3.546149537999375*^9}},
 EmphasizeSyntaxErrors->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"ClearAll", "[", 
   RowBox[{"\[Alpha]", ",", "\[Sigma]", ",", "\[Mu]", ",", "x"}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.54613653746201*^9, 3.546136542655197*^9}, {
  3.546136596080742*^9, 3.546136617338891*^9}, {3.546139146090529*^9, 
  3.546139146249962*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p", " ", "=", " ", 
  RowBox[{
   FractionBox["k", "\[Lambda]"], 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
    RowBox[{"k", "-", "1"}]]}]}]], "Input",
 CellChangeTimes->{{3.543684783475436*^9, 3.543684946824956*^9}, 
   3.543685129663494*^9, {3.544295734613175*^9, 3.54429574288267*^9}, {
   3.54429580082901*^9, 3.54429582329368*^9}, {3.544320780873962*^9, 
   3.544320785346142*^9}, 3.544320837287442*^9, {3.544320881922005*^9, 
   3.54432088239278*^9}, {3.54432100764836*^9, 3.544321019573801*^9}, 
   3.546149541553032*^9}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", "k", 
   " ", 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
    RowBox[{
     RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"]], "Output",
 CellChangeTimes->{
  3.544320837880473*^9, {3.544320883580563*^9, 3.544320911227469*^9}, 
   3.545309803843712*^9, 3.546016483142384*^9, 3.546017657044242*^9, 
   3.546060076762132*^9, 3.546060141670154*^9, 3.546060377463162*^9, 
   3.546061431182232*^9, 3.54606188717779*^9, 3.546071462150901*^9, 
   3.546136812639187*^9, 3.546138975120109*^9, 3.546148046460689*^9, 
   3.546149544392845*^9, 3.546151403683482*^9, {3.54623018096315*^9, 
   3.546230186401331*^9}, 3.546233513423806*^9, 3.546233791803171*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Theta]", " ", "=", " ", "\[Mu]"}], ";"}]], "Input",
 CellChangeTimes->{{3.546137329720142*^9, 3.546137340576589*^9}, {
  3.546149548558869*^9, 3.546149554463107*^9}, {3.546233499084344*^9, 
  3.546233500287852*^9}, {3.546233793898834*^9, 3.546233794633646*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"ss", " ", "=", " ", 
   RowBox[{"FullSimplify", "[", 
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{"Log", "[", "p", "]"}], ",", "\[Theta]"}], "]"}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.543684996758039*^9, 3.543685116992625*^9}, {
   3.543685161495624*^9, 3.543685164824434*^9}, {3.543685617602922*^9, 
   3.543685622261405*^9}, {3.544295746546906*^9, 3.544295827428027*^9}, {
   3.544295874222879*^9, 3.544295884036298*^9}, 3.546016486016091*^9, {
   3.54601942039296*^9, 3.546019421197285*^9}, {3.546137342783463*^9, 
   3.54613734607702*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"1", "+", 
   RowBox[{"k", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        FractionBox[
         RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], ")"}]}]}], 
  
  RowBox[{"x", "-", "\[Mu]"}]]], "Output",
 CellChangeTimes->{
  3.544295884678365*^9, 3.545309805435313*^9, 3.546016487855942*^9, 
   3.546017670089106*^9, 3.546019421888676*^9, 3.546059377336055*^9, 
   3.546060078214513*^9, {3.546060139149627*^9, 3.546060144271088*^9}, 
   3.546060382291988*^9, 3.546061435830015*^9, 3.546061887191896*^9, 
   3.546071462301595*^9, 3.546136812733527*^9, {3.546137347255125*^9, 
   3.546137353812429*^9}, 3.54613897527059*^9, 3.546148046689522*^9, 
   3.546149558534132*^9, 3.546232064476071*^9, {3.546233504193507*^9, 
   3.546233516686043*^9}, 3.546233797109957*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ss", "'"}], " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"D", "[", 
    RowBox[{"ss", ",", "\[Theta]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.543685180126496*^9, 3.543685298634426*^9}, {
   3.543685431540192*^9, 3.543685489527895*^9}, 3.543685534481716*^9, {
   3.543685624867701*^9, 3.543685665571384*^9}, {3.543688058809387*^9, 
   3.543688137132826*^9}, {3.54368832453227*^9, 3.543688330973921*^9}, {
   3.544295753339424*^9, 3.544295760783175*^9}, {3.544295853271568*^9, 
   3.544295889194162*^9}, {3.546016489095013*^9, 3.54601649563242*^9}, {
   3.546019427600456*^9, 3.546019428430676*^9}, {3.54613735651055*^9, 
   3.546137357241563*^9}}],

Cell[BoxData[
 RowBox[{"-", 
  FractionBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{"k", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         FractionBox[
          RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]}], ")"}]}], 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"x", "-", "\[Mu]"}], ")"}], "2"]]}]], "Output",
 CellChangeTimes->{{3.543685658802668*^9, 3.54368566906248*^9}, {
   3.54368807593941*^9, 3.543688142568622*^9}, 3.543688332640362*^9, {
   3.54429586658533*^9, 3.544295890282246*^9}, 3.545309806594238*^9, {
   3.54601648969558*^9, 3.546016496189694*^9}, 3.546017677241552*^9, 
   3.546019429586647*^9, 3.546059378810901*^9, 3.546060079358672*^9, 
   3.546060145605671*^9, 3.546060384883913*^9, 3.546061436928236*^9, 
   3.546061887206539*^9, 3.546071462474284*^9, 3.546136812904919*^9, 
   3.546137359182575*^9, 3.546138975369357*^9, 3.546148046818373*^9, 
   3.546149560252101*^9, 3.54623206886184*^9, 3.546233518378738*^9, 
   3.546233799107136*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"p", "^", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}], "*", "ss"}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.546016522942259*^9, 3.546016539967992*^9}, {
   3.546017704408171*^9, 3.546017705125968*^9}, 3.546019441035926*^9, {
   3.546019471091529*^9, 3.546019479505023*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{"(", 
    RowBox[{"1", "+", 
     RowBox[{"k", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SuperscriptBox[
         RowBox[{"(", 
          FractionBox[
           RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], 
       ")"}]}]}], ")"}], " ", 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", 
         SuperscriptBox[
          RowBox[{"(", 
           FractionBox[
            RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", 
       "k", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         FractionBox[
          RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
    RowBox[{"1", "+", "\[Alpha]"}]]}], 
  RowBox[{"x", "-", "\[Mu]"}]]], "Output",
 CellChangeTimes->{
  3.546016544655516*^9, {3.546017682666078*^9, 3.546017707524088*^9}, 
   3.546019442560441*^9, 3.546019480115117*^9, 3.546060081264836*^9, 
   3.546060146559043*^9, 3.546060400916709*^9, 3.546061439971061*^9, 
   3.546061887221677*^9, 3.546071464395533*^9, 3.546136814598201*^9, 
   3.546137368746807*^9, 3.546138977048079*^9, 3.54614804861861*^9, 
   3.546149564604638*^9, 3.546149648173352*^9, 3.546232072442872*^9, 
   3.546233524049641*^9, 3.546233801423466*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"csIntCitatel1", "/.", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], "\[Rule]", " ", 
     RowBox[{"y", "*", "\[Lambda]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016644463204*^9, 3.546016698494855*^9}, {
  3.546017718072268*^9, 3.546017718824221*^9}, {3.546019484592136*^9, 
  3.546019489873669*^9}, {3.5460588628943*^9, 3.546058863025369*^9}, {
  3.546058985559764*^9, 3.54605898695691*^9}, {3.546149570336845*^9, 
  3.546149571255931*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{"(", 
    RowBox[{"1", "+", 
     RowBox[{"k", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SuperscriptBox["y", "k"]}], ")"}]}]}], ")"}], " ", 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", 
         SuperscriptBox["y", "k"]}]], " ", "k", " ", 
       SuperscriptBox["y", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
    RowBox[{"1", "+", "\[Alpha]"}]]}], 
  RowBox[{"y", " ", "\[Lambda]"}]]], "Output",
 CellChangeTimes->{
  3.546016699867985*^9, {3.54601771087677*^9, 3.546017720075646*^9}, 
   3.546019451857504*^9, 3.54601949082593*^9, 3.546058865086693*^9, 
   3.546058991110302*^9, 3.546059305292639*^9, {3.546060081368136*^9, 
   3.546060082414614*^9}, 3.546060147815039*^9, 3.546060407046361*^9, 
   3.546061531311124*^9, 3.546061887295093*^9, 3.546071465443946*^9, 
   3.546136815322759*^9, 3.546137371159345*^9, 3.546138977799651*^9, 
   3.546148049399068*^9, 3.546149656219562*^9, 3.546232076199355*^9, 
   3.54623352857147*^9, 3.546233804112583*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel3", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"csIntCitatel2", "*", "\[Lambda]"}], "/.", 
    RowBox[{"y", "\[Rule]", " ", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{"1", "/", "k"}], ")"}]}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232088390435*^9, 3.546232095185625*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["t", 
   RowBox[{
    RowBox[{"-", "1"}], "/", "k"}]], " ", 
  RowBox[{"(", 
   RowBox[{"1", "+", 
    RowBox[{"k", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       SuperscriptBox[
        RowBox[{"(", 
         SuperscriptBox["t", 
          FractionBox["1", "k"]], ")"}], "k"]}], ")"}]}]}], ")"}], " ", 
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", 
        SuperscriptBox[
         RowBox[{"(", 
          SuperscriptBox["t", 
           FractionBox["1", "k"]], ")"}], "k"]}]], " ", "k", " ", 
      SuperscriptBox[
       RowBox[{"(", 
        SuperscriptBox["t", 
         FractionBox["1", "k"]], ")"}], 
       RowBox[{
        RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
   RowBox[{"1", "+", "\[Alpha]"}]]}]], "Output",
 CellChangeTimes->{3.546232100824901*^9, 3.546233537073972*^9, 
  3.546233805965809*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel4", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"csIntCitatel3", "/", "k"}], "*", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "k"}], ")"}], "/", "k"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232112593013*^9, 3.546232125917882*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{
    RowBox[{"-", "t"}], " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", 
  SuperscriptBox["k", "\[Alpha]"], " ", 
  RowBox[{"(", 
   RowBox[{"1", "+", 
    RowBox[{"k", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "t"}], ")"}]}]}], ")"}], " ", 
  SuperscriptBox["t", 
   FractionBox[
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], "k"]], 
  " ", 
  SuperscriptBox["\[Lambda]", 
   RowBox[{
    RowBox[{"-", "1"}], "-", "\[Alpha]"}]]}]], "Output",
 CellChangeTimes->{3.546232131595805*^9, 3.546233543221349*^9, 
  3.546233810282288*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel5", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"Integrate", "[", 
    RowBox[{"csIntCitatel4", ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "\[Infinity]"}], "}"}]}], "]"}], "]"}], 
  " "}]], "Input",
 CellChangeTimes->{{3.546016758763041*^9, 3.546016792970542*^9}, {
  3.546017733204061*^9, 3.546017740186443*^9}, {3.546017914630278*^9, 
  3.546017915139312*^9}, {3.54601813955664*^9, 3.546018141998787*^9}, {
  3.546019493851544*^9, 3.546019499184226*^9}, {3.546058803868124*^9, 
  3.546058826478995*^9}, {3.546058870461028*^9, 3.546058872003744*^9}, {
  3.546059018757644*^9, 3.546059019951728*^9}, {3.546059209756854*^9, 
  3.546059224271504*^9}, {3.546060118428053*^9, 3.546060118951836*^9}, {
  3.546060429719045*^9, 3.546060435859049*^9}, {3.54606155661684*^9, 
  3.546061556750753*^9}, {3.54606187684573*^9, 3.546061879156262*^9}, {
  3.546149679351288*^9, 3.546149686924944*^9}, {3.546232153175871*^9, 
  3.54623216243717*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{"0", ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      FractionBox[
       RowBox[{"1", "+", "\[Alpha]", "-", 
        RowBox[{"k", " ", "\[Alpha]"}]}], "k"], "]"}], "<", "1"}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.546016797608153*^9, 3.546017744115164*^9, {3.546017901155742*^9, 
   3.546017918255887*^9}, 3.54601814479272*^9, 3.5460194592406*^9, 
   3.546019501847466*^9, 3.546058816227488*^9, 3.546058858910903*^9, 
   3.546058988908802*^9, 3.546059027020108*^9, {3.546059207468971*^9, 
   3.546059213730049*^9}, 3.546059311153677*^9, 3.54606008545984*^9, {
   3.546060121584368*^9, 3.54606015090936*^9}, 3.546060482353594*^9, 
   3.546061561105924*^9, 3.546061888934606*^9, 3.546071469576597*^9, 
   3.546136819048198*^9, 3.546137375365945*^9, 3.546138981516168*^9, 
   3.546148053135883*^9, 3.546150578307016*^9, 3.5462322891228228`*^9, 
   3.546233568384461*^9, 3.546233827611574*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"p", "^", 
    RowBox[{"(", 
     RowBox[{"1", "+", "\[Alpha]"}], ")"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016812881654*^9, 3.546016818147665*^9}, {
  3.546016886250683*^9, 3.546016904857094*^9}, {3.546018151081055*^9, 
  3.546018151902321*^9}, {3.546019505441384*^9, 3.546019506907304*^9}, {
  3.546059876912032*^9, 3.546059883931349*^9}, {3.546060057180457*^9, 
  3.546060062381365*^9}}],

Cell[BoxData[
 SuperscriptBox[
  RowBox[{"(", 
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       SuperscriptBox[
        RowBox[{"(", 
         FractionBox[
          RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", "k",
      " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
  RowBox[{"1", "+", "\[Alpha]"}]]], "Output",
 CellChangeTimes->{
  3.546230203148988*^9, {3.546233577473427*^9, 3.54623358052292*^9}, 
   3.546233833105397*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"csIntJmenovatel1", "/.", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], "\[Rule]", " ", 
     RowBox[{"y", "*", "\[Lambda]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016918820028*^9, 3.546016933459735*^9}, {
  3.546018162034847*^9, 3.546018162802109*^9}, {3.546019511970786*^9, 
  3.546019518337126*^9}, {3.546059893179542*^9, 3.546059893847781*^9}, {
  3.546060047266137*^9, 3.546060052681203*^9}, {3.546230217034243*^9, 
  3.546230217998498*^9}}],

Cell[BoxData[
 SuperscriptBox[
  RowBox[{"(", 
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       SuperscriptBox["y", "k"]}]], " ", "k", " ", 
     SuperscriptBox["y", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
  RowBox[{"1", "+", "\[Alpha]"}]]], "Output",
 CellChangeTimes->{{3.546230207442299*^9, 3.546230219675734*^9}, 
   3.546233583258629*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel3", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"csIntJmenovatel2", "*", "\[Lambda]"}], "/.", 
    RowBox[{"y", "\[Rule]", " ", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{"1", "/", "k"}], ")"}]}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.54623072884787*^9, 3.546230785760333*^9}, {
  3.546231604373572*^9, 3.546231605426678*^9}, {3.546231716620151*^9, 
  3.546231717085787*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", 
        SuperscriptBox[
         RowBox[{"(", 
          SuperscriptBox["t", 
           FractionBox["1", "k"]], ")"}], "k"]}]], " ", "k", " ", 
      SuperscriptBox[
       RowBox[{"(", 
        SuperscriptBox["t", 
         FractionBox["1", "k"]], ")"}], 
       RowBox[{
        RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
   RowBox[{"1", "+", "\[Alpha]"}]], " ", "\[Lambda]"}]], "Output",
 CellChangeTimes->{{3.546230757338739*^9, 3.546230786864854*^9}, 
   3.54623122497391*^9, 3.546231390679448*^9, 3.546231620590633*^9, 
   3.546231718726483*^9, 3.546231912776218*^9, 3.546233587684638*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel4", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"csIntJmenovatel3", "/", "k"}], "*", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "k"}], ")"}], "/", "k"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546231135452288*^9, 3.546231187522384*^9}, 
   3.546231380041735*^9, {3.546231608893195*^9, 3.546231609558657*^9}, {
   3.546231727310628*^9, 3.546231732399831*^9}, {3.546231878599405*^9, 
   3.546231893664122*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"-", "t"}]], " ", 
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", "t"}]], " ", "k", " ", 
      SuperscriptBox["t", 
       FractionBox[
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}], "k"]]}], "\[Lambda]"], ")"}], 
   "\[Alpha]"]}]], "Output",
 CellChangeTimes->{
  3.5462311903916*^9, 3.54623123012743*^9, 3.546231393222635*^9, 
   3.546231736337671*^9, {3.546231899759423*^9, 3.546231920689016*^9}, 
   3.546233592071807*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel5", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"Integrate", "[", 
    RowBox[{"csIntJmenovatel4", ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "\[Infinity]"}], "}"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.546017079018856*^9, 3.546017090969569*^9}, {
  3.546018190056803*^9, 3.546018190821094*^9}, {3.546059043677427*^9, 
  3.54605904460088*^9}, {3.546059403368323*^9, 3.546059411524818*^9}, {
  3.546059479614725*^9, 3.546059492483282*^9}, {3.546059617399394*^9, 
  3.546059617680817*^9}, {3.546059915271946*^9, 3.546059916341114*^9}, {
  3.546060024912348*^9, 3.546060025553251*^9}, {3.546061569414866*^9, 
  3.546061603372963*^9}, {3.54606187218996*^9, 3.546061873288195*^9}, {
  3.546230234851797*^9, 3.546230235704077*^9}, {3.54623031496448*^9, 
  3.546230316811469*^9}, {3.546230894174747*^9, 3.54623093187054*^9}, {
  3.546231021434708*^9, 3.546231058033388*^9}, {3.546231204938011*^9, 
  3.546231254795637*^9}, {3.54623130518147*^9, 3.546231317577529*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}]}]], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      FractionBox["k", "\[Lambda]"], ")"}], "\[Alpha]"], " ", 
    RowBox[{"Gamma", "[", 
     RowBox[{"1", "+", "\[Alpha]", "-", 
      FractionBox["\[Alpha]", "k"]}], "]"}]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.546230539424707*^9, 3.546230928296439*^9, 3.546231130736478*^9, 
   3.546231217042055*^9, {3.546231310240832*^9, 3.546231332557165*^9}, 
   3.546231408953687*^9, 3.546231758805175*^9, 3.546231931318572*^9, 
   3.546233612404448*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cs", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"csIntCitatel5", "/", "csIntJmenovatel5"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546017159619789*^9, 3.546017171553549*^9}, {
   3.546018198699244*^9, 3.54601820322215*^9}, 3.546061584597621*^9, {
   3.546061615263666*^9, 3.546061627686996*^9}, {3.546232301287677*^9, 
   3.546232306940481*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{"0", ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", 
      FractionBox[
       RowBox[{"1", "+", "\[Alpha]", "-", 
        RowBox[{"k", " ", "\[Alpha]"}]}], "k"], "]"}], "<", "1"}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232321705469*^9, 3.546233615617531*^9, 
  3.546233839664305*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"cs", "'"}], " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"D", "[", 
    RowBox[{"cs", ",", "\[Theta]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546017177523059*^9, 3.546017189050696*^9}, {
  3.546018219369372*^9, 3.546018251272656*^9}, {3.546137392518803*^9, 
  3.546137393253288*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{"0", ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", 
      FractionBox[
       RowBox[{"1", "+", "\[Alpha]", "-", 
        RowBox[{"k", " ", "\[Alpha]"}]}], "k"], "]"}], "<", "1"}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232329374177*^9, 3.546233619140492*^9, 
  3.546233841542044*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia", " ", "=", 
  RowBox[{"FullSimplify", "[", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"ss", "'"}], " ", "-", " ", 
      RowBox[{"cs", "'"}], "-", 
      RowBox[{"\[Alpha]", 
       RowBox[{"(", 
        RowBox[{"ss", "-", "cs"}], ")"}], 
       RowBox[{"(", 
        RowBox[{"cs", "-", "ss"}], ")"}]}]}], ")"}], "*", 
    RowBox[{"p", "^", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016927559429*^9, 3.546016927697169*^9}, {
   3.546017069821145*^9, 3.546017085073989*^9}, 3.546017230368702*^9, {
   3.546017453638702*^9, 3.546017454633499*^9}, {3.546017487540381*^9, 
   3.546017511750122*^9}, 3.546060275246113*^9, {3.546060594894228*^9, 
   3.546060607304117*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"\[Alpha]", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", 
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                FractionBox[
                 RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], 
             ")"}]}]}], ")"}], "2"]}], "-", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"k", " ", 
           SuperscriptBox[
            RowBox[{"(", 
             FractionBox[
              RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]}], 
         ")"}]}]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           SuperscriptBox[
            RowBox[{"(", 
             FractionBox[
              RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", 
         "k", " ", 
         SuperscriptBox[
          RowBox[{"(", 
           FractionBox[
            RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
      RowBox[{"1", "+", "\[Alpha]"}]]}], 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], "2"]], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", 
      FractionBox[
       RowBox[{"1", "+", "\[Alpha]", "-", 
        RowBox[{"k", " ", "\[Alpha]"}]}], "k"], "]"}], "<", "1"}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232363544007*^9, 3.546233625680107*^9, 
  3.546233846478155*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"Ia", "/.", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], "\[Rule]", 
     RowBox[{"y", "*", "\[Lambda]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016832069324*^9, 3.54601683491256*^9}, {
  3.546016912126374*^9, 3.546016916727737*^9}, {3.546017322178493*^9, 
  3.546017372508301*^9}, {3.546017463020216*^9, 3.54601752428375*^9}, {
  3.546232394685446*^9, 3.546232395694052*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}], ")"}]}], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"k", " ", 
           SuperscriptBox["y", "k"]}]}], ")"}]}], "+", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", 
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox["y", "k"]}], ")"}]}]}], ")"}], "2"], " ", 
        "\[Alpha]"}]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           SuperscriptBox["y", "k"]}]], " ", "k", " ", 
         SuperscriptBox["y", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
      RowBox[{"1", "+", "\[Alpha]"}]]}], 
    RowBox[{
     SuperscriptBox["y", "2"], " ", 
     SuperscriptBox["\[Lambda]", "2"]}]], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", 
      FractionBox[
       RowBox[{"1", "+", "\[Alpha]", "-", 
        RowBox[{"k", " ", "\[Alpha]"}]}], "k"], "]"}], "<", "1"}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{{3.546232392215838*^9, 3.546232413442848*^9}, 
   3.546233631780497*^9, 3.546233853890843*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"Ia1", "*", "\[Lambda]"}], "/.", 
    RowBox[{"y", "\[Rule]", " ", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{"1", "/", "k"}], ")"}]}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232427015182*^9, 3.546232435156028*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox["t", 
      RowBox[{
       RowBox[{"-", "2"}], "/", "k"}]], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}], ")"}]}], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"k", " ", 
           SuperscriptBox[
            RowBox[{"(", 
             SuperscriptBox["t", 
              FractionBox["1", "k"]], ")"}], "k"]}]}], ")"}]}], "+", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", 
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                SuperscriptBox["t", 
                 FractionBox["1", "k"]], ")"}], "k"]}], ")"}]}]}], ")"}], 
         "2"], " ", "\[Alpha]"}]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           SuperscriptBox[
            RowBox[{"(", 
             SuperscriptBox["t", 
              FractionBox["1", "k"]], ")"}], "k"]}]], " ", "k", " ", 
         SuperscriptBox[
          RowBox[{"(", 
           SuperscriptBox["t", 
            FractionBox["1", "k"]], ")"}], 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
      RowBox[{"1", "+", "\[Alpha]"}]]}], "\[Lambda]"], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", 
      FractionBox[
       RowBox[{"1", "+", "\[Alpha]", "-", 
        RowBox[{"k", " ", "\[Alpha]"}]}], "k"], "]"}], "<", "1"}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232478566571*^9, 3.546233638036752*^9, 
  3.546233857654396*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia3", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Ia2", "/", "k"}], "*", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "k"}], ")"}], "/", "k"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.54623247327657*^9, 3.546232478732023*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", "t"}]], " ", 
     SuperscriptBox["t", 
      RowBox[{
       RowBox[{"-", "2"}], "/", "k"}]], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}], ")"}]}], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"k", " ", "t"}]}], ")"}]}], "+", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", 
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "t"}], ")"}]}]}], ")"}], "2"], " ", 
        "\[Alpha]"}]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", "t"}]], " ", "k", " ", 
         SuperscriptBox["t", 
          FractionBox[
           RowBox[{
            RowBox[{"-", "1"}], "+", "k"}], "k"]]}], "\[Lambda]"], ")"}], 
      "\[Alpha]"]}], 
    SuperscriptBox["\[Lambda]", "2"]], ",", 
   RowBox[{"k", ">", "1"}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232498458661*^9, 3.546233646492959*^9, 
  3.546233865780492*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia4", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"Integrate", "[", 
    RowBox[{"Ia3", ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "\[Infinity]"}], "}"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.546017553376211*^9, 3.546017578186591*^9}, {
  3.546060190028669*^9, 3.546060215541151*^9}, {3.546232494373554*^9, 
  3.546232519267088*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"-", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}], ")"}]}], " ", 
    SuperscriptBox["k", "\[Alpha]"], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
     FractionBox[
      RowBox[{"2", "+", "\[Alpha]", "-", 
       RowBox[{"k", " ", 
        RowBox[{"(", 
         RowBox[{"3", "+", "\[Alpha]"}], ")"}]}]}], "k"]], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", "k", "+", 
      RowBox[{"k", " ", "\[Alpha]"}]}], ")"}], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      FractionBox["1", "\[Lambda]"], ")"}], 
     RowBox[{"2", "+", "\[Alpha]"}]], " ", 
    RowBox[{"Gamma", "[", 
     FractionBox[
      RowBox[{
       RowBox[{"-", "2"}], "+", "k", "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], "k"], 
     "]"}]}], ",", 
   RowBox[{
    RowBox[{"k", ">", "1"}], "&&", 
    RowBox[{
     RowBox[{"2", "+", 
      RowBox[{"Re", "[", "\[Alpha]", "]"}]}], "<", 
     RowBox[{"k", "+", 
      RowBox[{"k", " ", 
       RowBox[{"Re", "[", "\[Alpha]", "]"}]}]}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232723877207*^9, 3.546233680133625*^9, 
  3.546233880705698*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IF", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"-", 
     RowBox[{"Ia4", "^", 
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}]}]}], " ", "*", " ", 
    RowBox[{"(", 
     RowBox[{"p", "^", "\[Alpha]"}], ")"}], "*", 
    RowBox[{"(", 
     RowBox[{"ss", "-", "cs"}], ")"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546018347393014*^9, 3.546018403066614*^9}, {
   3.546018436099692*^9, 3.546018441274599*^9}, 3.546019614310392*^9, {
   3.546019656617135*^9, 3.546019704529838*^9}, {3.546057935083661*^9, 
   3.546057940051575*^9}, {3.546060690488888*^9, 3.546060692698881*^9}, {
   3.546136907926816*^9, 3.54613692580183*^9}, {3.546232739391533*^9, 
   3.546232740164084*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
      RowBox[{"-", 
       FractionBox[
        RowBox[{"2", "+", "\[Alpha]", "-", 
         RowBox[{"k", " ", 
          RowBox[{"(", 
           RowBox[{"3", "+", "\[Alpha]"}], ")"}]}]}], "k"]}]], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox["1", "\[Lambda]"], ")"}], 
      RowBox[{
       RowBox[{"-", "2"}], "-", "\[Alpha]"}]], " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"k", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          SuperscriptBox[
           RowBox[{"(", 
            FractionBox[
             RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], 
         ")"}]}]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           SuperscriptBox[
            RowBox[{"(", 
             FractionBox[
              RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", 
         
         SuperscriptBox[
          RowBox[{"(", 
           FractionBox[
            RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
      "\[Alpha]"]}], 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k", "+", 
       RowBox[{"k", " ", "\[Alpha]"}]}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], " ", 
     RowBox[{"Gamma", "[", 
      FractionBox[
       RowBox[{
        RowBox[{"-", "2"}], "+", "k", "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], "k"], 
      "]"}]}]], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"2", "+", 
      RowBox[{"Re", "[", "\[Alpha]", "]"}]}], "<", 
     RowBox[{"k", "+", 
      RowBox[{"k", " ", 
       RowBox[{"Re", "[", "\[Alpha]", "]"}]}]}]}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", 
      FractionBox[
       RowBox[{"1", "+", "\[Alpha]", "-", 
        RowBox[{"k", " ", "\[Alpha]"}]}], "k"], "]"}], "<", "1"}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232757750575*^9, 3.546233688982581*^9, 
  3.546233886496002*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IF1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"IF", "/.", 
    RowBox[{"\[Lambda]", "\[Rule]", "1"}]}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.546017428290329*^9, {3.546018467395976*^9, 3.546018491191415*^9}, {
   3.546018587031472*^9, 3.546018597806486*^9}, 3.546157241026402*^9, {
   3.54623389091695*^9, 3.546233914238473*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
      RowBox[{"-", 
       FractionBox[
        RowBox[{"2", "+", "\[Alpha]", "-", 
         RowBox[{"k", " ", 
          RowBox[{"(", 
           RowBox[{"3", "+", "\[Alpha]"}], ")"}]}]}], "k"]}]], " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"k", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{"x", "-", "\[Mu]"}], ")"}], "k"]}], ")"}]}]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"-", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{"x", "-", "\[Mu]"}], ")"}], "k"]}]], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"x", "-", "\[Mu]"}], ")"}], 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}]]}], ")"}], "\[Alpha]"]}], 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k", "+", 
       RowBox[{"k", " ", "\[Alpha]"}]}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], " ", 
     RowBox[{"Gamma", "[", 
      FractionBox[
       RowBox[{
        RowBox[{"-", "2"}], "+", "k", "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], "k"], 
      "]"}]}]], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"2", "+", 
      RowBox[{"Re", "[", "\[Alpha]", "]"}]}], "<", 
     RowBox[{"k", "+", 
      RowBox[{"k", " ", 
       RowBox[{"Re", "[", "\[Alpha]", "]"}]}]}]}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", 
      FractionBox[
       RowBox[{"1", "+", "\[Alpha]", "-", 
        RowBox[{"k", " ", "\[Alpha]"}]}], "k"], "]"}], "<", "1"}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.546232774650792*^9, 3.546233699094437*^9, {3.546233894146207*^9, 
   3.546233916241534*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IF2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"IF1", "/.", 
    RowBox[{"k", "\[Rule]", "2"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232789850054*^9, 3.546232814587751*^9}, {
   3.546232870367111*^9, 3.546232891695176*^9}, 3.546233703305696*^9, {
   3.54623393071251*^9, 3.546233930927549*^9}, {3.546234024310321*^9, 
   3.546234025513919*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
      RowBox[{"2", "+", 
       FractionBox["\[Alpha]", "2"]}]], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       RowBox[{"2", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"x", "-", "\[Mu]"}], ")"}], "2"]}]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"-", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{"x", "-", "\[Mu]"}], ")"}], "2"]}]], " ", 
        RowBox[{"(", 
         RowBox[{"x", "-", "\[Mu]"}], ")"}]}], ")"}], "\[Alpha]"]}], 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"2", " ", "\[Alpha]"}]}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], " ", 
     RowBox[{"Gamma", "[", 
      FractionBox["\[Alpha]", "2"], "]"}]}]], ",", 
   RowBox[{
    RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", "0"}]}], "]"}]], "Output",
 CellChangeTimes->{3.546233010925664*^9, 3.546233716615459*^9, 
  3.546233933348742*^9, 3.546234026816667*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"IFun", " ", "=", " ", 
   RowBox[{"Function", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Mu]", ",", "\[Alpha]"}], "}"}], " ", ",", 
     FractionBox[
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
        RowBox[{"2", "+", 
         FractionBox["\[Alpha]", "2"]}]], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         RowBox[{"2", " ", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{"x", "-", "\[Mu]"}], ")"}], "2"]}]}], ")"}], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"-", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"x", "-", "\[Mu]"}], ")"}], "2"]}]], " ", 
          RowBox[{"(", 
           RowBox[{"x", "-", "\[Mu]"}], ")"}]}], ")"}], "\[Alpha]"]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "\[Alpha]"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"x", "-", "\[Mu]"}], ")"}], " ", 
       RowBox[{"Gamma", "[", 
        FractionBox["\[Alpha]", "2"], "]"}]}]]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.54608073954952*^9, 3.546080787340927*^9}, {
   3.546080827508503*^9, 3.546080832763547*^9}, {3.546080881724667*^9, 
   3.54608089839569*^9}, {3.546136031913543*^9, 3.546136106756538*^9}, {
   3.546136264957334*^9, 3.546136269166274*^9}, {3.546136300237964*^9, 
   3.546136302873075*^9}, 3.546136404353272*^9, {3.546136877306471*^9, 
   3.546136878124014*^9}, {3.546136974390393*^9, 3.546136995325726*^9}, {
   3.546137115334749*^9, 3.546137121892679*^9}, {3.546233026432763*^9, 
   3.546233039064002*^9}, {3.546233731274747*^9, 3.546233735724144*^9}, {
   3.546233948572817*^9, 3.546233952794951*^9}, 3.546234044136561*^9}],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<PlotLegends`\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.546078399638204*^9, 3.546078434270568*^9}, {
  3.546078523483738*^9, 3.546078526611331*^9}, {3.546078631725602*^9, 
  3.546078677869414*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"IFun", "[", 
      RowBox[{"0", ",", "0.05"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"0", ",", "0.1"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"0", ",", "0.3"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"0", ",", "0.5"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"0", ",", "1"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"0", ",", "2"}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "6"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotLegend", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<\[Alpha] = 0.05\>\"", ",", "\"\<\[Alpha] = 0.1\>\"", ",", 
      "\"\<\[Alpha] = 0.3\>\"", ",", "\"\<\[Alpha] = 0.5\>\"", ",", 
      "\"\<\[Alpha] = 1\>\"", ",", "\"\<\[Alpha] = 2\>\""}], "}"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"LegendPosition", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"-", "0.4"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Dashed", ",", " ", "Thick", ",", "Thin", ",", " ", "Dotted", ",", " ", 
      "Yellow", ",", " ", "Blue"}], "}"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.546071566443362*^9, 3.546071604772914*^9}, {
   3.546071664304524*^9, 3.546071734557583*^9}, {3.546071769565434*^9, 
   3.546071781503191*^9}, {3.546077877666447*^9, 3.546077878779971*^9}, {
   3.546078077257591*^9, 3.546078094273397*^9}, {3.546078128979278*^9, 
   3.546078131508565*^9}, {3.546078195525481*^9, 3.546078246143438*^9}, {
   3.54607831567725*^9, 3.546078368785814*^9}, {3.546078441904356*^9, 
   3.546078501052553*^9}, 3.546078697301196*^9, {3.546078795298968*^9, 
   3.546078819926423*^9}, {3.546078851304196*^9, 3.54607891370029*^9}, {
   3.546079894604615*^9, 3.546079946211399*^9}, {3.546136122778719*^9, 
   3.546136164810206*^9}, 3.546136449027762*^9, 3.54623312566578*^9, {
   3.54623315837957*^9, 3.546233172933139*^9}, {3.546233958904524*^9, 
   3.54623396333546*^9}}],

Cell[BoxData[
 GraphicsBox[{InsetBox[
    GraphicsBox[{{}, {}, 
      {Hue[0.67, 0.6, 0.6], Dashing[{Small, Small}], LineBox[CompressedData["
1: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
Y4iqZVDUcDY8tm7++fcvG23bkupc+rPh/zLMdJo=
        "]]}, 
      {Hue[0.9060679774997897, 0.6, 0.6], Thickness[Large], 
       LineBox[CompressedData["
1:eJwV1nk4Vd0XB/DLvRdJpnCJNJKShCIqa1VCpdBAUZRZvPErZAz1UsboGkqG
UpJGZJ7OPUWEEhkSKlMviswy/05/3efz3Oc85+y19/quvcbK5agtN41GU+Ci
0f7+riprlOgvewd17n7uOxreEXJzsgfKat9B9OzHPyvevCPWmjmb+RpWw81R
29qPGu8IGQlevz/HayAks8otZUsVsaLieZBpXA0o0mS1hocqCSm345F5LTUw
quF4RjuzkpBouJ/iZlYL07s91Qq2VxLCkbteD1u+h/AlFpNuh94STJ6LvP3n
6+B6e2bvkaRyou+Av9BYeh1oS8bFSV0oJ6ojwlnzPXVgfVfK2hPKicrQT+wb
yh/hwLTivd7uN0SY6NCDxIyPULfo1LZJ7Q0htnZdeXlSPfC+VQ5k9JMEs3xj
1YGSethTXkESJElM2m6t/fClHkYswlx7E0jic8buxs+sBshSODxmf4QkklRO
9vyKboCtcwftlhdxCPk9EQzx4E9wRaX76JgOQbC62XwJDz+B9dULu7i4CYIv
KEFg1ZtPcEk/yek5UUYMVKWLbaQ1wnG/voymXWXES6PX63d7N0JdqHOkjHYp
sePslI7thSYYqNOWcDIrJg74nwvKNWmBgoPhhdU/8wnVm6TufbcWeC/l/OV4
YT4hk7KGL+JWC8it1BHRup5PDJd1htp8aAFR2u/bwuvzibiFc1HLdT9DxMEs
k5pzeUSPn9Xd/21vhWc2fm/cfuUQAb7WWUpibXB8wPxYiEY2cT78zUUp1TZ4
nNGw64xgNnE8cd02phHl4Uclzr1ZxIaS7rz2sDZIZ7CSdsZkER9mrUvC6O3w
8r2RedB4JiHjY1PZP9oOdNuRUacrL4l8L9uOtPqvMB69d2R05AnxSNupZcXo
V5jN7ZpQffSEiKP/r/6m6DdIDRDVbzR7QnhE+FZ4HfsGO79Xn1evyCDU77Of
H276BrmOS0rMkh8T5j3fy7ydv4NLg8rQnnOPiC9LhW6ude0Euz6Vvj3rUolW
Myfli5e7QXa5a4/StxgitEvPOT64G0Y33hLlvxRDaJ1fn1ES2w3NS2e3IG8M
kejVsZY3pxuCd9pb5G9lE2dvG0okDnfDlI2zTtn1aOK/JrX5CsceaBkcbtwW
Fk5MGM1VS53uhTTzljr9EX9CRC/CjsT/YF+3scoO9Qsg3GibrWH+E0Q2DTPJ
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
JximbmJgrVBV1AvKOSeqTZ9uYWDy4Zl//v7f9++MZY4qAzcf26b293mZnE0O
peoMdJRf2fmQsnG3metbLQZOzJh7JlEOFg3zrNOm1qdye5pNuWhPccDnvQzk
N/OyvUF5yPXnjU5dBvIqp5d4U157Tzp64CADp++8WzxP2aTu0J2xIwz8lXlD
+RTlsAWf+3NHGdiUF26wnzJH6VkG05SBLtJXTJUpj59uzxI0Z+ByH6bx3/or
hAsUsSwZ+CC5RnOe2p/Txbter7ZmoJmPl+jf/YoacK7eaM/AAtWCtr/7WSGV
1KDqxMAToipxqZRn9N9/2enCwLfsiL0BlLd4znfpXGKgx+nLneaU45rPjJn4
MDBdLWFagHI1M3LW0p+BS+w3uHVR529xWxnd8RoDJRUHunMpO7BlxXzCGNgQ
WpRmQlnT6Nu2lLsM5IhoVPhT57ukjzlolcJAer3wgj5l7cDNafIPGBhvHOom
TFkn20v8xRMG5r0MlUmg+ueImNhkSSEDC335HW5T/ffxmdaLgFIGptIVk45R
Prb/nJ0OSX1v9kGxZX/71+NFc00VA6sjCqu9qf62+qyf/6WFgafkiuz3UP3f
4+riktxGrWdWo2SIygf7JXEbrL4x0F5OxjSBsrNWd3z/DwaqGRy2+jVMgkei
n+efCar+jg0dPlTehJ3N1pQQY+LxaxW9+lR+CU5/HmllMTEod3v3FyrfoqIX
M5KkmagpPKLsRDnutcEKuXVMlHMJLgym8vDe+v9m1FSZ+OHk18QMKj9z+qRL
jI2Y6CiotjalhwT1wL1u4seZ+PlBsakE5UIpx82tpkyUrovqDeum5sXBvMSz
lkz04rIVuNhFQtUzIz+XC0xcah0ft4nK8w7XIO2IcCYKtETKHKbmAY3DWZka
xcTLTJUjiV+ovBOam8uLYWKE6vXb/a0knH9+sfh7IhNj1HZ6X/lMwp9+yx3b
njPRibYzOLqJ6k9rLdW290wsVmqwOUPNJ/Vsd5HheiYqRd72iqTm2SmurGFG
MxMbOj5ml76n1pey4eWWr0wM3BsWK1FLglK72OarQ0zc+ql1a3YVCfonfstt
FOJBwZhWm2iSBKeHm5jay3nQMjxOKo1DQuSYbc9RFg9+NXuwkEfNz6bo9lTf
VTx4Wujx6aZSaj8/vFv1UZkH23fs95srJMFP76HUZSMe1HS1+zNOzedszVPL
KqJ5MIMnXjLmHrXe0dDEmFgefHt1e8VV6j4Q+6RE0eYODzobRYy6UPcFT+nV
B+n3eXAZrbN+fyJ1Hud/BO/J5MGPjrY53+JJqOG40co+8ODz7AB2bSR1fvSi
xvKW8uKN/4xFb/qQIGFS2fo4iBdHNG8xvxhR+bXrIdqG8GKiz+kRN0MSLq8N
TF8TwYs2OVvYgkdI+Dyk5Z4Qw4v2IYdmdx+i5uX1F8LhD3jRSUrgQsR+6j5V
GKvnQvKi+Pshq9+a1HyRscndPs+LUfVTuW/WUPe7Llr0azc+3PxG4lLdIAfu
SDgsk/dcgr07sm9V/sOBq8mO17ef50dFp23RqjUEJH24/TbSdSmu+XVv1imo
DPwusIdXXhTAqafSDTabS+HnOQXJU1bLMGzbi1xGazGEzQ8wvtoJYkyPNDlq
VgRFv/R+C5oJodxnvq2RgwXQLLejS2u9MCoK/qey5Fo+OGy0VmanCaPNxdqh
qj+5QJqY++yRFcF3H6U/e4XlgNrJgQyx+yIoJrdlKI75Cpyv6bbslhbFLSo2
jQv3s+CGHd8MF1sUC7sDHfwNM6F05bnFAbHl6JBfM+PY9hwKF4LpmyKX4/uT
8/n7rJ/Ch1f7BiJExLCXMPEiWx5DxWq7t+G3xJDPbfKguO8j+Df/xP1OfnFc
K9/FPnT+IZxe225hHiGOQlUKX4aMUmE2T1lakVcCJ4XqE/dduQe+9P7a2CsS
uFV9bkvRkySQWK95To7GwvVVKac8TibA5Qsm4/xeLNxQntodGxAPMuo2VfI+
LFS7uaDi6hYPnPn/Je71Y+E+X5E9hg7xwB8RoeMdyMJNwsxkaaN4SH5aHtMf
wkLtI0k7B1fFw9s+1e1VCSyUUruhd4kTB2LWQh5BJSz0UaXHMphxULhp5cH7
ZSz8pQzG7tOxYDG6SbaUw0IvH/vsgcFYeByo+3a8nIXrDny37G6OhZ33/CRs
3rOwv2nZEYGMWLDq+Jm39ysLV4Wxn+w8Egu8adOhFt9Z6H5IRX9ybyw8c+a1
9O5i4T/hQr65GrEwObuWN/sHC02b6lP3rImF0BVmpmt+s1DHXqUhajwGlLvs
FXePsND/dAKva38MNGa4L54cY+FBc07Nsa8xIKsZnR41Rb1f2GtOoSoG3tBS
fJ5NszDBQ85+RWkMOFQ9M6yaZSGh8/q0cHYMCEQVreuZZ+FtdfN2/vQYyDKt
mlpcZGF43GzPksQY+D9Lv/Kr
        "]]}, 
      {Hue[0.14213595499957954`, 0.6, 0.6], Thickness[Tiny], 
       LineBox[CompressedData["
1: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

        "]]}, 
      {Hue[0.37820393249936934`, 0.6, 0.6], Dashing[{0, Small}], 
       LineBox[CompressedData["
1:eJwVl3c81d8fx+097r6UUUIhLVTC530yKiOjJMkoSrKKUmigjISQEZGIkhDZ
SWRlZd5bSchXkpl9r+13f/98Pp/n43E+55zX6/0+533OVvsrJy5ysLGxabEe
/3+fYfdjk740AO1ed7wOdjVV/bBy2e158zf85HAfjDxdVvVw8Kjrk+Df8GUv
WdDqZ2nVIWfZrIq431DclGNwxa60KtmnT4a36De0Wphl+zqVVJ1LMKEkT/+G
V3uULhLuFlX9/aqyVn95CB50l71UKc2vWjBdbRa3/gPnRbjLk6pfVOGPRjhW
o79gRB6/NlgdDbpZFaBk9heY8edjUsJjwFtwQizu/F/4aLGWz2kRBwPtBi1O
9/7C563teY1DCZBvybcHV/cXhmb5eDVnn4Op8/0l26Mj8GNNpPvs8CuIivAJ
Xz0+CtjuRLXv0gVQN/X6oqPtKGiKcq7XhhTAolk31uE+Ct92DetZTRXAOcqB
mfTIUUhTDVG7/7EQ9jyfP2XYOQozkRUV9aeKoSP/ivRT8zHwreF4xXOjDHD0
iwUHzo7DeTH319pelYAmD4+Zu4yDXqzDYkpHJVzlkZLxvDUOtmc7OTOVqqDz
4LfonKRxkLPqUC0fqILHz454bO0dB+ZzV+Ub6Z+AfGn7HkGbCThHyvH6yF4D
m5ZHcvttJ4G2ZvcoKqUODIj1f1bcJwH/bzRl4XMd+O5MkxT3mwR0wVp/z1Qd
/LQ9E3Hy+SRwi1g6yUM9JNc2uTb+mgRc0fR7cl89SEW8USo49w/+Jiwbs+Eb
YNsW16wg+yl4UOWuxHumCcL7t6ZFeExBr+OrkTqfJmAkf0+I85+CikyRdpun
TdAorvPgZcoUnBg2kdr6swlciZsu1fdMgXWq1MqkVTOc5bzw+J7CNPCeT4l7
cbIFXjLwpjVp0/DzScv3hwqt0PN1wvBI1jQcvM+ML9BrBZHihqPN+dPw6t72
/uLzreB97Q50VU1DvbgIxSSxFQymR3YN9k1D92nJ7C88bfBvtEqYY9MMnGz+
m73Y0wYH+9xaDj+eAVnhUlNJ1Q54q+BJdno6A9Y2jrKTqANkb9ywe/RiBniu
5c5mHu8AnKjfXE/BDPxlaEf3O3bAKIrafJ02A/vcM8+YJnTA04wCl1ekWdiX
72tvwGS1nykp/iIxC8bWgzJfODohWOvDxqzsLDzJ61RWF+kEz2+1MaA2C/+O
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
RaMYr/Uby0DsfzMvqoE=
        "]]}, 
      {RGBColor[1, 1, 0], LineBox[CompressedData["
1:eJwBEQLu/SFib1JlAgAAACAAAAACAAAAeEXhM55M4z/PdX11ONLJv9laay9y
d+M/Z9PLcPJwyL+K4kdsl4bjP+yzaM2g9se/OmokqbyV4z+mLCWQdXzHv5x5
3SIHtOM/d18zWZWIxr9gmE8WnPDjP3GMvUXDosS/59Uz/cVp5D9NcQY/gN/A
v/VQ/MoZXOU/tUajuh//sr8RR41mwUDnP33BUf6/AaI/RKm8PytR5z9O2QeE
hNKjP3gL7BiVYec/YRRs5M6hpT/gz0rLaILnP5oDEm/qO6k/sFgIMBDE5z8T
IrpG+S6wP1Bqg/leR+g/bCLR0YQrtz+QjXmM/E3pPz4XoN0pQ8I/xO+oZWZe
6T/5XLpNWKrCP/hR2D7Qbuk/B1ZdixURwz9gFjfxo4/pPyCWWYE63cM/MJ/0
VUvR6T8HP10uIXDFP9Cwbx+aVOo/b4VMX/1/yD8Q1GWyN1vrPxovCNYhRc4/
QO1B6lRr6z8fyIuNvZvOP3AGHiJye+s/0ikaKuDxzj/RONaRrJvrP0mv0vu4
nM8/kp1GcSHc6z+5xTTaWHbQPxVnJzALXew/SHj938S60T8a+uit3l7tP/Nv
Glu4FNQ/ShPF5ftu7T/Dx1l/PjjUP3osoR0Zf+0/vGUcFYVb1D/bXlmNU5/t
PzhvcmNTodQ/nMPJbMjf7T+59/xU8ynVP7n2FQx4DO4//t7oYYSE1T+1/ggd

        "]], LineBox[CompressedData["
1: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
nEqUWTUvrK0xwO2IZ/WHxxTify3H+js=
        "]]}, 
      {RGBColor[0, 0, 1], 
       LineBox[{{1.2244897959183673`*^-7, -6.612244897958786*^-7}, {
        0.0018403075233577606`, -0.009937526002051543}, {
        0.0036804925977359294`, -0.01987358315902815}, {
        0.007360862746492267, -0.039740044836081734`}, {
        0.014721603044004942`, -0.07942776299600669}, {
        0.029443083639030292`, -0.15844204815362947`}, {
        0.037657223376417276`, -0.20172792183704621`}}], 
       LineBox[{{0.6577132781014055, -0.20172792183704621`}, {
        0.6674927677691175, -0.16102692739973995`}, {
        0.6693415787947472, -0.15338386553572964`}, {
        0.6711903898203768, -0.14575005345905034`}, {
        0.6748880118716363, -0.13051225170387187`}, {
        0.6822832559741552, -0.10017027668723452`}, {
        0.6970737441791929, -0.040132869149116686`}, {0.7266547205892683, 
        0.07650525319843415}, {0.728658318029638, 0.08420504997595588}, {
        0.7306619154700078, 0.09187640511258109}, {0.7346691103507474, 
        0.10713173296388026`}, {0.7426835001122267, 0.13727876566976022`}, {
        0.7587122796351853, 0.19601030491373372`}, {0.7907698386811024, 
        0.3064363174569967}, {0.7927734361214722, 0.3129983122112355}, {
        0.794777033561842, 0.31951820259689834`}, {0.7987842284425817, 
        0.3324303583949046}, {0.799982301254143, 0.33621320306291114`}}], 
       LineBox[CompressedData["
1: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
k76d+T+z4nsD
        "]]}},
     AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
     Axes->True,
     AxesOrigin->{0, 0},
     DisplayFunction:>$DisplayFunction,
     FormatType->TraditionalForm,
     PlotRange->{{0, 6}, {-0.20172792183704621`, 0.33621320306291114`}},
     PlotRangeClipping->True,
     PlotRangePadding->{
       Scaled[0.02], 
       Scaled[0.02]}], {-1, -0.6180339887498948}, {
    Left, Bottom}, {2, 1.2360679774997896`}], GraphicsGroupBox[{
     {GrayLevel[0], 
      RectangleBox[{1.05, -0.45}, {1.425418994413408, 0.3499999999999999}]}, 
     {GrayLevel[1], EdgeForm[{GrayLevel[0], Thickness[0.001]}], 
      GraphicsGroupBox[{
        RectangleBox[{1, -0.4}, {1.3754189944134079`, 0.3999999999999999}], 
        InsetBox[
         GraphicsBox[{{{InsetBox[
              GraphicsBox[
               {RGBColor[0, 0, 1], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 0.08}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 2\"\>", {1.2100000000000002`, 0.58}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {RGBColor[1, 1, 0], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 1.24}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 1\"\>", {1.2100000000000002`, 1.74}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.37820393249936846`, 0.6, 0.6], Dashing[{0., Small}], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 2.4}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.5\"\>", {1.2100000000000002`, 2.9}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.1421359549995791, 0.6, 0.6], Thickness[Tiny], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 3.56}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.3\"\>", {1.2100000000000002`, 4.0600000000000005`},
               {-1, 0}, Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.9060679774997897, 0.6, 0.6], Thickness[Large], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 4.72}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.1\"\>", {1.2100000000000002`, 5.22}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.67, 0.6, 0.6], Dashing[{Small, Small}], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 5.88}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.05\"\>", {1.2100000000000002`, 6.38}, \
{-1, 0}, Automatic, {1, 0}]}}, {}},
          AspectRatio->2.1309523809523805`,
          FormatType->TraditionalForm,
          PlotRange->{{-0.1, 3.26}, {-0.1, 7.059999999999999}}], {1, -0.4}, {
         Left, Bottom}, {0.37541899441340787`, 0.7999999999999999}]}]}}]},
  AspectRatio->Automatic,
  Background->None,
  ColorOutput->Automatic,
  ImageSize->{708., Automatic},
  PlotRange->All]], "Output",
 CellChangeTimes->{
  3.54623313329417*^9, {3.54623316422757*^9, 3.546233175420794*^9}, 
   3.546233754573585*^9, 3.546233968450642*^9, 3.546234053655817*^9},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzlvQV8VUfX/3tKBCvU3d0odYVC3Z0qtDgtLUULLZTiUCi0FChS3IoX9+Lu
GtyDW4DgSUjmnu/Mmjlz6ElICO/7/997n89zQvfOyd5r1qxZs+S31rxTpmbF
CpXL1PymXJlbX6tRplrFb8p9f+urVWsEb0VdFAjkmB0IXFTx1gD/rQIB+0MF
/29+zOUHt/8/fKOA/icqYIauzMd9qdP/kS9dr/+5JEqdOVhvauOStaq17NDm
16qlijSbkRA4o9TtSZvbrC58/2eXzjh8rP3SSnfGXVng2elFixYNfgovfPyJ
0vnnJvKKzL/okeNLKy8o8GSHmK3J6rbkLW1WPvFg9TzLT6holXL4wfUrd1x0
Mk1deebAhK4/le+cZ82JNP7q0pTDq/PEn0jN3IsuNV+649SmP7tUr1CuW7ly
5QI59M+8ncpVrHvtiD3JoT9WSTU3tXq4z11fLgocUyqfOjp/0+d3PHL7H5uT
AtHmOdcl7x7Vuc5Xv145/UBKIEbfi/EJuHrfPpX75Ellv58zOfnMlUeOnNJX
ci9/0vFTf8xtN7zntF/6B64z9y45nnTi4pPJp+SJ/Iy9Rqm90Uql2GfnSE1V
N23f7i2T0maM5hk5gz9P/rGy2r1t7q26InBCqTzqxPJ1le65r0DNuJPyzOgb
k3YMmlGhSPEC7eOOB9KUivrvEPoVL66K9+vnyC01fvz6v5s2nuINITomNeVM
Stfnv+cTnXomVbh8Z+LhnY6b5o1RPZpP71h63Ppp/siWKfXw/Uqttt+9OT5e
xd98c0YjS6q1seXDve8qGT4zrYMzE+MIS/1o75DnFt74xF8x8clmZHpgMo5X
Fy7c8e/31cf6xG3t/3ET1fm56rcd3Z1gReXRA3vXnz2IWv2Xj6wyJG6cP4jJ
Sr1UVKnp/tTvv+qq/w7CyHqsyHrHmG1a1ttZWc/hxpj23OGZFWt90HJ94JRS
Tx+d92ncbQUa5Vx32q6psGka+e676r0RI9w0Pbp+/YGl5csO9cmePKZaR4b3
8s5F6+3w7jmcEH9p0ulj+iqfIW2IUh99oNQw++xLjhxRRy65JN2hBPVDQt3p
TctUr9m682+/f1/2ueYzD6EfDJmxl505NLvbr+XKVq7brlPPX0oXe6vmmH2B
lIjCNuatt9RbY8a4UdxwYP/x3R++39cfReeZrQYzioqrR8yxo4hOTT3zxP49
a/1RdFGqQlmluvvrJTVHjv+OosB/6Zj6wgvqhalTw9btqlIlB4cJwfL+U6Gj
1bwOowKXmXvP7N21ygmL/O1FaSrtnvjDu/y//VWpH2oq1UpfmRmPgraoM2fO
Vlwl0yVyVuHCqvCsWSpwsXnAB1tnrISgkRNqd7MEPbVv9+qzCYpKTUtNerFr
8ZzJZ5ItQT8o9WsLpX70CWLKmfpME7To8cfV44sWOYIKJGzZDUGrB3/ZIiKH
5OVTq4xudNO+Ywd9Iiso1aWrUuV9gvZdfbW6Zu/ezBO08sEH1YMrV7oXXXfw
4Il8J04k+7orT8qppLTORWqc6vZSrRxpqWmXRqBTxvORUkOGKvWhTxN6Cn2V
aZrW3323umfdOkfT0Hp1/y02Y/oWnyHx/T5qDOPuSNx50Ir4bUeP7L7m5IkE
n6AXlZoyVakXfIJW33+/un/16swT5EYgL+/Y+vdZ3w0busonaOLYGn9B0Bvb
562xBF0U1FBuzcn32Ldu2310nz+Tjyi1dLlSD/lErihYUD20fHnmidx93XXq
ut273Ysa9uyxuFGP7ov8l3eY1fofiKwc98/MjOT/o2mb542oM7Glfy+42cTv
VOoGn0i3vjJLpFswQtC3w4et7vT7b7N8IqvEDZkJkRCbkdZ4cHNCfPcW0zv5
9/IqdZyN3CdyyosvqpcmT848kcfz5lUXHzvmCGIf/K1j+3k+ka/tWLAWItkw
LJFP7tuz5qwFEZukVGwupU7Z+1Z9h+go5dERDRX5hd/H9h7iDbv6ftDAvgFh
Qqj8N+xR6trrgtNv3zDok0/UJ4MGpfOGQLQdqVX25nXRF6m0tGM9Xq3NKy9N
OnZSRPiqUycPs678sd+/9dCOyxNlQzSMj12j1H0PKOUmCZuoxN9/n5MKu3Hm
NI++b9u2w1GpqWn+6xYNq9Aaqp7dG7fVZ8TZ8jCo/qQ/PpixdYFP1kylnivq
mRwdv/lGfdOxY1bJ2v/eO72vPnTopE9W72nN+kFWubVj5keUACGr6pC4sWeT
NVyp933zoW2VKqpqmzbnJMuafULWsnJl/8GK8cmye26bOW2HRyQrryGhu1Jl
yynVzd5vXru2qt28eVZJGF37x/Hvzp69zSfh9e3z9dqYMrpq5LUhJLRSqmYt
pVra+/UaN1aN69U7JwkF4uLUqgcesCSgP9AjPgk3HN9/BBL2936nniXh4YP7
NmAF+ZMTm5ya8tLinXH+5PyoVIuWStWyZMEVuHMusthG2U41WTm+GjVyjRB4
pOfrdSDm2hMJR+3WkDcl+dS9QcPSJyb36ZQkrI4cqWlplpjySnVlqiwx33bo
oIX4XMQ8M3eumvvMM0peN2tkpXaQ8MqOoF2bgbAOrj+pNTuUuTIkfKjUUATW
frdCly6qa/ny5ySBjYENQkjoOOv3IZBQY8XA6RGXsVHasSxXlq29j2eFNjnX
616bMEFNfPVVKxVB9Zb25Jo1Zp+NNfe+WT18DiRoP1JIeOzA3nVnk4CnhUKz
9z8YNkwN++CDc5KAYkfB57TClZx6+uUXu12UluZIKLxnxRZIWDy0/O8RSZCJ
wER4eMPBrf5EXKvUnr1KXWO/a1+XwV6SK6S/rj9w4IS3RKJxqs90Kfo9Vl1s
avIZmSaEEuH0iSk1fv30vxtPaecTExv0MJPxF+XVRWbMUDOfe+6cPLLTKZQt
qPjV8Gfj4vb607Rm0Bct4NFjB9btsOslJjU1pWDC/k0+WfDnpz5Lh3n3YoK+
7sX5lUr010DgXDSV7tlT9Sxd2tI0sFGDyZ9PnrTRp6n/lEZ9z9b2EUQnZotS
t92u1GZfIZzz/exILGp5/9cjR675YOaMrf77rVpvP7v10Izev1ipxx4P+hlc
3b1+vdpw113nfv93f/6p/vzuOyXPfWHX0o28a97wim3su8J8fOH/awt2LL/y
yKmjnljE/KvUK68qNZEru1Wc8/1Ww14WkszULkVrnOj+yo9Raak2VoL+PpuE
cbXG/fLqwh0rfBIGKvXp50r15+ryhASVcPnlmSdBpgAb5LWFC3boK1nOaweV
aA5bHjq4cZcVy1uPJu65/PSpRJ+mr0aumVRo5Z51Pk1/BplcWSm9gvInJqqj
+fKdmya7JecKaTTUCZ62panP1KbaCCm/dvQ83+t45IDwSsSikVL1GyjV0PLP
hFcz+f7csixLfjGowJYtCb5YVlo1bBbv7zajxUArKu7dfMzfxlZVqk1bparY
+8kxMSo2KcnTFiUjkoBUVm7XzpIw8qfaE96bPStsZTyxf208JKwcUqplRBIk
6sm2VuLfjbN8JfalUn2CNmoJ+13rnpyLLGtGClktO3Wc/2O/v5d5ZEWjUlGt
qNiLk0+evjR9yq46fCrx0Ju9yviUvaHUuAnBTc1+d+cNN6gbd+w4J2WosTI9
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
Vv/+/7IvhW7M/X/bjcBF/w/IPWGP\
\>"]]
}, Open  ]]
},
WindowSize->{935, 1028},
WindowMargins->{{-7, Automatic}, {Automatic, 0}},
PrintingCopies->1,
PrintingPageRange->{Automatic, Automatic},
PrintingOptions->{"PaperOrientation"->"Portrait",
"PaperSize"->{Automatic, Automatic},
"PostScriptOutputFile"->"/home/honza/IF-Weibull.pdf"},
FrontEndVersion->"8.0 for Linux x86 (32-bit) (February 23, 2011)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[557, 20, 290, 5, 30, "Input"],
Cell[850, 27, 325, 7, 50, "Input"],
Cell[CellGroupData[{
Cell[1200, 38, 807, 20, 55, "Input"],
Cell[2010, 60, 899, 23, 62, "Output"]
}, Open  ]],
Cell[2924, 86, 199, 4, 30, "Input"],
Cell[CellGroupData[{
Cell[3148, 94, 620, 13, 50, "Input"],
Cell[3771, 109, 888, 21, 56, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4696, 135, 706, 13, 30, "Input"],
Cell[5405, 150, 977, 22, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6419, 177, 410, 10, 30, "Input"],
Cell[6832, 189, 1465, 42, 84, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8334, 236, 579, 12, 30, "Input"],
Cell[8916, 250, 1142, 29, 67, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10095, 284, 363, 9, 30, "Input"],
Cell[10461, 295, 1023, 33, 128, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11521, 333, 597, 17, 30, "Input"],
Cell[12121, 352, 644, 21, 78, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12802, 378, 1001, 18, 30, "Input"],
Cell[13806, 398, 2213, 60, 103, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16056, 463, 503, 10, 30, "Input"],
Cell[16562, 475, 580, 19, 76, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17179, 499, 588, 12, 30, "Input"],
Cell[17770, 513, 404, 12, 59, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[18211, 530, 466, 11, 30, "Input"],
Cell[18680, 543, 740, 21, 114, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[19457, 569, 775, 20, 30, "Input"],
Cell[20235, 591, 564, 17, 67, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[20836, 613, 1048, 18, 30, "Input"],
Cell[21887, 633, 1158, 35, 49, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[23082, 673, 387, 7, 30, "Input"],
Cell[23472, 682, 1164, 38, 96, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[24673, 725, 343, 8, 30, "Input"],
Cell[25019, 735, 1553, 49, 96, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[26609, 789, 787, 20, 30, "Input"],
Cell[27399, 811, 4005, 119, 228, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[31441, 935, 505, 11, 30, "Input"],
Cell[31949, 948, 3363, 99, 216, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[35349, 1052, 343, 9, 30, "Input"],
Cell[35695, 1063, 3889, 115, 307, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[39621, 1183, 576, 17, 30, "Input"],
Cell[40200, 1202, 2773, 77, 185, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[43010, 1284, 405, 10, 30, "Input"],
Cell[43418, 1296, 3433, 100, 157, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[46888, 1401, 735, 17, 30, "Input"],
Cell[47626, 1420, 4934, 144, 292, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[52597, 1569, 319, 7, 30, "Input"],
Cell[52919, 1578, 4684, 136, 292, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[57640, 1719, 281, 6, 30, "Input"],
Cell[57924, 1727, 4233, 123, 223, "Output"]
}, Open  ]],
Cell[62172, 1853, 4840, 127, 283, "Input"],
Cell[67015, 1982, 241, 4, 30, "Input"],
Cell[CellGroupData[{
Cell[67281, 1990, 2237, 46, 240, "Input"],
Cell[69521, 2038, 54202, 913, 336, "Output"]
}, Open  ]],
Cell[123738, 2954, 172, 3, 88, "Input"],
Cell[123913, 2959, 271, 9, 10, "Text"],
Cell[124187, 2970, 290, 5, 30, "Input"],
Cell[124480, 2977, 325, 7, 50, "Input"],
Cell[CellGroupData[{
Cell[124830, 2988, 807, 20, 55, "Input"],
Cell[125640, 3010, 921, 23, 62, "Output"]
}, Open  ]],
Cell[126576, 3036, 256, 5, 30, "Input"],
Cell[CellGroupData[{
Cell[126857, 3045, 620, 13, 50, "Input"],
Cell[127480, 3060, 813, 19, 56, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[128330, 3084, 706, 13, 30, "Input"],
Cell[129039, 3099, 932, 19, 56, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[130008, 3123, 410, 10, 30, "Input"],
Cell[130421, 3135, 1296, 36, 84, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[131754, 3176, 579, 12, 30, "Input"],
Cell[132336, 3190, 1054, 26, 67, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[133427, 3221, 363, 9, 30, "Input"],
Cell[133793, 3232, 796, 26, 114, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[134626, 3263, 597, 17, 30, "Input"],
Cell[135226, 3282, 546, 18, 49, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[135809, 3305, 1001, 18, 30, "Input"],
Cell[136813, 3325, 1706, 44, 63, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[138556, 3374, 503, 10, 30, "Input"],
Cell[139062, 3386, 628, 20, 76, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[139727, 3411, 588, 12, 30, "Input"],
Cell[140318, 3425, 430, 13, 59, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[140785, 3443, 466, 11, 30, "Input"],
Cell[141254, 3456, 762, 21, 114, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[142053, 3482, 775, 20, 30, "Input"],
Cell[142831, 3504, 590, 18, 67, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[143458, 3527, 1048, 18, 30, "Input"],
Cell[144509, 3547, 1184, 36, 49, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[145730, 3588, 387, 7, 30, "Input"],
Cell[146120, 3597, 603, 19, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[146760, 3621, 343, 8, 30, "Input"],
Cell[147106, 3631, 627, 20, 50, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[147770, 3656, 787, 20, 30, "Input"],
Cell[148560, 3678, 2201, 68, 125, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[150798, 3751, 505, 11, 30, "Input"],
Cell[151306, 3764, 1753, 54, 100, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[153096, 3823, 343, 9, 30, "Input"],
Cell[153442, 3834, 2100, 64, 174, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[155579, 3903, 576, 17, 30, "Input"],
Cell[156158, 3922, 1466, 44, 83, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[157661, 3971, 405, 10, 30, "Input"],
Cell[158069, 3983, 969, 30, 49, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[159075, 4018, 735, 17, 30, "Input"],
Cell[159813, 4037, 1786, 55, 129, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[161636, 4097, 319, 7, 30, "Input"],
Cell[161958, 4106, 1592, 49, 129, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[163587, 4160, 296, 6, 30, "Input"],
Cell[163886, 4168, 687, 20, 63, "Output"]
}, Open  ]],
Cell[164588, 4191, 1292, 29, 78, "Input"],
Cell[165883, 4222, 241, 4, 30, "Input"],
Cell[CellGroupData[{
Cell[166149, 4230, 2237, 46, 240, "Input"],
Cell[168389, 4278, 33005, 566, 357, "Output"]
}, Open  ]],
Cell[201409, 4847, 270, 9, 10, "Text"],
Cell[201682, 4858, 290, 5, 30, "Input"],
Cell[201975, 4865, 325, 7, 50, "Input"],
Cell[CellGroupData[{
Cell[202325, 4876, 807, 20, 55, "Input"],
Cell[203135, 4898, 943, 23, 62, "Output"]
}, Open  ]],
Cell[204093, 4924, 298, 5, 30, "Input"],
Cell[CellGroupData[{
Cell[204416, 4933, 620, 13, 50, "Input"],
Cell[205039, 4948, 885, 21, 58, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[205961, 4974, 706, 13, 30, "Input"],
Cell[206670, 4989, 1103, 26, 59, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[207810, 5020, 410, 10, 30, "Input"],
Cell[208223, 5032, 1427, 40, 86, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[209687, 5077, 579, 12, 30, "Input"],
Cell[210269, 5091, 1176, 30, 69, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[211482, 5126, 363, 9, 30, "Input"],
Cell[211848, 5137, 982, 33, 114, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[212867, 5175, 597, 17, 30, "Input"],
Cell[213467, 5194, 778, 27, 38, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[214282, 5226, 1001, 18, 30, "Input"],
Cell[215286, 5246, 1071, 22, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[216394, 5273, 503, 10, 30, "Input"],
Cell[216900, 5285, 654, 21, 76, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[217591, 5311, 588, 12, 30, "Input"],
Cell[218182, 5325, 430, 13, 59, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[218649, 5343, 466, 11, 30, "Input"],
Cell[219118, 5356, 762, 21, 114, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[219917, 5382, 775, 20, 30, "Input"],
Cell[220695, 5404, 590, 18, 67, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[221322, 5427, 1048, 18, 30, "Input"],
Cell[222373, 5447, 1184, 36, 49, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[223594, 5488, 387, 7, 30, "Input"],
Cell[223984, 5497, 677, 21, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[224698, 5523, 343, 8, 30, "Input"],
Cell[225044, 5533, 677, 21, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[225758, 5559, 787, 20, 30, "Input"],
Cell[226548, 5581, 2226, 71, 130, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[228811, 5657, 505, 11, 30, "Input"],
Cell[229319, 5670, 1806, 58, 110, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[231162, 5733, 343, 9, 30, "Input"],
Cell[231508, 5744, 2197, 70, 175, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[233742, 5819, 576, 17, 30, "Input"],
Cell[234321, 5838, 1331, 43, 78, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[235689, 5886, 405, 10, 30, "Input"],
Cell[236097, 5898, 1342, 43, 78, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[237476, 5946, 735, 17, 30, "Input"],
Cell[238214, 5965, 2572, 83, 137, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[240823, 6053, 377, 8, 30, "Input"],
Cell[241203, 6063, 2253, 72, 112, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[243493, 6140, 395, 8, 30, "Input"],
Cell[243891, 6150, 1245, 38, 69, "Output"]
}, Open  ]],
Cell[245151, 6191, 1894, 47, 83, "Input"],
Cell[247048, 6240, 241, 4, 30, "Input"],
Cell[CellGroupData[{
Cell[247314, 6248, 2286, 47, 240, "Input"],
Cell[249603, 6297, 105289, 1753, 375, 69480, 1164, "CachedBoxData", \
"BoxData", "Output"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
