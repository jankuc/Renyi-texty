(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    430511,       9487]
NotebookOptionsPosition[    420607,       9156]
NotebookOutlinePosition[    421150,       9176]
CellTagsIndexPosition[    421107,       9173]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"Weibull", ":"}]], "Input",
 CellChangeTimes->{{3.543684992882703*^9, 3.543684994655665*^9}, {
  3.544320894879453*^9, 3.544320906231942*^9}, {3.544321013728986*^9, 
  3.544321015677552*^9}, {3.546149536487394*^9, 3.546149537999375*^9}},
 EmphasizeSyntaxErrors->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"ClearAll", "[", 
   RowBox[{"\[Alpha]", ",", "\[Sigma]", ",", "\[Mu]", ",", "x"}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.54613653746201*^9, 3.546136542655197*^9}, {
  3.546136596080742*^9, 3.546136617338891*^9}, {3.546139146090529*^9, 
  3.546139146249962*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p", " ", "=", " ", 
  RowBox[{
   FractionBox["k", "\[Lambda]"], 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
    RowBox[{"k", "-", "1"}]]}]}]], "Input",
 CellChangeTimes->{{3.543684783475436*^9, 3.543684946824956*^9}, 
   3.543685129663494*^9, {3.544295734613175*^9, 3.54429574288267*^9}, {
   3.54429580082901*^9, 3.54429582329368*^9}, {3.544320780873962*^9, 
   3.544320785346142*^9}, 3.544320837287442*^9, {3.544320881922005*^9, 
   3.54432088239278*^9}, {3.54432100764836*^9, 3.544321019573801*^9}, 
   3.546149541553032*^9}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", "k", 
   " ", 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
    RowBox[{
     RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"]], "Output",
 CellChangeTimes->{
  3.544320837880473*^9, {3.544320883580563*^9, 3.544320911227469*^9}, 
   3.545309803843712*^9, 3.546016483142384*^9, 3.546017657044242*^9, 
   3.546060076762132*^9, 3.546060141670154*^9, 3.546060377463162*^9, 
   3.546061431182232*^9, 3.54606188717779*^9, 3.546071462150901*^9, 
   3.546136812639187*^9, 3.546138975120109*^9, 3.546148046460689*^9, 
   3.546149544392845*^9, 3.546151403683482*^9, {3.54623018096315*^9, 
   3.546230186401331*^9}, 3.554124823373607*^9, 3.554125865604088*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Theta]", " ", "=", " ", "k"}], ";"}]], "Input",
 CellChangeTimes->{{3.546137329720142*^9, 3.546137340576589*^9}, {
  3.546149548558869*^9, 3.546149554463107*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"ss", " ", "=", " ", 
   RowBox[{"FullSimplify", "[", 
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{"Log", "[", "p", "]"}], ",", "\[Theta]"}], "]"}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.543684996758039*^9, 3.543685116992625*^9}, {
   3.543685161495624*^9, 3.543685164824434*^9}, {3.543685617602922*^9, 
   3.543685622261405*^9}, {3.544295746546906*^9, 3.544295827428027*^9}, {
   3.544295874222879*^9, 3.544295884036298*^9}, 3.546016486016091*^9, {
   3.54601942039296*^9, 3.546019421197285*^9}, {3.546137342783463*^9, 
   3.54613734607702*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"1", "-", 
   RowBox[{"k", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        FractionBox[
         RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], ")"}], " ", 
    RowBox[{"Log", "[", 
     FractionBox[
      RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], "]"}]}]}], "k"]], "Output",
 CellChangeTimes->{
  3.544295884678365*^9, 3.545309805435313*^9, 3.546016487855942*^9, 
   3.546017670089106*^9, 3.546019421888676*^9, 3.546059377336055*^9, 
   3.546060078214513*^9, {3.546060139149627*^9, 3.546060144271088*^9}, 
   3.546060382291988*^9, 3.546061435830015*^9, 3.546061887191896*^9, 
   3.546071462301595*^9, 3.546136812733527*^9, {3.546137347255125*^9, 
   3.546137353812429*^9}, 3.54613897527059*^9, 3.546148046689522*^9, 
   3.546149558534132*^9, 3.546232064476071*^9, 3.554124824098476*^9, 
   3.554125865785223*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ss", "'"}], " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"D", "[", 
    RowBox[{"ss", ",", "\[Theta]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.543685180126496*^9, 3.543685298634426*^9}, {
   3.543685431540192*^9, 3.543685489527895*^9}, 3.543685534481716*^9, {
   3.543685624867701*^9, 3.543685665571384*^9}, {3.543688058809387*^9, 
   3.543688137132826*^9}, {3.54368832453227*^9, 3.543688330973921*^9}, {
   3.544295753339424*^9, 3.544295760783175*^9}, {3.544295853271568*^9, 
   3.544295889194162*^9}, {3.546016489095013*^9, 3.54601649563242*^9}, {
   3.546019427600456*^9, 3.546019428430676*^9}, {3.54613735651055*^9, 
   3.546137357241563*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox["1", 
    SuperscriptBox["k", "2"]]}], "-", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"], " ", 
   SuperscriptBox[
    RowBox[{"Log", "[", 
     FractionBox[
      RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], "]"}], "2"]}]}]], "Output",
 CellChangeTimes->{{3.543685658802668*^9, 3.54368566906248*^9}, {
   3.54368807593941*^9, 3.543688142568622*^9}, 3.543688332640362*^9, {
   3.54429586658533*^9, 3.544295890282246*^9}, 3.545309806594238*^9, {
   3.54601648969558*^9, 3.546016496189694*^9}, 3.546017677241552*^9, 
   3.546019429586647*^9, 3.546059378810901*^9, 3.546060079358672*^9, 
   3.546060145605671*^9, 3.546060384883913*^9, 3.546061436928236*^9, 
   3.546061887206539*^9, 3.546071462474284*^9, 3.546136812904919*^9, 
   3.546137359182575*^9, 3.546138975369357*^9, 3.546148046818373*^9, 
   3.546149560252101*^9, 3.54623206886184*^9, 3.554124824250654*^9, 
   3.554125865995926*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"p", "^", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}], "*", "ss"}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.546016522942259*^9, 3.546016539967992*^9}, {
   3.546017704408171*^9, 3.546017705125968*^9}, 3.546019441035926*^9, {
   3.546019471091529*^9, 3.546019479505023*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", 
         SuperscriptBox[
          RowBox[{"(", 
           FractionBox[
            RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", 
       "k", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         FractionBox[
          RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
    RowBox[{"1", "+", "\[Alpha]"}]], " ", 
   RowBox[{"(", 
    RowBox[{"1", "-", 
     RowBox[{"k", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SuperscriptBox[
         RowBox[{"(", 
          FractionBox[
           RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], ")"}], 
      " ", 
      RowBox[{"Log", "[", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], "]"}]}]}], ")"}]}], 
  "k"]], "Output",
 CellChangeTimes->{
  3.546016544655516*^9, {3.546017682666078*^9, 3.546017707524088*^9}, 
   3.546019442560441*^9, 3.546019480115117*^9, 3.546060081264836*^9, 
   3.546060146559043*^9, 3.546060400916709*^9, 3.546061439971061*^9, 
   3.546061887221677*^9, 3.546071464395533*^9, 3.546136814598201*^9, 
   3.546137368746807*^9, 3.546138977048079*^9, 3.54614804861861*^9, 
   3.546149564604638*^9, 3.546149648173352*^9, 3.546232072442872*^9, 
   3.554124825685968*^9, 3.554125867075418*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"csIntCitatel1", "/.", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], "\[Rule]", " ", 
     RowBox[{"y", "*", "\[Lambda]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016644463204*^9, 3.546016698494855*^9}, {
  3.546017718072268*^9, 3.546017718824221*^9}, {3.546019484592136*^9, 
  3.546019489873669*^9}, {3.5460588628943*^9, 3.546058863025369*^9}, {
  3.546058985559764*^9, 3.54605898695691*^9}, {3.546149570336845*^9, 
  3.546149571255931*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", 
         SuperscriptBox["y", "k"]}]], " ", "k", " ", 
       SuperscriptBox["y", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
    RowBox[{"1", "+", "\[Alpha]"}]], " ", 
   RowBox[{"(", 
    RowBox[{"1", "-", 
     RowBox[{"k", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SuperscriptBox["y", "k"]}], ")"}], " ", 
      RowBox[{"Log", "[", "y", "]"}]}]}], ")"}]}], "k"]], "Output",
 CellChangeTimes->{
  3.546016699867985*^9, {3.54601771087677*^9, 3.546017720075646*^9}, 
   3.546019451857504*^9, 3.54601949082593*^9, 3.546058865086693*^9, 
   3.546058991110302*^9, 3.546059305292639*^9, {3.546060081368136*^9, 
   3.546060082414614*^9}, 3.546060147815039*^9, 3.546060407046361*^9, 
   3.546061531311124*^9, 3.546061887295093*^9, 3.546071465443946*^9, 
   3.546136815322759*^9, 3.546137371159345*^9, 3.546138977799651*^9, 
   3.546148049399068*^9, 3.546149656219562*^9, 3.546232076199355*^9, 
   3.554124826345241*^9, 3.554125867859221*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel3", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"csIntCitatel2", "*", "\[Lambda]"}], "/.", 
    RowBox[{"y", "\[Rule]", " ", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{"1", "/", "k"}], ")"}]}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232088390435*^9, 3.546232095185625*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", 
         SuperscriptBox[
          RowBox[{"(", 
           SuperscriptBox["t", 
            FractionBox["1", "k"]], ")"}], "k"]}]], " ", "k", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         SuperscriptBox["t", 
          FractionBox["1", "k"]], ")"}], 
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
    RowBox[{"1", "+", "\[Alpha]"}]], " ", "\[Lambda]", " ", 
   RowBox[{"(", 
    RowBox[{"1", "-", 
     RowBox[{"k", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SuperscriptBox[
         RowBox[{"(", 
          SuperscriptBox["t", 
           FractionBox["1", "k"]], ")"}], "k"]}], ")"}], " ", 
      RowBox[{"Log", "[", 
       SuperscriptBox["t", 
        FractionBox["1", "k"]], "]"}]}]}], ")"}]}], "k"]], "Output",
 CellChangeTimes->{3.546232100824901*^9, 3.554124827447808*^9, 
  3.554125868654988*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel4", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"csIntCitatel3", "/", "k"}], "*", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "k"}], ")"}], "/", "k"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232112593013*^9, 3.546232125917882*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", "t"}]], " ", 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", "t"}]], " ", "k", " ", 
       SuperscriptBox["t", 
        FractionBox[
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}], "k"]]}], "\[Lambda]"], ")"}], 
    "\[Alpha]"], " ", 
   RowBox[{"(", 
    RowBox[{"1", "+", 
     RowBox[{"Log", "[", "t", "]"}], "-", 
     RowBox[{"t", " ", 
      RowBox[{"Log", "[", "t", "]"}]}]}], ")"}]}], "k"]], "Output",
 CellChangeTimes->{3.546232131595805*^9, 3.554124828633268*^9, 
  3.554125869546646*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel5", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"Integrate", "[", 
    RowBox[{"csIntCitatel4", ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "\[Infinity]"}], "}"}]}], "]"}], "]"}], 
  " "}]], "Input",
 CellChangeTimes->{{3.546016758763041*^9, 3.546016792970542*^9}, {
  3.546017733204061*^9, 3.546017740186443*^9}, {3.546017914630278*^9, 
  3.546017915139312*^9}, {3.54601813955664*^9, 3.546018141998787*^9}, {
  3.546019493851544*^9, 3.546019499184226*^9}, {3.546058803868124*^9, 
  3.546058826478995*^9}, {3.546058870461028*^9, 3.546058872003744*^9}, {
  3.546059018757644*^9, 3.546059019951728*^9}, {3.546059209756854*^9, 
  3.546059224271504*^9}, {3.546060118428053*^9, 3.546060118951836*^9}, {
  3.546060429719045*^9, 3.546060435859049*^9}, {3.54606155661684*^9, 
  3.546061556750753*^9}, {3.54606187684573*^9, 3.546061879156262*^9}, {
  3.546149679351288*^9, 3.546149686924944*^9}, {3.546232153175871*^9, 
  3.54623216243717*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"\[Alpha]", " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
      RowBox[{
       RowBox[{"-", "2"}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}]}]], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox["k", "\[Lambda]"], ")"}], "\[Alpha]"], " ", 
     RowBox[{"Gamma", "[", 
      RowBox[{"1", "+", "\[Alpha]", "-", 
       FractionBox["\[Alpha]", "k"]}], "]"}], " ", 
     RowBox[{"(", 
      RowBox[{"k", "-", 
       RowBox[{"Log", "[", 
        RowBox[{"1", "+", "\[Alpha]"}], "]"}], "+", 
       RowBox[{"PolyGamma", "[", 
        RowBox[{"0", ",", 
         RowBox[{"1", "+", "\[Alpha]", "-", 
          FractionBox["\[Alpha]", "k"]}]}], "]"}]}], ")"}]}], 
    SuperscriptBox["k", "2"]], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", 
      FractionBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}], "k"], 
      "]"}], "\[GreaterEqual]", 
     RowBox[{"-", "1"}]}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.546016797608153*^9, 3.546017744115164*^9, {3.546017901155742*^9, 
   3.546017918255887*^9}, 3.54601814479272*^9, 3.5460194592406*^9, 
   3.546019501847466*^9, 3.546058816227488*^9, 3.546058858910903*^9, 
   3.546058988908802*^9, 3.546059027020108*^9, {3.546059207468971*^9, 
   3.546059213730049*^9}, 3.546059311153677*^9, 3.54606008545984*^9, {
   3.546060121584368*^9, 3.54606015090936*^9}, 3.546060482353594*^9, 
   3.546061561105924*^9, 3.546061888934606*^9, 3.546071469576597*^9, 
   3.546136819048198*^9, 3.546137375365945*^9, 3.546138981516168*^9, 
   3.546148053135883*^9, 3.546150578307016*^9, 3.5462322891228228`*^9, 
   3.554124959908049*^9, 3.554126003491012*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"p", "^", 
    RowBox[{"(", 
     RowBox[{"1", "+", "\[Alpha]"}], ")"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016812881654*^9, 3.546016818147665*^9}, {
  3.546016886250683*^9, 3.546016904857094*^9}, {3.546018151081055*^9, 
  3.546018151902321*^9}, {3.546019505441384*^9, 3.546019506907304*^9}, {
  3.546059876912032*^9, 3.546059883931349*^9}, {3.546060057180457*^9, 
  3.546060062381365*^9}}],

Cell[BoxData[
 SuperscriptBox[
  RowBox[{"(", 
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       SuperscriptBox[
        RowBox[{"(", 
         FractionBox[
          RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", "k",
      " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
  RowBox[{"1", "+", "\[Alpha]"}]]], "Output",
 CellChangeTimes->{3.546230203148988*^9, 3.554124960246277*^9, 
  3.554126003630607*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"csIntJmenovatel1", "/.", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], "\[Rule]", " ", 
     RowBox[{"y", "*", "\[Lambda]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016918820028*^9, 3.546016933459735*^9}, {
  3.546018162034847*^9, 3.546018162802109*^9}, {3.546019511970786*^9, 
  3.546019518337126*^9}, {3.546059893179542*^9, 3.546059893847781*^9}, {
  3.546060047266137*^9, 3.546060052681203*^9}, {3.546230217034243*^9, 
  3.546230217998498*^9}}],

Cell[BoxData[
 SuperscriptBox[
  RowBox[{"(", 
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       SuperscriptBox["y", "k"]}]], " ", "k", " ", 
     SuperscriptBox["y", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
  RowBox[{"1", "+", "\[Alpha]"}]]], "Output",
 CellChangeTimes->{{3.546230207442299*^9, 3.546230219675734*^9}, 
   3.554124960322561*^9, 3.554126003743395*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel3", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"csIntJmenovatel2", "*", "\[Lambda]"}], "/.", 
    RowBox[{"y", "\[Rule]", " ", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{"1", "/", "k"}], ")"}]}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.54623072884787*^9, 3.546230785760333*^9}, {
  3.546231604373572*^9, 3.546231605426678*^9}, {3.546231716620151*^9, 
  3.546231717085787*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", 
        SuperscriptBox[
         RowBox[{"(", 
          SuperscriptBox["t", 
           FractionBox["1", "k"]], ")"}], "k"]}]], " ", "k", " ", 
      SuperscriptBox[
       RowBox[{"(", 
        SuperscriptBox["t", 
         FractionBox["1", "k"]], ")"}], 
       RowBox[{
        RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
   RowBox[{"1", "+", "\[Alpha]"}]], " ", "\[Lambda]"}]], "Output",
 CellChangeTimes->{{3.546230757338739*^9, 3.546230786864854*^9}, 
   3.54623122497391*^9, 3.546231390679448*^9, 3.546231620590633*^9, 
   3.546231718726483*^9, 3.546231912776218*^9, 3.554124960707793*^9, 
   3.554126004060839*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel4", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"csIntJmenovatel3", "/", "k"}], "*", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "k"}], ")"}], "/", "k"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546231135452288*^9, 3.546231187522384*^9}, 
   3.546231380041735*^9, {3.546231608893195*^9, 3.546231609558657*^9}, {
   3.546231727310628*^9, 3.546231732399831*^9}, {3.546231878599405*^9, 
   3.546231893664122*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"-", "t"}]], " ", 
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", "t"}]], " ", "k", " ", 
      SuperscriptBox["t", 
       FractionBox[
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}], "k"]]}], "\[Lambda]"], ")"}], 
   "\[Alpha]"]}]], "Output",
 CellChangeTimes->{
  3.5462311903916*^9, 3.54623123012743*^9, 3.546231393222635*^9, 
   3.546231736337671*^9, {3.546231899759423*^9, 3.546231920689016*^9}, 
   3.554124960999412*^9, 3.554126004391079*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel5", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"Integrate", "[", 
    RowBox[{"csIntJmenovatel4", ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "\[Infinity]"}], "}"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.546017079018856*^9, 3.546017090969569*^9}, {
  3.546018190056803*^9, 3.546018190821094*^9}, {3.546059043677427*^9, 
  3.54605904460088*^9}, {3.546059403368323*^9, 3.546059411524818*^9}, {
  3.546059479614725*^9, 3.546059492483282*^9}, {3.546059617399394*^9, 
  3.546059617680817*^9}, {3.546059915271946*^9, 3.546059916341114*^9}, {
  3.546060024912348*^9, 3.546060025553251*^9}, {3.546061569414866*^9, 
  3.546061603372963*^9}, {3.54606187218996*^9, 3.546061873288195*^9}, {
  3.546230234851797*^9, 3.546230235704077*^9}, {3.54623031496448*^9, 
  3.546230316811469*^9}, {3.546230894174747*^9, 3.54623093187054*^9}, {
  3.546231021434708*^9, 3.546231058033388*^9}, {3.546231204938011*^9, 
  3.546231254795637*^9}, {3.54623130518147*^9, 3.546231317577529*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}]}]], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      FractionBox["k", "\[Lambda]"], ")"}], "\[Alpha]"], " ", 
    RowBox[{"Gamma", "[", 
     RowBox[{"1", "+", "\[Alpha]", "-", 
      FractionBox["\[Alpha]", "k"]}], "]"}]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.546230539424707*^9, 3.546230928296439*^9, 3.546231130736478*^9, 
   3.546231217042055*^9, {3.546231310240832*^9, 3.546231332557165*^9}, 
   3.546231408953687*^9, 3.546231758805175*^9, 3.546231931318572*^9, 
   3.55412497644567*^9, 3.55412602044187*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cs", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"csIntCitatel5", "/", "csIntJmenovatel5"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546017159619789*^9, 3.546017171553549*^9}, {
   3.546018198699244*^9, 3.54601820322215*^9}, 3.546061584597621*^9, {
   3.546061615263666*^9, 3.546061627686996*^9}, {3.546232301287677*^9, 
   3.546232306940481*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"\[Alpha]", " ", 
     RowBox[{"(", 
      RowBox[{"k", "-", 
       RowBox[{"Log", "[", 
        RowBox[{"1", "+", "\[Alpha]"}], "]"}], "+", 
       RowBox[{"PolyGamma", "[", 
        RowBox[{"0", ",", 
         RowBox[{"1", "+", "\[Alpha]", "-", 
          FractionBox["\[Alpha]", "k"]}]}], "]"}]}], ")"}]}], 
    RowBox[{
     SuperscriptBox["k", "2"], " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", 
      FractionBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}], "k"], 
      "]"}], "\[GreaterEqual]", 
     RowBox[{"-", "1"}]}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232321705469*^9, 3.554124976721383*^9, 
  3.554126020597159*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"cs", "'"}], " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"D", "[", 
    RowBox[{"cs", ",", "\[Theta]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546017177523059*^9, 3.546017189050696*^9}, {
  3.546018219369372*^9, 3.546018251272656*^9}, {3.546137392518803*^9, 
  3.546137393253288*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"\[Alpha]", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "k"}], " ", 
        RowBox[{"(", 
         RowBox[{"k", "-", 
          RowBox[{"2", " ", 
           RowBox[{"Log", "[", 
            RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
          RowBox[{"2", " ", 
           RowBox[{"PolyGamma", "[", 
            RowBox[{"0", ",", 
             RowBox[{"1", "+", "\[Alpha]", "-", 
              FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], "+", 
       RowBox[{"\[Alpha]", " ", 
        RowBox[{"PolyGamma", "[", 
         RowBox[{"1", ",", 
          RowBox[{"1", "+", "\[Alpha]", "-", 
           FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], 
    RowBox[{
     SuperscriptBox["k", "4"], " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", 
      FractionBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}], "k"], 
      "]"}], "\[GreaterEqual]", 
     RowBox[{"-", "1"}]}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232329374177*^9, 3.554124977154078*^9, 
  3.554126021083231*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia", " ", "=", 
  RowBox[{"FullSimplify", "[", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"ss", "'"}], " ", "-", " ", 
      RowBox[{"cs", "'"}], "-", 
      RowBox[{"\[Alpha]", 
       RowBox[{"(", 
        RowBox[{"ss", "-", "cs"}], ")"}], 
       RowBox[{"(", 
        RowBox[{"cs", "-", "ss"}], ")"}]}]}], ")"}], "*", 
    RowBox[{"p", "^", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016927559429*^9, 3.546016927697169*^9}, {
   3.546017069821145*^9, 3.546017085073989*^9}, 3.546017230368702*^9, {
   3.546017453638702*^9, 3.546017454633499*^9}, {3.546017487540381*^9, 
   3.546017511750122*^9}, 3.546060275246113*^9, {3.546060594894228*^9, 
   3.546060607304117*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      FractionBox[
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"-", 
          SuperscriptBox[
           RowBox[{"(", 
            FractionBox[
             RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", 
        "k", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          FractionBox[
           RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
     RowBox[{"1", "+", "\[Alpha]"}]], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", 
        SuperscriptBox["k", "2"]]}], "-", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         FractionBox[
          RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"], " ", 
       SuperscriptBox[
        RowBox[{"Log", "[", 
         FractionBox[
          RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], "]"}], "2"]}], "+", 
      FractionBox[
       RowBox[{"\[Alpha]", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "\[Alpha]"}], " ", 
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              RowBox[{"k", " ", 
               RowBox[{"(", 
                RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", "1"}], "+", 
                 SuperscriptBox[
                  RowBox[{"(", 
                   FractionBox[
                    RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], 
                ")"}], " ", 
               RowBox[{"Log", "[", 
                FractionBox[
                 RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], "]"}]}]}], 
             ")"}]}], "+", 
           RowBox[{"\[Alpha]", " ", 
            RowBox[{"PolyGamma", "[", 
             RowBox[{"0", ",", 
              RowBox[{"1", "+", "\[Alpha]", "-", 
               FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}], "2"]}], 
       RowBox[{
        SuperscriptBox["k", "4"], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"]}]], "+", 
      FractionBox[
       RowBox[{"\[Alpha]", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"k", " ", 
           RowBox[{"(", 
            RowBox[{"k", "-", 
             RowBox[{"2", " ", 
              RowBox[{"Log", "[", 
               RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
             RowBox[{"2", " ", 
              RowBox[{"PolyGamma", "[", 
               RowBox[{"0", ",", 
                RowBox[{"1", "+", "\[Alpha]", "-", 
                 FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], "-", 
          RowBox[{"\[Alpha]", " ", 
           RowBox[{"PolyGamma", "[", 
            RowBox[{"1", ",", 
             RowBox[{"1", "+", "\[Alpha]", "-", 
              FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], 
       RowBox[{
        SuperscriptBox["k", "4"], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]}], ")"}]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", 
      FractionBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}], "k"], 
      "]"}], "\[GreaterEqual]", 
     RowBox[{"-", "1"}]}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232363544007*^9, 3.554125005987716*^9, 
  3.554126050731914*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"Ia", "/.", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], "\[Rule]", 
     RowBox[{"y", "*", "\[Lambda]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016832069324*^9, 3.54601683491256*^9}, {
  3.546016912126374*^9, 3.546016916727737*^9}, {3.546017322178493*^9, 
  3.546017372508301*^9}, {3.546017463020216*^9, 3.54601752428375*^9}, {
  3.546232394685446*^9, 3.546232395694052*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      FractionBox[
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"-", 
          SuperscriptBox["y", "k"]}]], " ", "k", " ", 
        SuperscriptBox["y", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
     RowBox[{"1", "+", "\[Alpha]"}]], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", 
        SuperscriptBox["k", "2"]]}], "-", 
      RowBox[{
       SuperscriptBox["y", "k"], " ", 
       SuperscriptBox[
        RowBox[{"Log", "[", "y", "]"}], "2"]}], "+", 
      FractionBox[
       RowBox[{"\[Alpha]", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              RowBox[{"k", " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", "1"}], "+", 
                 SuperscriptBox["y", "k"]}], ")"}], " ", 
               RowBox[{"(", 
                RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
               RowBox[{"Log", "[", "y", "]"}]}]}], ")"}]}], "-", 
           RowBox[{"\[Alpha]", " ", 
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
           RowBox[{"\[Alpha]", " ", 
            RowBox[{"PolyGamma", "[", 
             RowBox[{"0", ",", 
              RowBox[{"1", "+", "\[Alpha]", "-", 
               FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}], "2"]}], 
       RowBox[{
        SuperscriptBox["k", "4"], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"]}]], "+", 
      FractionBox[
       RowBox[{"\[Alpha]", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"k", " ", 
           RowBox[{"(", 
            RowBox[{"k", "-", 
             RowBox[{"2", " ", 
              RowBox[{"Log", "[", 
               RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
             RowBox[{"2", " ", 
              RowBox[{"PolyGamma", "[", 
               RowBox[{"0", ",", 
                RowBox[{"1", "+", "\[Alpha]", "-", 
                 FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], "-", 
          RowBox[{"\[Alpha]", " ", 
           RowBox[{"PolyGamma", "[", 
            RowBox[{"1", ",", 
             RowBox[{"1", "+", "\[Alpha]", "-", 
              FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], 
       RowBox[{
        SuperscriptBox["k", "4"], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]}], ")"}]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", 
      FractionBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}], "k"], 
      "]"}], "\[GreaterEqual]", 
     RowBox[{"-", "1"}]}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{{3.546232392215838*^9, 3.546232413442848*^9}, 
   3.554125021209639*^9, 3.554126065939538*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"Ia1", "*", "\[Lambda]"}], "/.", 
    RowBox[{"y", "\[Rule]", " ", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{"1", "/", "k"}], ")"}]}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232427015182*^9, 3.546232435156028*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      FractionBox[
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"-", 
          SuperscriptBox[
           RowBox[{"(", 
            SuperscriptBox["t", 
             FractionBox["1", "k"]], ")"}], "k"]}]], " ", "k", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          SuperscriptBox["t", 
           FractionBox["1", "k"]], ")"}], 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
     RowBox[{"1", "+", "\[Alpha]"}]], " ", "\[Lambda]", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", 
        SuperscriptBox["k", "2"]]}], "-", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         SuperscriptBox["t", 
          FractionBox["1", "k"]], ")"}], "k"], " ", 
       SuperscriptBox[
        RowBox[{"Log", "[", 
         SuperscriptBox["t", 
          FractionBox["1", "k"]], "]"}], "2"]}], "+", 
      FractionBox[
       RowBox[{"\[Alpha]", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              RowBox[{"k", " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", "1"}], "+", 
                 SuperscriptBox[
                  RowBox[{"(", 
                   SuperscriptBox["t", 
                    FractionBox["1", "k"]], ")"}], "k"]}], ")"}], " ", 
               RowBox[{"(", 
                RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
               RowBox[{"Log", "[", 
                SuperscriptBox["t", 
                 FractionBox["1", "k"]], "]"}]}]}], ")"}]}], "-", 
           RowBox[{"\[Alpha]", " ", 
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
           RowBox[{"\[Alpha]", " ", 
            RowBox[{"PolyGamma", "[", 
             RowBox[{"0", ",", 
              RowBox[{"1", "+", "\[Alpha]", "-", 
               FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}], "2"]}], 
       RowBox[{
        SuperscriptBox["k", "4"], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"]}]], "+", 
      FractionBox[
       RowBox[{"\[Alpha]", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"k", " ", 
           RowBox[{"(", 
            RowBox[{"k", "-", 
             RowBox[{"2", " ", 
              RowBox[{"Log", "[", 
               RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
             RowBox[{"2", " ", 
              RowBox[{"PolyGamma", "[", 
               RowBox[{"0", ",", 
                RowBox[{"1", "+", "\[Alpha]", "-", 
                 FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], "-", 
          RowBox[{"\[Alpha]", " ", 
           RowBox[{"PolyGamma", "[", 
            RowBox[{"1", ",", 
             RowBox[{"1", "+", "\[Alpha]", "-", 
              FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], 
       RowBox[{
        SuperscriptBox["k", "4"], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]}], ")"}]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", 
      FractionBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}], "k"], 
      "]"}], "\[GreaterEqual]", 
     RowBox[{"-", "1"}]}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232478566571*^9, 3.554125041162726*^9, 
  3.554126087062014*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia3", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Ia2", "/", "k"}], "*", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "k"}], ")"}], "/", "k"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.54623247327657*^9, 3.546232478732023*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    FractionBox["1", 
     SuperscriptBox["k", "5"]], 
    RowBox[{
     SuperscriptBox["t", 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       FractionBox["1", "k"]}]], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", "t"}]], " ", "k", " ", 
         SuperscriptBox["t", 
          FractionBox[
           RowBox[{
            RowBox[{"-", "1"}], "+", "k"}], "k"]]}], "\[Lambda]"], ")"}], 
      RowBox[{"1", "+", "\[Alpha]"}]], " ", "\[Lambda]", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", 
        SuperscriptBox["k", "2"]}], "-", 
       RowBox[{
        SuperscriptBox["k", "2"], " ", "t", " ", 
        SuperscriptBox[
         RowBox[{"Log", "[", "t", "]"}], "2"]}], "+", 
       FractionBox[
        RowBox[{"\[Alpha]", " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"k", "-", 
            RowBox[{"k", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "1"}], "+", "t"}], ")"}], " ", 
             RowBox[{"(", 
              RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
             RowBox[{"Log", "[", "t", "]"}]}], "+", 
            RowBox[{"\[Alpha]", " ", 
             RowBox[{"Log", "[", 
              RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "-", 
            RowBox[{"\[Alpha]", " ", 
             RowBox[{"PolyGamma", "[", 
              RowBox[{"0", ",", 
               RowBox[{"1", "+", "\[Alpha]", "-", 
                FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}], "2"]}], 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"]], "+", 
       FractionBox[
        RowBox[{"\[Alpha]", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{"k", "-", 
              RowBox[{"2", " ", 
               RowBox[{"Log", "[", 
                RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
              RowBox[{"2", " ", 
               RowBox[{"PolyGamma", "[", 
                RowBox[{"0", ",", 
                 RowBox[{"1", "+", "\[Alpha]", "-", 
                  FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], "-", 
           RowBox[{"\[Alpha]", " ", 
            RowBox[{"PolyGamma", "[", 
             RowBox[{"1", ",", 
              RowBox[{"1", "+", "\[Alpha]", "-", 
               FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], 
        RowBox[{"1", "+", "\[Alpha]"}]]}], ")"}]}]}], ",", 
   RowBox[{
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}], ">", "\[Alpha]"}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232498458661*^9, 3.554125048505696*^9, 
  3.554126094475435*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia4", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"Integrate", "[", 
    RowBox[{"Ia3", ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "\[Infinity]"}], "}"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.546017553376211*^9, 3.546017578186591*^9}, {
  3.546060190028669*^9, 3.546060215541151*^9}, {3.546232494373554*^9, 
  3.546232519267088*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{"-", 
    RowBox[{
     FractionBox["1", 
      SuperscriptBox["k", "4"]], 
     RowBox[{
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
       RowBox[{
        RowBox[{"-", "3"}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", 
           FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}]}]], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        FractionBox["k", "\[Lambda]"], ")"}], "\[Alpha]"], " ", 
      RowBox[{"Gamma", "[", 
       RowBox[{"1", "+", "\[Alpha]", "-", 
        FractionBox["\[Alpha]", "k"]}], "]"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"k", "+", 
           RowBox[{
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "2"}], " ", "k"}], "+", 
              RowBox[{"2", " ", "\[Alpha]"}], "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"k", "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", 
                  "\[Alpha]"}]}], ")"}], " ", 
               RowBox[{"Log", "[", 
                RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}]}]}], ")"}]}],
         "-", 
        RowBox[{"2", " ", "k", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "k"}], "+", "\[Alpha]", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"k", "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], 
             ")"}], " ", 
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}], " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"0", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}], "+", 
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"k", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], 
          ")"}], " ", 
         SuperscriptBox[
          RowBox[{"PolyGamma", "[", 
           RowBox[{"0", ",", 
            RowBox[{"1", "+", "\[Alpha]", "-", 
             FractionBox["\[Alpha]", "k"]}]}], "]"}], "2"]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox["k", "2"], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "k", " ", 
            "\[Alpha]"}], "+", 
           SuperscriptBox["\[Alpha]", "2"]}], ")"}], " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"1", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}]}]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"k", "+", 
      RowBox[{"k", " ", "\[Alpha]"}]}], ">", "\[Alpha]"}], "&&", 
    RowBox[{"\[Alpha]", ">", 
     RowBox[{"-", "1"}]}], "&&", 
    RowBox[{"k", ">", "0"}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232723877207*^9, 3.554125232562294*^9, 
  3.554126263522407*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IF", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"-", 
     RowBox[{"Ia4", "^", 
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}]}]}], " ", "*", " ", 
    RowBox[{"(", 
     RowBox[{"p", "^", "\[Alpha]"}], ")"}], "*", 
    RowBox[{"(", 
     RowBox[{"ss", "-", "cs"}], ")"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546018347393014*^9, 3.546018403066614*^9}, {
   3.546018436099692*^9, 3.546018441274599*^9}, 3.546019614310392*^9, {
   3.546019656617135*^9, 3.546019704529838*^9}, {3.546057935083661*^9, 
   3.546057940051575*^9}, {3.546060690488888*^9, 3.546060692698881*^9}, {
   3.546136907926816*^9, 3.54613692580183*^9}, {3.546232739391533*^9, 
   3.546232740164084*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["k", "2"], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
       RowBox[{"2", "+", "\[Alpha]", "-", 
        FractionBox["\[Alpha]", "k"]}]], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        FractionBox["1", "\[Lambda]"], ")"}], 
       RowBox[{"-", "\[Alpha]"}]], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        FractionBox[
         RowBox[{
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"-", 
            SuperscriptBox[
             RowBox[{"(", 
              FractionBox[
               RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", 
          SuperscriptBox[
           RowBox[{"(", 
            FractionBox[
             RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
           RowBox[{
            RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
       "\[Alpha]"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"\[Alpha]", " ", 
         RowBox[{"Log", "[", 
          RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"1", "-", 
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                FractionBox[
                 RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], 
             ")"}], " ", 
            RowBox[{"Log", "[", 
             FractionBox[
              RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], "]"}]}]}], ")"}]}], 
        "-", 
        RowBox[{"\[Alpha]", " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"0", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], ")"}], "/", 
    
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Gamma", "[", 
       RowBox[{"1", "+", "\[Alpha]", "-", 
        FractionBox["\[Alpha]", "k"]}], "]"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"k", "+", 
           RowBox[{
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "2"}], " ", "k"}], "+", 
              RowBox[{"2", " ", "\[Alpha]"}], "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"k", "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", 
                  "\[Alpha]"}]}], ")"}], " ", 
               RowBox[{"Log", "[", 
                RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}]}]}], ")"}]}],
         "-", 
        RowBox[{"2", " ", "k", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "k"}], "+", "\[Alpha]", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"k", "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], 
             ")"}], " ", 
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}], " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"0", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}], "+", 
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"k", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], 
          ")"}], " ", 
         SuperscriptBox[
          RowBox[{"PolyGamma", "[", 
           RowBox[{"0", ",", 
            RowBox[{"1", "+", "\[Alpha]", "-", 
             FractionBox["\[Alpha]", "k"]}]}], "]"}], "2"]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox["k", "2"], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "k", " ", 
            "\[Alpha]"}], "+", 
           SuperscriptBox["\[Alpha]", "2"]}], ")"}], " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"1", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], ")"}]}], 
   ",", 
   RowBox[{
    RowBox[{"k", ">", "0"}], "&&", 
    RowBox[{
     RowBox[{"1", "+", "\[Alpha]"}], ">", "0"}], "&&", 
    RowBox[{"\[Alpha]", "<", 
     RowBox[{"k", "+", 
      RowBox[{"k", " ", "\[Alpha]"}]}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232757750575*^9, 3.554125244462411*^9, 
  3.55412627616335*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IF1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"IF", "/.", 
    RowBox[{"\[Mu]", "->", "0"}]}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.546017428290329*^9, {3.546018467395976*^9, 3.546018491191415*^9}, {
   3.546018587031472*^9, 3.546018597806486*^9}, 3.546157241026402*^9}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["k", "2"], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
       RowBox[{"2", "+", "\[Alpha]", "-", 
        FractionBox["\[Alpha]", "k"]}]], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        FractionBox[
         RowBox[{
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"-", 
            SuperscriptBox[
             RowBox[{"(", 
              FractionBox["x", "\[Lambda]"], ")"}], "k"]}]], " ", 
          SuperscriptBox[
           RowBox[{"(", 
            FractionBox["x", "\[Lambda]"], ")"}], "k"]}], "x"], ")"}], 
       "\[Alpha]"], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        FractionBox["1", "\[Lambda]"], ")"}], 
       RowBox[{"-", "\[Alpha]"}]], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"\[Alpha]", " ", 
         RowBox[{"Log", "[", 
          RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"1", "-", 
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                FractionBox["x", "\[Lambda]"], ")"}], "k"]}], ")"}], " ", 
            RowBox[{"Log", "[", 
             FractionBox["x", "\[Lambda]"], "]"}]}]}], ")"}]}], "-", 
        RowBox[{"\[Alpha]", " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"0", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], ")"}], "/", 
    
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Gamma", "[", 
       RowBox[{"1", "+", "\[Alpha]", "-", 
        FractionBox["\[Alpha]", "k"]}], "]"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"k", "+", 
           RowBox[{
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "2"}], " ", "k"}], "+", 
              RowBox[{"2", " ", "\[Alpha]"}], "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"k", "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", 
                  "\[Alpha]"}]}], ")"}], " ", 
               RowBox[{"Log", "[", 
                RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}]}]}], ")"}]}],
         "-", 
        RowBox[{"2", " ", "k", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "k"}], "+", "\[Alpha]", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"k", "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], 
             ")"}], " ", 
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}], " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"0", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}], "+", 
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"k", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], 
          ")"}], " ", 
         SuperscriptBox[
          RowBox[{"PolyGamma", "[", 
           RowBox[{"0", ",", 
            RowBox[{"1", "+", "\[Alpha]", "-", 
             FractionBox["\[Alpha]", "k"]}]}], "]"}], "2"]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox["k", "2"], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "k", " ", 
            "\[Alpha]"}], "+", 
           SuperscriptBox["\[Alpha]", "2"]}], ")"}], " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"1", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], ")"}]}], 
   ",", 
   RowBox[{
    RowBox[{"k", ">", "0"}], "&&", 
    RowBox[{
     RowBox[{"1", "+", "\[Alpha]"}], ">", "0"}], "&&", 
    RowBox[{"\[Alpha]", "<", 
     RowBox[{"k", "+", 
      RowBox[{"k", " ", "\[Alpha]"}]}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232774650792*^9, 3.554125249562382*^9, 
  3.554126281263408*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IF2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"IF1", "/.", 
    RowBox[{"\[Lambda]", "\[Rule]", "1"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232789850054*^9, 3.546232814587751*^9}, {
  3.546232870367111*^9, 3.546232891695176*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["k", "2"], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           SuperscriptBox["x", "k"]}]], " ", 
         SuperscriptBox["x", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}]]}], ")"}], "\[Alpha]"], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
       RowBox[{"2", "+", "\[Alpha]", "-", 
        FractionBox["\[Alpha]", "k"]}]], " ", 
      RowBox[{"(", 
       RowBox[{"k", "-", 
        RowBox[{
         SuperscriptBox["k", "2"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", 
           SuperscriptBox["x", "k"]}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
         RowBox[{"Log", "[", "x", "]"}]}], "+", 
        RowBox[{"\[Alpha]", " ", 
         RowBox[{"Log", "[", 
          RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "-", 
        RowBox[{"\[Alpha]", " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"0", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], ")"}], "/", 
    
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Gamma", "[", 
       RowBox[{"1", "+", "\[Alpha]", "-", 
        FractionBox["\[Alpha]", "k"]}], "]"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"k", "+", 
           RowBox[{
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "2"}], " ", "k"}], "+", 
              RowBox[{"2", " ", "\[Alpha]"}], "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"k", "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", 
                  "\[Alpha]"}]}], ")"}], " ", 
               RowBox[{"Log", "[", 
                RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}]}]}], ")"}]}],
         "-", 
        RowBox[{"2", " ", "k", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "k"}], "+", "\[Alpha]", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"k", "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], 
             ")"}], " ", 
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}], " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"0", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}], "+", 
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"k", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], 
          ")"}], " ", 
         SuperscriptBox[
          RowBox[{"PolyGamma", "[", 
           RowBox[{"0", ",", 
            RowBox[{"1", "+", "\[Alpha]", "-", 
             FractionBox["\[Alpha]", "k"]}]}], "]"}], "2"]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox["k", "2"], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "k", " ", 
            "\[Alpha]"}], "+", 
           SuperscriptBox["\[Alpha]", "2"]}], ")"}], " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"1", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], ")"}]}], 
   ",", 
   RowBox[{
    RowBox[{"k", ">", "0"}], "&&", 
    RowBox[{
     RowBox[{"1", "+", "\[Alpha]"}], ">", "0"}], "&&", 
    RowBox[{"\[Alpha]", "<", 
     RowBox[{"k", "+", 
      RowBox[{"k", " ", "\[Alpha]"}]}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546233010925664*^9, 3.554125253198756*^9, 
  3.554126284914077*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"IFun", " ", "=", " ", 
   RowBox[{"Function", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k", ",", "\[Alpha]"}], "}"}], " ", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["k", "2"], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox["\[ExponentialE]", 
            RowBox[{"-", 
             SuperscriptBox["x", "k"]}]], " ", 
           SuperscriptBox["x", 
            RowBox[{
             RowBox[{"-", "1"}], "+", "k"}]]}], ")"}], "\[Alpha]"], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
         RowBox[{"2", "+", "\[Alpha]", "-", 
          FractionBox["\[Alpha]", "k"]}]], " ", 
        RowBox[{"(", 
         RowBox[{"k", "-", 
          RowBox[{
           SuperscriptBox["k", "2"], " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", "1"}], "+", 
             SuperscriptBox["x", "k"]}], ")"}], " ", 
           RowBox[{"(", 
            RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
           RowBox[{"Log", "[", "x", "]"}]}], "+", 
          RowBox[{"\[Alpha]", " ", 
           RowBox[{"Log", "[", 
            RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "-", 
          RowBox[{"\[Alpha]", " ", 
           RowBox[{"PolyGamma", "[", 
            RowBox[{"0", ",", 
             RowBox[{"1", "+", "\[Alpha]", "-", 
              FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], ")"}], 
      "/", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Gamma", "[", 
         RowBox[{"1", "+", "\[Alpha]", "-", 
          FractionBox["\[Alpha]", "k"]}], "]"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"k", " ", 
           RowBox[{"(", 
            RowBox[{"k", "+", 
             RowBox[{
              RowBox[{"Log", "[", 
               RowBox[{"1", "+", "\[Alpha]"}], "]"}], " ", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"-", "2"}], " ", "k"}], "+", 
                RowBox[{"2", " ", "\[Alpha]"}], "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"k", "+", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", 
                    "\[Alpha]"}]}], ")"}], " ", 
                 RowBox[{"Log", "[", 
                  RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}]}]}], 
            ")"}]}], "-", 
          RowBox[{"2", " ", "k", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", "k"}], "+", "\[Alpha]", "+", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"k", "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}],
                ")"}], " ", 
              RowBox[{"Log", "[", 
               RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}], " ", 
           RowBox[{"PolyGamma", "[", 
            RowBox[{"0", ",", 
             RowBox[{"1", "+", "\[Alpha]", "-", 
              FractionBox["\[Alpha]", "k"]}]}], "]"}]}], "+", 
          RowBox[{"k", " ", 
           RowBox[{"(", 
            RowBox[{"k", "+", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], 
            ")"}], " ", 
           SuperscriptBox[
            RowBox[{"PolyGamma", "[", 
             RowBox[{"0", ",", 
              RowBox[{"1", "+", "\[Alpha]", "-", 
               FractionBox["\[Alpha]", "k"]}]}], "]"}], "2"]}], "+", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["k", "2"], "+", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "k", " ", 
              "\[Alpha]"}], "+", 
             SuperscriptBox["\[Alpha]", "2"]}], ")"}], " ", 
           RowBox[{"PolyGamma", "[", 
            RowBox[{"1", ",", 
             RowBox[{"1", "+", "\[Alpha]", "-", 
              FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], ")"}]}]}],
     "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.54608073954952*^9, 3.546080787340927*^9}, {
   3.546080827508503*^9, 3.546080832763547*^9}, {3.546080881724667*^9, 
   3.54608089839569*^9}, {3.546136031913543*^9, 3.546136106756538*^9}, {
   3.546136264957334*^9, 3.546136269166274*^9}, {3.546136300237964*^9, 
   3.546136302873075*^9}, 3.546136404353272*^9, {3.546136877306471*^9, 
   3.546136878124014*^9}, {3.546136974390393*^9, 3.546136995325726*^9}, {
   3.546137115334749*^9, 3.546137121892679*^9}, {3.546233026432763*^9, 
   3.546233039064002*^9}}],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<PlotLegends`\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.546078399638204*^9, 3.546078434270568*^9}, {
  3.546078523483738*^9, 3.546078526611331*^9}, {3.546078631725602*^9, 
  3.546078677869414*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"IFun", "[", 
      RowBox[{"2", ",", "0.05"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"2", ",", "0.1"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"2", ",", "0.3"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"2", ",", "0.5"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"2", ",", "1"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"2", ",", "2"}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "6"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotLegend", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<\[Alpha] = 0.05\>\"", ",", "\"\<\[Alpha] = 0.1\>\"", ",", 
      "\"\<\[Alpha] = 0.3\>\"", ",", "\"\<\[Alpha] = 0.5\>\"", ",", 
      "\"\<\[Alpha] = 1\>\"", ",", "\"\<\[Alpha] = 2\>\""}], "}"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"LegendPosition", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"-", "0.4"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Dashed", ",", " ", "Thick", ",", "Thin", ",", " ", "Dotted", ",", " ", 
      "Yellow", ",", " ", "Blue"}], "}"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.546071566443362*^9, 3.546071604772914*^9}, {
   3.546071664304524*^9, 3.546071734557583*^9}, {3.546071769565434*^9, 
   3.546071781503191*^9}, {3.546077877666447*^9, 3.546077878779971*^9}, {
   3.546078077257591*^9, 3.546078094273397*^9}, {3.546078128979278*^9, 
   3.546078131508565*^9}, {3.546078195525481*^9, 3.546078246143438*^9}, {
   3.54607831567725*^9, 3.546078368785814*^9}, {3.546078441904356*^9, 
   3.546078501052553*^9}, 3.546078697301196*^9, {3.546078795298968*^9, 
   3.546078819926423*^9}, {3.546078851304196*^9, 3.54607891370029*^9}, {
   3.546079894604615*^9, 3.546079946211399*^9}, {3.546136122778719*^9, 
   3.546136164810206*^9}, 3.546136449027762*^9, 3.54623312566578*^9, {
   3.54623315837957*^9, 3.546233172933139*^9}, {3.55414454024273*^9, 
   3.554144551589526*^9}}],

Cell[BoxData[
 GraphicsBox[{InsetBox[
    GraphicsBox[{{}, {}, 
      {Hue[0.67, 0.6, 0.6], Dashing[{Small, Small}], LineBox[CompressedData["
1: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
/B+9XjZF
        "]]}, 
      {Hue[0.9060679774997897, 0.6, 0.6], Thickness[Large], 
       LineBox[CompressedData["
1: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
jjZMLixQ0c44vfbLKkr4f2OvhNk=
        "]]}, 
      {Hue[0.14213595499957954`, 0.6, 0.6], Thickness[Tiny], 
       LineBox[CompressedData["
1:eJwV1nc81P8fAHDjrKw7d+cyEioVKeWroni/UTRURGSvlGwSMkqK7E32jqRU
dsj7o2GUrLLJlnnOvpL87vfP3eP5uM/n/Xm/X+s+ElbOV21YmJiYpBkf//+m
X3RK13b2V+l68O2RS98ECrqx/0CblBnwPFLnq1dGwL5RJ+wipJxAmMyB4U5F
IlZEHsjqS/MAtieM/dNYSRitVD3cQeo+kBzRj+N+SMKED3bXbPcEgLrgviLr
LhKm7BV6tDktCEzzj/bo4MmYRaNKQaxlKJDfPnV/jxIZCxBcETWRigSXPFEN
ZkDGOkt0m2PXooGvk6D1BQcydqNf9vFGTyzo3W14cfAeGVtj5gQm1fHgTZSL
1vJDMhZ0cOw3lpYIPtizzWQFkjGKTm3ZvgdJILZOHl/J8HOvROdQyxTAKrdx
4nsAGVPKcpFeVE8DyVCL4upHxr42XpjUlcoAwlq3R5fvkrFiTwFtE1wW2MH9
8nkB4/meYQ9eRa5lgYDHzybbLMkYzJzfUT+VDcLa3euyrpExzlJD25WeHCBr
KuSmcY6MtTc0fN7XnAssD/MfnFIkY8n98nuuV+cBlxBeg0xpMibNwvezNi0f
JLBvBX/mImPLZJ9TixEF4PDgsK0pnYTVHJxOknjwHOzmFcq3mSJhWjofdIMs
XwDe26buzPUkzDnLo/mKVDGoShAh57mSsJNl41IBlNdgj1HVNR5TEsZ044Ca
Ee4NWDLSLFc4R8KaPRMyw9feAOpJH+OxXSTMKNPZaKmnBLScGjy7t5GI+VL3
tFenVYAPH2/eliIRsfrw8JpLUnWg6ss6H5ZHwOpm+1q4C+uAsfBQX3kYAas9
t/9nswwC0wvPdYrcCJgxiyVT7k4M6Fzpuf8UErBrdZuSu8XqgY/fH8eAQTx2
4fhRW8rBj+B3poPtbxIek5dKW+YAjaAvVj3Cg8SLsbG7cczYtQF668V5XxEO
7PwDy8By/R7w5cPqBL3iNzoWVa+R7d4DSFlrHav2v5FopgRnRGwPeGE9GrJL
4jei1Y2G3mjtAU/KbsythdFR4j/LaKJGLzCgD9xqsN5AE35Wqa4KfSAn/0UO
m+ga8ve1fitLGgCnk0OYVl/TkF34RzehYwNgx7STaKsdDeml7fmPTXsAvPdz
sOnbR0P7a8crBsMGwM5OKhen4iJq3bSuDWMdBLYOr6DRzgUk6nOjcWZ5ECx5
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
3qbAqKqoPb/kgtD/APJs5nE=
        "]]}, 
      {Hue[0.37820393249936934`, 0.6, 0.6], Dashing[{0, Small}], 
       LineBox[CompressedData["
1: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
        "]]}, 
      {RGBColor[1, 1, 0], LineBox[CompressedData["
1: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
NqP/LskcoxY+ov4PFLfP7A==
        "]]}, 
      {RGBColor[0, 0, 1], LineBox[CompressedData["
1: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
o1B1IQ==
        "]]}},
     AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
     Axes->True,
     AxesOrigin->{0, 0},
     DisplayFunction:>$DisplayFunction,
     FormatType->TraditionalForm,
     PlotRange->{{0, 6}, {-30.528644426310244`, 3.501330025154799}},
     PlotRangeClipping->True,
     PlotRangePadding->{
       Scaled[0.02], 
       Scaled[0.02]}], {-1, -0.6180339887498948}, {
    Left, Bottom}, {2, 1.2360679774997896`}], GraphicsGroupBox[{
     {GrayLevel[0], 
      RectangleBox[{1.05, -0.45}, {1.425418994413408, 0.3499999999999999}]}, 
     {GrayLevel[1], EdgeForm[{GrayLevel[0], Thickness[0.001]}], 
      GraphicsGroupBox[{
        RectangleBox[{1, -0.4}, {1.3754189944134079`, 0.3999999999999999}], 
        InsetBox[
         GraphicsBox[{{{InsetBox[
              GraphicsBox[
               {RGBColor[0, 0, 1], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 0.08}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 2\"\>", {1.2100000000000002`, 0.58}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {RGBColor[1, 1, 0], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 1.24}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 1\"\>", {1.2100000000000002`, 1.74}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.37820393249936846`, 0.6, 0.6], Dashing[{0., Small}], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 2.4}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.5\"\>", {1.2100000000000002`, 2.9}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.1421359549995791, 0.6, 0.6], Thickness[Tiny], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 3.56}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.3\"\>", \
{1.2100000000000002`, 4.0600000000000005`}, {-1, 0}, Automatic, {1, 0}]}, {
             InsetBox[
              GraphicsBox[
               {Hue[0.9060679774997897, 0.6, 0.6], Thickness[Large], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 4.72}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.1\"\>", {1.2100000000000002`, 5.22}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.67, 0.6, 0.6], Dashing[{Small, Small}], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 5.88}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.05\"\>", {1.2100000000000002`, 6.38}, \
{-1, 0}, Automatic, {1, 0}]}}, {}},
          AspectRatio->2.1309523809523805`,
          FormatType->TraditionalForm,
          PlotRange->{{-0.1, 3.26}, {-0.1, 7.059999999999999}}], {1, -0.4}, {
         Left, Bottom}, {0.37541899441340787`, 0.7999999999999999}]}]}}]},
  AspectRatio->Automatic,
  Background->None,
  ColorOutput->Automatic,
  ImageSize->Automatic,
  PlotRange->All]], "Output",
 CellChangeTimes->{
  3.54623313329417*^9, {3.54623316422757*^9, 3.546233175420794*^9}, 
   3.554125256024948*^9, 3.554126287327232*^9, 3.554144567046009*^9},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
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
g7SUHiP2C1k5wjAxfO2aJyRBfkIq5P90ekLq5qtkJPGmhinA1vryijpiVYRb
NcSZOVnn2kj3DMRpIemxhnSZ/8HAgEzZSZHqYjFBtbXezi6ium6sgck/6VvI
izCWGuDUoXVx57M66CJvG19dKScoVgoqOhZn5ffIT84amhmZJDc8MzyRURiY
/T0Fm1qX5RcrVFZUriK9eRyiPZPy0w5afnu59HOMB7eJWaOtqWg5pfsvLcXL
KS2Ckm4FDos1sAiljnTSDsXZBTMSvSP2BT5xuuly+anjm91GYU/WnM+/P+sw
owKmE/YxSrn3Zx8Jfqp28d077VtGrlef7Qmydp6Z6BWOzzKLayLbLz436cLN
rw83vIv4zCFbo61XDXH6MRCrLU7Vlgize+SO9TPw/t0B7Xfkrj1dIlyHLWGv
PR58Pvso5vGKM0oEBQXB7SlaqRYLdLHp2zP1K3I+Npv1GAXECpuyH8zVqTKd
qEl78zLM/jr2xu7g7aO+Zh+nJPtFKVfwy5m/JLDvAJEClBjQyYQM6+egWUxZ
vNACKyxYsVCQq6qsGpsWFKvnYfgy0mrVOQW6HgX3/jzk8mrnDUO3qza4FnPi
PUIH5HxPbVJeymftmFL7kpzCQdkxKfPj3IL3Bj51xnXDZ3AtGTqOQtmdqdqf
3u41PuJnbj8kKyp5jix2qBoKuK1L7lhvFYNUjNhxt5PVUfIIwyVP49dJlotP
MPKUvDkP5hx59vHo/Z3Bz11RduSrKisZVcpHuH4roz/56bsbvPCzUb9SeWuS
JvucQuyjZacR58nCJcFnZjYQXlEnFl4seMDqCrIr0IIV+/Iywaawt55fX2y9
xs0b93DZKcQBlwLn/ZWuTkt+YcmS704B9z+fe4S8xfZOM1+gi1COSw383giq
qqbJDCXpw8I2JDoqC7djyF0z2tamNL/ohM+998iejBydLU8op6ZCuf0jLTgW
Z+st5pyRGWHxp71vv0NxprDJhws/Hvxm6UAkd0oDyYdb3eSOdf07FWfmI2cW
3pt5iAVH3uv5lmtqEXbeSEZmIGvOsqOTRSwgJ5bHlx8O350X7x6CJJ3YQFhE
0sMGzpgzxiiNVEyw+rRtaV6RgbvB85K70w/grCjgqMLGpwZ8Z4aK6fRn4tcw
ZEeEiUUDdQJqxOb8olJm/H8IGxZ2WJw5Tcs9WPFES7I/wOozLh9OiWxu9em4
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
9CSmtWd0NPSIiYHW2dnAyJEV7aTI54uPDwpfzQHyhwH4or4+CHDBAGD3S6HW
8QMYmgagKrSDjTBlHgQw0AlgEqoxlLXLAFqoGFDmtgDcWgbwdDGADcofptfl
hgP4CKM3gCj0m4jvpIACzB6DwmBm3ftIZ6Lq2LXe9DbMATNae6yDbLk2tF1B
atb7qx9FXOQc+1XfwP0BRsZc26jQ9Cj1t+GO1XOPaHD+CE6L6JBdnFs9H4ku
NW7tcG2Ny8r5yF/KfKEws4dpmvP5RX2F9hMNEb44BSCHzMUoYhOyGvpq+I6a
Fz/L4Q2jiB/R+iIHYvoQN0Mal5eXSSqUroMTSbgI+IUStfwMe0veJZ1B+ZGF
iW0hKEnozmMfqt4mfGGV62fr3Tcpmy/Ygl9neH+ZldqpYxVuMPCkDlV/G6V5
Y+TxDFXVylidIxal31N+IV1M523DKf0eql8bnhGeKDGgkDSmdNQa3K9xSQlu
XqGskDb8RO4UJbRJ6lfPs91zcnLxxfDItf42xX+4H20j/NQ3LTODa++XmpHx
e2JqCrYxcuLnarUp1+jHjlu9jX0Um7gpmGptMkzBqz2F0Huposs0Cm+b/8Di
DeYDylekRjPk4brL5Cu3wG5VQwf5vj276Wu3gtRsieUl0nn8BxE6dUK3Iq+T
apHA8f2sKv8XQ2DPwbXYxf3JdkMsmJJVXP5B1v5/++z/dfhmSedImrpTxgON
4Sa6h+Hm3Q0wrJevUMtpRt5bdemIp7kj7mg2ljp7Y4yrl0c6BMbNHhpa1b9n
CESHd4f3p/8suzNDE0uuf8+KTGLrmGo+31dCWx8Z+0lqqwNLOr3C+tTID1Ud
O6aWG6gJo4IZf9OCX17w03UX8Sy1WsR77xHp4YnkWDFNLDRF7wdPvauF2vlc
9jB6/eWlhkH5zUnaMLqTN4we6Q7eUb+m3Di1A8/xYhErma9ZNUgIIGxy0+bE
iYCCLVusIrSf7Ai6eu5w6Z35uxgerToWGE05mG84SzfBdMl5Rs7+7T4TRt7D
RsMgz2i2bpnx1IPscXoeXJ+zs2p8P7eq2X/afY33X/ZHckw0/e2ZltLxp/Or
tM3MhNLWrYuj4pPH2534dLJzYUH21lAX+xtu983t3x6/GmG15mzFrcn7lclU
ShW3pmgmWqgfcH119HzIAVOtivHzXvOnT3daVlr6mk7ZWvqU1K1WxTDe98AB
e9yB5rYiMIbRtvJ/NScs1gv9lDkJYd7LYnzdt4Y6228Pcfy4LfTzpy1hLg5r
Iryd9zl6vZ4REe+HOwXoq2Vv1XiSN2FiQM/i4hQKQ5v6YFDGXW50fE3T04/i
tgr6eoOjs+PvXHC+uetZkF01rw0LA2Z6JQawXoDSdX33ewEbrLVm+yT57gO4
Wnz+/KmUQYMyW+XlVdLp29Zea5rfVETEMZ7BbXfMO2wAuI/xBusyjAlOj9xv
FfBmaGRmLDuZInpCSwCeYRQVbGxsGNerlwBhJ/O0k44mnVG5fXo6qV3rGx4O
WI7lATDmG8DvODOSnt1x7AMQgY50FECvLwB/nLKx+ZbaoQP0iooCilJ76VPR
iLUVBmKfpk0D7rc+5gDYolNeIOR9HBfzaD4Aw7OEyyOEv7MJgAY63ehUpamq
wuCAAHYu1frmkpevqCAB4d83bnCGkacAUI54TABwGQXwtT1AOucsz3/1Slwi
R0bqIH0O9twLBiEpHTsCpmG5mmb1u3fJOCO9vNhxOtZeavYQDz6FWE1ycuL0
rwK6aRiyRvbuTRaEDNBJOiBsmnWiszPgYiDn4GME/NRU2GFkBPFdu4L5unVk
G4d80Vn6cDTnotQmK4sMhZv/wp4kxWS1YgWMdXdnceoifQxyrfN/qqnvKfL5
f+n/2mnoZ6bR/wCPan8I\
\>"]]
}, Open  ]],

Cell[BoxData["\[AliasDelimiter]"], "Input",
 CellChangeTimes->{3.554151788971515*^9}],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.546137165687608*^9, 3.546137166387722*^9}}],

Cell[" ", "Text",
 Editable->False,
 Selectable->False,
 CellFrame->{{0, 0}, {0, 3}},
 ShowCellBracket->False,
 CellMargins->{{0, 0}, {1, 1}},
 CellElementSpacings->{"CellMinHeight"->1},
 CellFrameMargins->0,
 CellFrameColor->RGBColor[0, 0, 1],
 CellSize->{Inherited, 5}],

Cell[BoxData[
 RowBox[{"Weibull", ":"}]], "Input",
 CellChangeTimes->{{3.543684992882703*^9, 3.543684994655665*^9}, {
  3.544320894879453*^9, 3.544320906231942*^9}, {3.544321013728986*^9, 
  3.544321015677552*^9}, {3.546149536487394*^9, 3.546149537999375*^9}},
 EmphasizeSyntaxErrors->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"ClearAll", "[", 
   RowBox[{"\[Alpha]", ",", "\[Sigma]", ",", "\[Mu]", ",", "x"}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.54613653746201*^9, 3.546136542655197*^9}, {
  3.546136596080742*^9, 3.546136617338891*^9}, {3.546139146090529*^9, 
  3.546139146249962*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p", " ", "=", " ", 
  RowBox[{
   FractionBox["k", "\[Lambda]"], 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
    RowBox[{"k", "-", "1"}]]}]}]], "Input",
 CellChangeTimes->{{3.543684783475436*^9, 3.543684946824956*^9}, 
   3.543685129663494*^9, {3.544295734613175*^9, 3.54429574288267*^9}, {
   3.54429580082901*^9, 3.54429582329368*^9}, {3.544320780873962*^9, 
   3.544320785346142*^9}, 3.544320837287442*^9, {3.544320881922005*^9, 
   3.54432088239278*^9}, {3.54432100764836*^9, 3.544321019573801*^9}, 
   3.546149541553032*^9}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", "k", 
   " ", 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
    RowBox[{
     RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"]], "Output",
 CellChangeTimes->{
  3.544320837880473*^9, {3.544320883580563*^9, 3.544320911227469*^9}, 
   3.545309803843712*^9, 3.546016483142384*^9, 3.546017657044242*^9, 
   3.546060076762132*^9, 3.546060141670154*^9, 3.546060377463162*^9, 
   3.546061431182232*^9, 3.54606188717779*^9, 3.546071462150901*^9, 
   3.546136812639187*^9, 3.546138975120109*^9, 3.546148046460689*^9, 
   3.546149544392845*^9, 3.546151403683482*^9, {3.54623018096315*^9, 
   3.546230186401331*^9}, 3.546233513423806*^9, 3.554125256148111*^9, 
   3.554126287479439*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Theta]", " ", "=", " ", "\[Lambda]"}], ";"}]], "Input",
 CellChangeTimes->{{3.546137329720142*^9, 3.546137340576589*^9}, {
  3.546149548558869*^9, 3.546149554463107*^9}, {3.546233499084344*^9, 
  3.546233500287852*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"ss", " ", "=", " ", 
   RowBox[{"FullSimplify", "[", 
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{"Log", "[", "p", "]"}], ",", "\[Theta]"}], "]"}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.543684996758039*^9, 3.543685116992625*^9}, {
   3.543685161495624*^9, 3.543685164824434*^9}, {3.543685617602922*^9, 
   3.543685622261405*^9}, {3.544295746546906*^9, 3.544295827428027*^9}, {
   3.544295874222879*^9, 3.544295884036298*^9}, 3.546016486016091*^9, {
   3.54601942039296*^9, 3.546019421197285*^9}, {3.546137342783463*^9, 
   3.54613734607702*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"k", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], ")"}]}], 
  "\[Lambda]"]], "Output",
 CellChangeTimes->{
  3.544295884678365*^9, 3.545309805435313*^9, 3.546016487855942*^9, 
   3.546017670089106*^9, 3.546019421888676*^9, 3.546059377336055*^9, 
   3.546060078214513*^9, {3.546060139149627*^9, 3.546060144271088*^9}, 
   3.546060382291988*^9, 3.546061435830015*^9, 3.546061887191896*^9, 
   3.546071462301595*^9, 3.546136812733527*^9, {3.546137347255125*^9, 
   3.546137353812429*^9}, 3.54613897527059*^9, 3.546148046689522*^9, 
   3.546149558534132*^9, 3.546232064476071*^9, {3.546233504193507*^9, 
   3.546233516686043*^9}, 3.554125256276245*^9, 3.55412628757933*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ss", "'"}], " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"D", "[", 
    RowBox[{"ss", ",", "\[Theta]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.543685180126496*^9, 3.543685298634426*^9}, {
   3.543685431540192*^9, 3.543685489527895*^9}, 3.543685534481716*^9, {
   3.543685624867701*^9, 3.543685665571384*^9}, {3.543688058809387*^9, 
   3.543688137132826*^9}, {3.54368832453227*^9, 3.543688330973921*^9}, {
   3.544295753339424*^9, 3.544295760783175*^9}, {3.544295853271568*^9, 
   3.544295889194162*^9}, {3.546016489095013*^9, 3.54601649563242*^9}, {
   3.546019427600456*^9, 3.546019428430676*^9}, {3.54613735651055*^9, 
   3.546137357241563*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"k", "-", 
   RowBox[{"k", " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", "k"}], ")"}], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      FractionBox[
       RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]}], 
  SuperscriptBox["\[Lambda]", "2"]]], "Output",
 CellChangeTimes->{{3.543685658802668*^9, 3.54368566906248*^9}, {
   3.54368807593941*^9, 3.543688142568622*^9}, 3.543688332640362*^9, {
   3.54429586658533*^9, 3.544295890282246*^9}, 3.545309806594238*^9, {
   3.54601648969558*^9, 3.546016496189694*^9}, 3.546017677241552*^9, 
   3.546019429586647*^9, 3.546059378810901*^9, 3.546060079358672*^9, 
   3.546060145605671*^9, 3.546060384883913*^9, 3.546061436928236*^9, 
   3.546061887206539*^9, 3.546071462474284*^9, 3.546136812904919*^9, 
   3.546137359182575*^9, 3.546138975369357*^9, 3.546148046818373*^9, 
   3.546149560252101*^9, 3.54623206886184*^9, 3.546233518378738*^9, 
   3.554125256443412*^9, 3.554126287713825*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"p", "^", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}], "*", "ss"}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.546016522942259*^9, 3.546016539967992*^9}, {
   3.546017704408171*^9, 3.546017705125968*^9}, 3.546019441035926*^9, {
   3.546019471091529*^9, 3.546019479505023*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"k", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], ")"}], " ", 
   
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", 
         SuperscriptBox[
          RowBox[{"(", 
           FractionBox[
            RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", 
       "k", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         FractionBox[
          RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
    RowBox[{"1", "+", "\[Alpha]"}]]}], "\[Lambda]"]], "Output",
 CellChangeTimes->{
  3.546016544655516*^9, {3.546017682666078*^9, 3.546017707524088*^9}, 
   3.546019442560441*^9, 3.546019480115117*^9, 3.546060081264836*^9, 
   3.546060146559043*^9, 3.546060400916709*^9, 3.546061439971061*^9, 
   3.546061887221677*^9, 3.546071464395533*^9, 3.546136814598201*^9, 
   3.546137368746807*^9, 3.546138977048079*^9, 3.54614804861861*^9, 
   3.546149564604638*^9, 3.546149648173352*^9, 3.546232072442872*^9, 
   3.546233524049641*^9, 3.554125257280551*^9, 3.554126288565291*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"csIntCitatel1", "/.", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], "\[Rule]", " ", 
     RowBox[{"y", "*", "\[Lambda]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016644463204*^9, 3.546016698494855*^9}, {
  3.546017718072268*^9, 3.546017718824221*^9}, {3.546019484592136*^9, 
  3.546019489873669*^9}, {3.5460588628943*^9, 3.546058863025369*^9}, {
  3.546058985559764*^9, 3.54605898695691*^9}, {3.546149570336845*^9, 
  3.546149571255931*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"k", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     SuperscriptBox["y", "k"]}], ")"}], " ", 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", 
         SuperscriptBox["y", "k"]}]], " ", "k", " ", 
       SuperscriptBox["y", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
    RowBox[{"1", "+", "\[Alpha]"}]]}], "\[Lambda]"]], "Output",
 CellChangeTimes->{
  3.546016699867985*^9, {3.54601771087677*^9, 3.546017720075646*^9}, 
   3.546019451857504*^9, 3.54601949082593*^9, 3.546058865086693*^9, 
   3.546058991110302*^9, 3.546059305292639*^9, {3.546060081368136*^9, 
   3.546060082414614*^9}, 3.546060147815039*^9, 3.546060407046361*^9, 
   3.546061531311124*^9, 3.546061887295093*^9, 3.546071465443946*^9, 
   3.546136815322759*^9, 3.546137371159345*^9, 3.546138977799651*^9, 
   3.546148049399068*^9, 3.546149656219562*^9, 3.546232076199355*^9, 
   3.54623352857147*^9, 3.554125257762887*^9, 3.554126289036192*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel3", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"csIntCitatel2", "*", "\[Lambda]"}], "/.", 
    RowBox[{"y", "\[Rule]", " ", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{"1", "/", "k"}], ")"}]}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232088390435*^9, 3.546232095185625*^9}}],

Cell[BoxData[
 RowBox[{"k", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "1"}], "+", 
    SuperscriptBox[
     RowBox[{"(", 
      SuperscriptBox["t", 
       FractionBox["1", "k"]], ")"}], "k"]}], ")"}], " ", 
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", 
        SuperscriptBox[
         RowBox[{"(", 
          SuperscriptBox["t", 
           FractionBox["1", "k"]], ")"}], "k"]}]], " ", "k", " ", 
      SuperscriptBox[
       RowBox[{"(", 
        SuperscriptBox["t", 
         FractionBox["1", "k"]], ")"}], 
       RowBox[{
        RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
   RowBox[{"1", "+", "\[Alpha]"}]]}]], "Output",
 CellChangeTimes->{3.546232100824901*^9, 3.546233537073972*^9, 
  3.554125258306997*^9, 3.554126289527586*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel4", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"csIntCitatel3", "/", "k"}], "*", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "k"}], ")"}], "/", "k"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232112593013*^9, 3.546232125917882*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "1"}], "+", "t"}], ")"}], " ", 
  SuperscriptBox["t", 
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}], "k"]], " ", 
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", "t"}]], " ", "k"}], "\[Lambda]"], ")"}], 
   RowBox[{"1", "+", "\[Alpha]"}]]}]], "Output",
 CellChangeTimes->{3.546232131595805*^9, 3.546233543221349*^9, 
  3.554125259478956*^9, 3.554126290634149*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel5", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"Integrate", "[", 
    RowBox[{"csIntCitatel4", ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "\[Infinity]"}], "}"}]}], "]"}], "]"}], 
  " "}]], "Input",
 CellChangeTimes->{{3.546016758763041*^9, 3.546016792970542*^9}, {
  3.546017733204061*^9, 3.546017740186443*^9}, {3.546017914630278*^9, 
  3.546017915139312*^9}, {3.54601813955664*^9, 3.546018141998787*^9}, {
  3.546019493851544*^9, 3.546019499184226*^9}, {3.546058803868124*^9, 
  3.546058826478995*^9}, {3.546058870461028*^9, 3.546058872003744*^9}, {
  3.546059018757644*^9, 3.546059019951728*^9}, {3.546059209756854*^9, 
  3.546059224271504*^9}, {3.546060118428053*^9, 3.546060118951836*^9}, {
  3.546060429719045*^9, 3.546060435859049*^9}, {3.54606155661684*^9, 
  3.546061556750753*^9}, {3.54606187684573*^9, 3.546061879156262*^9}, {
  3.546149679351288*^9, 3.546149686924944*^9}, {3.546232153175871*^9, 
  3.54623216243717*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{"-", 
    FractionBox[
     RowBox[{"\[Alpha]", " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
       RowBox[{
        RowBox[{"-", "2"}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", 
           FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}]}]], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        FractionBox["k", "\[Lambda]"], ")"}], "\[Alpha]"], " ", 
      RowBox[{"Gamma", "[", 
       RowBox[{"1", "+", "\[Alpha]", "-", 
        FractionBox["\[Alpha]", "k"]}], "]"}]}], "\[Lambda]"]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.546016797608153*^9, 3.546017744115164*^9, {3.546017901155742*^9, 
   3.546017918255887*^9}, 3.54601814479272*^9, 3.5460194592406*^9, 
   3.546019501847466*^9, 3.546058816227488*^9, 3.546058858910903*^9, 
   3.546058988908802*^9, 3.546059027020108*^9, {3.546059207468971*^9, 
   3.546059213730049*^9}, 3.546059311153677*^9, 3.54606008545984*^9, {
   3.546060121584368*^9, 3.54606015090936*^9}, 3.546060482353594*^9, 
   3.546061561105924*^9, 3.546061888934606*^9, 3.546071469576597*^9, 
   3.546136819048198*^9, 3.546137375365945*^9, 3.546138981516168*^9, 
   3.546148053135883*^9, 3.546150578307016*^9, 3.5462322891228228`*^9, 
   3.546233568384461*^9, 3.554125279456246*^9, 3.554126310315995*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"p", "^", 
    RowBox[{"(", 
     RowBox[{"1", "+", "\[Alpha]"}], ")"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016812881654*^9, 3.546016818147665*^9}, {
  3.546016886250683*^9, 3.546016904857094*^9}, {3.546018151081055*^9, 
  3.546018151902321*^9}, {3.546019505441384*^9, 3.546019506907304*^9}, {
  3.546059876912032*^9, 3.546059883931349*^9}, {3.546060057180457*^9, 
  3.546060062381365*^9}}],

Cell[BoxData[
 SuperscriptBox[
  RowBox[{"(", 
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       SuperscriptBox[
        RowBox[{"(", 
         FractionBox[
          RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", "k",
      " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
  RowBox[{"1", "+", "\[Alpha]"}]]], "Output",
 CellChangeTimes->{
  3.546230203148988*^9, {3.546233577473427*^9, 3.54623358052292*^9}, 
   3.554125279553732*^9, 3.554126310417225*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"csIntJmenovatel1", "/.", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], "\[Rule]", " ", 
     RowBox[{"y", "*", "\[Lambda]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016918820028*^9, 3.546016933459735*^9}, {
  3.546018162034847*^9, 3.546018162802109*^9}, {3.546019511970786*^9, 
  3.546019518337126*^9}, {3.546059893179542*^9, 3.546059893847781*^9}, {
  3.546060047266137*^9, 3.546060052681203*^9}, {3.546230217034243*^9, 
  3.546230217998498*^9}}],

Cell[BoxData[
 SuperscriptBox[
  RowBox[{"(", 
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       SuperscriptBox["y", "k"]}]], " ", "k", " ", 
     SuperscriptBox["y", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
  RowBox[{"1", "+", "\[Alpha]"}]]], "Output",
 CellChangeTimes->{{3.546230207442299*^9, 3.546230219675734*^9}, 
   3.546233583258629*^9, 3.554125279563041*^9, 3.55412631042607*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel3", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"csIntJmenovatel2", "*", "\[Lambda]"}], "/.", 
    RowBox[{"y", "\[Rule]", " ", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{"1", "/", "k"}], ")"}]}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.54623072884787*^9, 3.546230785760333*^9}, {
  3.546231604373572*^9, 3.546231605426678*^9}, {3.546231716620151*^9, 
  3.546231717085787*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", 
        SuperscriptBox[
         RowBox[{"(", 
          SuperscriptBox["t", 
           FractionBox["1", "k"]], ")"}], "k"]}]], " ", "k", " ", 
      SuperscriptBox[
       RowBox[{"(", 
        SuperscriptBox["t", 
         FractionBox["1", "k"]], ")"}], 
       RowBox[{
        RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
   RowBox[{"1", "+", "\[Alpha]"}]], " ", "\[Lambda]"}]], "Output",
 CellChangeTimes->{{3.546230757338739*^9, 3.546230786864854*^9}, 
   3.54623122497391*^9, 3.546231390679448*^9, 3.546231620590633*^9, 
   3.546231718726483*^9, 3.546231912776218*^9, 3.546233587684638*^9, 
   3.554125279689558*^9, 3.554126310560129*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel4", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"csIntJmenovatel3", "/", "k"}], "*", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "k"}], ")"}], "/", "k"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546231135452288*^9, 3.546231187522384*^9}, 
   3.546231380041735*^9, {3.546231608893195*^9, 3.546231609558657*^9}, {
   3.546231727310628*^9, 3.546231732399831*^9}, {3.546231878599405*^9, 
   3.546231893664122*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"-", "t"}]], " ", 
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", "t"}]], " ", "k", " ", 
      SuperscriptBox["t", 
       FractionBox[
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}], "k"]]}], "\[Lambda]"], ")"}], 
   "\[Alpha]"]}]], "Output",
 CellChangeTimes->{
  3.5462311903916*^9, 3.54623123012743*^9, 3.546231393222635*^9, 
   3.546231736337671*^9, {3.546231899759423*^9, 3.546231920689016*^9}, 
   3.546233592071807*^9, 3.554125279913958*^9, 3.554126310798819*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel5", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"Integrate", "[", 
    RowBox[{"csIntJmenovatel4", ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "\[Infinity]"}], "}"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.546017079018856*^9, 3.546017090969569*^9}, {
  3.546018190056803*^9, 3.546018190821094*^9}, {3.546059043677427*^9, 
  3.54605904460088*^9}, {3.546059403368323*^9, 3.546059411524818*^9}, {
  3.546059479614725*^9, 3.546059492483282*^9}, {3.546059617399394*^9, 
  3.546059617680817*^9}, {3.546059915271946*^9, 3.546059916341114*^9}, {
  3.546060024912348*^9, 3.546060025553251*^9}, {3.546061569414866*^9, 
  3.546061603372963*^9}, {3.54606187218996*^9, 3.546061873288195*^9}, {
  3.546230234851797*^9, 3.546230235704077*^9}, {3.54623031496448*^9, 
  3.546230316811469*^9}, {3.546230894174747*^9, 3.54623093187054*^9}, {
  3.546231021434708*^9, 3.546231058033388*^9}, {3.546231204938011*^9, 
  3.546231254795637*^9}, {3.54623130518147*^9, 3.546231317577529*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}]}]], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      FractionBox["k", "\[Lambda]"], ")"}], "\[Alpha]"], " ", 
    RowBox[{"Gamma", "[", 
     RowBox[{"1", "+", "\[Alpha]", "-", 
      FractionBox["\[Alpha]", "k"]}], "]"}]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.546230539424707*^9, 3.546230928296439*^9, 3.546231130736478*^9, 
   3.546231217042055*^9, {3.546231310240832*^9, 3.546231332557165*^9}, 
   3.546231408953687*^9, 3.546231758805175*^9, 3.546231931318572*^9, 
   3.546233612404448*^9, 3.554125296803525*^9, 3.554126327511372*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cs", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"csIntCitatel5", "/", "csIntJmenovatel5"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546017159619789*^9, 3.546017171553549*^9}, {
   3.546018198699244*^9, 3.54601820322215*^9}, 3.546061584597621*^9, {
   3.546061615263666*^9, 3.546061627686996*^9}, {3.546232301287677*^9, 
   3.546232306940481*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{"-", 
    FractionBox["\[Alpha]", 
     RowBox[{"\[Lambda]", "+", 
      RowBox[{"\[Alpha]", " ", "\[Lambda]"}]}]]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232321705469*^9, 3.546233615617531*^9, 
  3.554125296923675*^9, 3.554126327657774*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"cs", "'"}], " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"D", "[", 
    RowBox[{"cs", ",", "\[Theta]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546017177523059*^9, 3.546017189050696*^9}, {
  3.546018219369372*^9, 3.546018251272656*^9}, {3.546137392518803*^9, 
  3.546137393253288*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox["\[Alpha]", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
     SuperscriptBox["\[Lambda]", "2"]}]], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232329374177*^9, 3.546233619140492*^9, 
  3.55412529702795*^9, 3.554126327786307*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia", " ", "=", 
  RowBox[{"FullSimplify", "[", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"ss", "'"}], " ", "-", " ", 
      RowBox[{"cs", "'"}], "-", 
      RowBox[{"\[Alpha]", 
       RowBox[{"(", 
        RowBox[{"ss", "-", "cs"}], ")"}], 
       RowBox[{"(", 
        RowBox[{"cs", "-", "ss"}], ")"}]}]}], ")"}], "*", 
    RowBox[{"p", "^", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016927559429*^9, 3.546016927697169*^9}, {
   3.546017069821145*^9, 3.546017085073989*^9}, 3.546017230368702*^9, {
   3.546017453638702*^9, 3.546017454633499*^9}, {3.546017487540381*^9, 
   3.546017511750122*^9}, 3.546060275246113*^9, {3.546060594894228*^9, 
   3.546060607304117*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k", "+", 
       FractionBox["1", 
        RowBox[{"1", "+", "\[Alpha]"}]], "+", 
       FractionBox[
        RowBox[{"\[Alpha]", " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"\[Alpha]", "+", 
            RowBox[{"k", " ", 
             RowBox[{"(", 
              RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "1"}], "+", 
               SuperscriptBox[
                RowBox[{"(", 
                 FractionBox[
                  RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], 
              ")"}]}]}], ")"}], "2"]}], 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"]], "-", 
       RowBox[{"k", " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "k"}], ")"}], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          FractionBox[
           RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]}], ")"}], 
     " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           SuperscriptBox[
            RowBox[{"(", 
             FractionBox[
              RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", 
         "k", " ", 
         SuperscriptBox[
          RowBox[{"(", 
           FractionBox[
            RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
      RowBox[{"1", "+", "\[Alpha]"}]]}], 
    SuperscriptBox["\[Lambda]", "2"]], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232363544007*^9, 3.546233625680107*^9, 
  3.554125300701211*^9, 3.554126331412296*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"Ia", "/.", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], "\[Rule]", 
     RowBox[{"y", "*", "\[Lambda]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016832069324*^9, 3.54601683491256*^9}, {
  3.546016912126374*^9, 3.546016916727737*^9}, {3.546017322178493*^9, 
  3.546017372508301*^9}, {3.546017463020216*^9, 3.54601752428375*^9}, {
  3.546232394685446*^9, 3.546232395694052*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k", "-", 
       RowBox[{"k", " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "k"}], ")"}], " ", 
        SuperscriptBox["y", "k"]}], "+", 
       FractionBox["1", 
        RowBox[{"1", "+", "\[Alpha]"}]], "+", 
       FractionBox[
        RowBox[{"\[Alpha]", " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"\[Alpha]", "+", 
            RowBox[{"k", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "1"}], "+", 
               SuperscriptBox["y", "k"]}], ")"}], " ", 
             RowBox[{"(", 
              RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]}], ")"}], "2"]}], 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"]]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           SuperscriptBox["y", "k"]}]], " ", "k", " ", 
         SuperscriptBox["y", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
      RowBox[{"1", "+", "\[Alpha]"}]]}], 
    SuperscriptBox["\[Lambda]", "2"]], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{{3.546232392215838*^9, 3.546232413442848*^9}, 
   3.546233631780497*^9, 3.554125302490947*^9, 3.554126333207039*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"Ia1", "*", "\[Lambda]"}], "/.", 
    RowBox[{"y", "\[Rule]", " ", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{"1", "/", "k"}], ")"}]}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232427015182*^9, 3.546232435156028*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k", "-", 
       RowBox[{"k", " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "k"}], ")"}], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          SuperscriptBox["t", 
           FractionBox["1", "k"]], ")"}], "k"]}], "+", 
       FractionBox["1", 
        RowBox[{"1", "+", "\[Alpha]"}]], "+", 
       FractionBox[
        RowBox[{"\[Alpha]", " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"\[Alpha]", "+", 
            RowBox[{"k", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "1"}], "+", 
               SuperscriptBox[
                RowBox[{"(", 
                 SuperscriptBox["t", 
                  FractionBox["1", "k"]], ")"}], "k"]}], ")"}], " ", 
             RowBox[{"(", 
              RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]}], ")"}], "2"]}], 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"]]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           SuperscriptBox[
            RowBox[{"(", 
             SuperscriptBox["t", 
              FractionBox["1", "k"]], ")"}], "k"]}]], " ", "k", " ", 
         SuperscriptBox[
          RowBox[{"(", 
           SuperscriptBox["t", 
            FractionBox["1", "k"]], ")"}], 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
      RowBox[{"1", "+", "\[Alpha]"}]]}], "\[Lambda]"], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232478566571*^9, 3.546233638036752*^9, 
  3.554125304653095*^9, 3.554126335537692*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia3", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Ia2", "/", "k"}], "*", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "k"}], ")"}], "/", "k"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.54623247327657*^9, 3.546232478732023*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"-", "t"}], " ", 
      RowBox[{"(", 
       RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", 
    SuperscriptBox["k", "\[Alpha]"], " ", 
    SuperscriptBox["t", 
     FractionBox[
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}], "k"]], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", "k", "-", 
      RowBox[{"k", " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", "k"}], ")"}], " ", "t"}], "+", 
      FractionBox["1", 
       RowBox[{"1", "+", "\[Alpha]"}]], "+", 
      FractionBox[
       RowBox[{"\[Alpha]", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"\[Alpha]", "+", 
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "t"}], ")"}], " ", 
            RowBox[{"(", 
             RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]}], ")"}], "2"]}], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"]]}], ")"}], " ", 
    SuperscriptBox["\[Lambda]", 
     RowBox[{
      RowBox[{"-", "2"}], "-", "\[Alpha]"}]]}], ",", 
   RowBox[{"\[Alpha]", "<", 
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232498458661*^9, 3.546233646492959*^9, 
  3.554125306140801*^9, 3.554126337193742*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia4", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"Integrate", "[", 
    RowBox[{"Ia3", ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "\[Infinity]"}], "}"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.546017553376211*^9, 3.546017578186591*^9}, {
  3.546060190028669*^9, 3.546060215541151*^9}, {3.546232494373554*^9, 
  3.546232519267088*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"-", 
     SuperscriptBox["k", 
      RowBox[{"2", "+", "\[Alpha]"}]]}], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
     RowBox[{
      RowBox[{"-", "3"}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}]}]], " ", 
    SuperscriptBox["\[Lambda]", 
     RowBox[{
      RowBox[{"-", "2"}], "-", "\[Alpha]"}]], " ", 
    RowBox[{"Gamma", "[", 
     RowBox[{"2", "+", "\[Alpha]", "-", 
      FractionBox["\[Alpha]", "k"]}], "]"}]}], ",", 
   RowBox[{
    RowBox[{"\[Alpha]", "<", 
     RowBox[{"k", "+", 
      RowBox[{"k", " ", "\[Alpha]"}]}]}], "&&", 
    RowBox[{"\[Alpha]", ">", 
     RowBox[{"-", "1"}]}], "&&", 
    RowBox[{"k", ">", "0"}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232723877207*^9, 3.546233680133625*^9, 
  3.554125331121136*^9, 3.554126362141245*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IFa", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"-", 
     RowBox[{"Ia4", "^", 
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}]}]}], " ", "*", " ", 
    RowBox[{"(", 
     RowBox[{"p", "^", "\[Alpha]"}], ")"}], "*", 
    RowBox[{"(", 
     RowBox[{"ss", "-", "cs"}], ")"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546018347393014*^9, 3.546018403066614*^9}, {
   3.546018436099692*^9, 3.546018441274599*^9}, 3.546019614310392*^9, {
   3.546019656617135*^9, 3.546019704529838*^9}, {3.546057935083661*^9, 
   3.546057940051575*^9}, {3.546060690488888*^9, 3.546060692698881*^9}, {
   3.546136907926816*^9, 3.54613692580183*^9}, {3.546232739391533*^9, 
   3.546232740164084*^9}, 3.554125738215772*^9}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
      RowBox[{"2", "+", "\[Alpha]", "-", 
       FractionBox["\[Alpha]", "k"]}]], " ", 
     SuperscriptBox["\[Lambda]", 
      RowBox[{"1", "+", "\[Alpha]"}]], " ", 
     RowBox[{"(", 
      RowBox[{"\[Alpha]", "+", 
       RowBox[{"k", " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          SuperscriptBox[
           RowBox[{"(", 
            FractionBox[
             RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], 
         ")"}]}]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           SuperscriptBox[
            RowBox[{"(", 
             FractionBox[
              RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", 
         
         SuperscriptBox[
          RowBox[{"(", 
           FractionBox[
            RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
      "\[Alpha]"]}], 
    RowBox[{
     SuperscriptBox["k", "2"], " ", 
     RowBox[{"Gamma", "[", 
      RowBox[{"2", "+", "\[Alpha]", "-", 
       FractionBox["\[Alpha]", "k"]}], "]"}]}]], ",", 
   RowBox[{
    RowBox[{"\[Alpha]", "<", 
     RowBox[{"k", "+", 
      RowBox[{"k", " ", "\[Alpha]"}]}]}], "&&", 
    RowBox[{"\[Alpha]", ">", 
     RowBox[{"-", "1"}]}], "&&", 
    RowBox[{"k", ">", "0"}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232757750575*^9, 3.546233688982581*^9, 
  3.554125334056447*^9, 3.554125744337598*^9, 3.55412636507671*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IF1a", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"IFa", "/.", 
    RowBox[{"\[Mu]", "->", "0"}]}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.546017428290329*^9, {3.546018467395976*^9, 3.546018491191415*^9}, {
   3.546018587031472*^9, 3.546018597806486*^9}, 3.546157241026402*^9, {
   3.554125747652855*^9, 3.554125750096702*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
      RowBox[{"2", "+", "\[Alpha]", "-", 
       FractionBox["\[Alpha]", "k"]}]], " ", 
     RowBox[{"(", 
      RowBox[{"\[Alpha]", "+", 
       RowBox[{"k", " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          SuperscriptBox[
           RowBox[{"(", 
            FractionBox["x", "\[Lambda]"], ")"}], "k"]}], ")"}]}]}], ")"}], 
     " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           SuperscriptBox[
            RowBox[{"(", 
             FractionBox["x", "\[Lambda]"], ")"}], "k"]}]], " ", 
         SuperscriptBox[
          RowBox[{"(", 
           FractionBox["x", "\[Lambda]"], ")"}], "k"]}], "x"], ")"}], 
      "\[Alpha]"], " ", 
     SuperscriptBox["\[Lambda]", 
      RowBox[{"1", "+", "\[Alpha]"}]]}], 
    RowBox[{
     SuperscriptBox["k", "2"], " ", 
     RowBox[{"Gamma", "[", 
      RowBox[{"2", "+", "\[Alpha]", "-", 
       FractionBox["\[Alpha]", "k"]}], "]"}]}]], ",", 
   RowBox[{
    RowBox[{"\[Alpha]", "<", 
     RowBox[{"k", "+", 
      RowBox[{"k", " ", "\[Alpha]"}]}]}], "&&", 
    RowBox[{"\[Alpha]", ">", 
     RowBox[{"-", "1"}]}], "&&", 
    RowBox[{"k", ">", "0"}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232774650792*^9, 3.546233699094437*^9, 
  3.554125335504818*^9, 3.554126366594064*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IF2a", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"IF1a", "/.", 
    RowBox[{"k", "\[Rule]", "2"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232789850054*^9, 3.546232814587751*^9}, {
   3.546232870367111*^9, 3.546232891695176*^9}, 3.546233703305696*^9, {
   3.554125752180985*^9, 3.554125753799993*^9}, {3.554125831296257*^9, 
   3.554125832186967*^9}, {3.554140396163627*^9, 3.554140397253515*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
      RowBox[{"2", "+", 
       FractionBox["\[Alpha]", "2"]}]], " ", 
     RowBox[{"(", 
      RowBox[{"\[Alpha]", "+", 
       RowBox[{"2", " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          FractionBox[
           SuperscriptBox["x", "2"], 
           SuperscriptBox["\[Lambda]", "2"]]}], ")"}]}]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           FractionBox[
            SuperscriptBox["x", "2"], 
            SuperscriptBox["\[Lambda]", "2"]]}]], " ", "x"}], 
        SuperscriptBox["\[Lambda]", "2"]], ")"}], "\[Alpha]"], " ", 
     SuperscriptBox["\[Lambda]", 
      RowBox[{"1", "+", "\[Alpha]"}]]}], 
    RowBox[{"4", " ", 
     RowBox[{"Gamma", "[", 
      RowBox[{"2", "+", 
       FractionBox["\[Alpha]", "2"]}], "]"}]}]], ",", 
   RowBox[{"\[Alpha]", ">", 
    RowBox[{"-", "1"}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546233010925664*^9, 3.546233716615459*^9, 
  3.554125335761174*^9, 3.554126367373922*^9, 3.554140399483854*^9, 
  3.554141697275686*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"IFun", " ", "=", " ", 
   RowBox[{"Function", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Lambda]", ",", "\[Alpha]"}], "}"}], " ", ",", 
     FractionBox[
      RowBox[{"4.`", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
        RowBox[{"2", "-", 
         RowBox[{"1.`", " ", "\[Alpha]"}]}]], " ", 
       RowBox[{"(", 
        RowBox[{"\[Alpha]", "+", 
         RowBox[{"0.5`", " ", 
          RowBox[{"(", 
           RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "1"}], "+", 
            SuperscriptBox[
             RowBox[{"(", 
              FractionBox["x", "\[Lambda]"], ")"}], "0.5`"]}], ")"}]}]}], 
        ")"}], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         FractionBox[
          RowBox[{
           SuperscriptBox["\[ExponentialE]", 
            RowBox[{"-", 
             SuperscriptBox[
              RowBox[{"(", 
               FractionBox["x", "\[Lambda]"], ")"}], "0.5`"]}]], " ", 
           SuperscriptBox[
            RowBox[{"(", 
             FractionBox["x", "\[Lambda]"], ")"}], "0.5`"]}], "x"], ")"}], 
        "\[Alpha]"], " ", 
       SuperscriptBox["\[Lambda]", 
        RowBox[{"1", "+", "\[Alpha]"}]]}], 
      RowBox[{"Gamma", "[", 
       RowBox[{"2", "-", 
        RowBox[{"1.`", " ", "\[Alpha]"}]}], "]"}]]}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.54608073954952*^9, 3.546080787340927*^9}, {
   3.546080827508503*^9, 3.546080832763547*^9}, {3.546080881724667*^9, 
   3.54608089839569*^9}, {3.546136031913543*^9, 3.546136106756538*^9}, {
   3.546136264957334*^9, 3.546136269166274*^9}, {3.546136300237964*^9, 
   3.546136302873075*^9}, 3.546136404353272*^9, {3.546136877306471*^9, 
   3.546136878124014*^9}, {3.546136974390393*^9, 3.546136995325726*^9}, {
   3.546137115334749*^9, 3.546137121892679*^9}, {3.546233026432763*^9, 
   3.546233039064002*^9}, {3.546233731274747*^9, 3.546233735724144*^9}, {
   3.554125757864723*^9, 3.554125770650248*^9}, 3.554126551395401*^9}],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<PlotLegends`\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.546078399638204*^9, 3.546078434270568*^9}, {
  3.546078523483738*^9, 3.546078526611331*^9}, {3.546078631725602*^9, 
  3.546078677869414*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"IFun", "[", 
      RowBox[{"1", ",", "0.05"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"1", ",", "0.1"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"1", ",", "0.3"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"1", ",", "0.5"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"1", ",", "1"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "6"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotLegend", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<\[Alpha] = 0.05\>\"", ",", "\"\<\[Alpha] = 0.1\>\"", ",", 
      "\"\<\[Alpha] = 0.3\>\"", ",", "\"\<\[Alpha] = 0.5\>\"", ",", 
      "\"\<\[Alpha] = 1\>\"", ",", "\"\<\[Alpha] = 2\>\""}], "}"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"LegendPosition", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"-", "0.4"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Dashed", ",", " ", "Thick", ",", "Thin", ",", " ", "Dotted", ",", " ", 
      "Yellow", ",", " ", "Blue"}], "}"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.546071566443362*^9, 3.546071604772914*^9}, {
   3.546071664304524*^9, 3.546071734557583*^9}, {3.546071769565434*^9, 
   3.546071781503191*^9}, {3.546077877666447*^9, 3.546077878779971*^9}, {
   3.546078077257591*^9, 3.546078094273397*^9}, {3.546078128979278*^9, 
   3.546078131508565*^9}, {3.546078195525481*^9, 3.546078246143438*^9}, {
   3.54607831567725*^9, 3.546078368785814*^9}, {3.546078441904356*^9, 
   3.546078501052553*^9}, 3.546078697301196*^9, {3.546078795298968*^9, 
   3.546078819926423*^9}, {3.546078851304196*^9, 3.54607891370029*^9}, {
   3.546079894604615*^9, 3.546079946211399*^9}, {3.546136122778719*^9, 
   3.546136164810206*^9}, 3.546136449027762*^9, 3.54623312566578*^9, {
   3.54623315837957*^9, 3.546233172933139*^9}}],

Cell[BoxData[
 GraphicsBox[{InsetBox[
    GraphicsBox[{{}, {}, 
      {Hue[0.67, 0.6, 0.6], Dashing[{Small, Small}], LineBox[CompressedData["
1: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
WNfw+HwSEjIUo1VzCPgbBPHMwg==
        "]]}, 
      {Hue[0.9060679774997897, 0.6, 0.6], Thickness[Large], 
       LineBox[CompressedData["
1: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
M/PTX624uTCZwn8Ap0K1Eg==
        "]]}, 
      {Hue[0.14213595499957954`, 0.6, 0.6], Thickness[Tiny], 
       LineBox[CompressedData["
1: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
/wOBmbPF
        "]]}, 
      {Hue[0.37820393249936934`, 0.6, 0.6], Dashing[{0, Small}], 
       LineBox[CompressedData["
1:eJwV13k4lF8bB/CZeWaGKFuYrFFokcrSon7cd9GmBSlEiSxZCpXKlpQ2a7Yk
KVFIyhuVChmFECUiKmSrLNnXsb6nv+b6XNdczznPOec59/dWPOK2155Bo9FS
6TTav987apYLWuAKhLpsfU0rFinQ8QxSL4u/AtW/C11S7ooUWJfopkbaBEFO
zgs3v8dCBRclh2QPqoSBtvrYXpPzcwuqs0zKIkfCweZQRlZcvECB3Xe1S2N1
kVA8J1E2YIi/YITODwdzomH24Yn87Z58BVeWtfIK4mNAn6l43GYRu4BjnPdc
+XwsPFkoRHPuZhY89IxxC7KJg7S6kgzfT1RBeYnBLxOVuxA2G/5zdQ29IOOs
mNFB5j3IvJF+yWCAVnA2+PyTsJF7kDxpLzZHjlbA/+yA41BdEqS+n6fD05zm
fn7/vli57D60FAYpLa+a5N76rrnYPOcBTK3hbaRfmOAuZwg15cWnwLyGjXu/
iI5zByV8NvaFpoLKsXuyQ32j3NxlHbGK5x/Chcyeo/3fR7i7jN+ZXLF5BIfW
zkYEfBniut07U2aokgF57c+s89b3c9c/b1O5yPkf/KKOVo5V9HJpdks3WzCf
gpLFZG/e2h5u2dkbCSEjT2GA+eH0E/UurkWCm8VAXRaEDStHCmW2c3WXqQQG
GT2DE+XOKZRzG3fRs4aXi8ueQQOPb9G0aiu3+/0OCdOc5zChYKt5JvIn17d3
8eec+Gw4UKLu4pr3lWvt+X3GROIluGgGuhc+rOHqMyLUekJfwoPxdwu8Equ5
8yRnghaefwWjnxrLJ1w+cu/q1G+5ZJMDFaUNLio+b7hvQ0Jyd6vkQ/Q1f6nm
wGzI7/pWIZiWD2dfVucxaG8gb/uSpjJVLgi4OEaIp78FS4YN7f6CAvhA+1jr
9KUE9udPLloo/xaWfPkUuulNFew7nqTqd/gt3BfXcHiv+AX2yu7Qarz3FmDN
pmMq/jVg5B2z5fbid1BVXGampVoHBmvVHTnLCiFb01AboAG2/6pzP+NcCFtM
lq6wP9sI26L9vGrTC+GVtOLTjEdNoD9YHhS1sggyprLkb11oBt0MhyfCWsXQ
LNl0I4PbCpoq8YN8UAIvLbR2tDb+Bo3azZMO/iUg7CdT+ObAH1h9qZN6/7YE
5CT8V/O+/IGVrWslLumXgl3lYskXhR2w9G7VOppBGezXZ7dqRXSBrCTfufF9
5dCxvuSldHcPSBc/uWwWUw72sOBcoVEvSHnsC8uuK4ee23Nu673oBcnqxAQP
iwoIzdsZ0+zdByJh/73rP/wRmOZSPRG+/cBin+TrdK6E2bBXGnxtA9Cx47zw
UGolRO1b9r8hgUH4EBrCmW6vhP27Kn3PawxCSdCXqGurPsOn14XSPv6DECzW
ez8+7TM8+qD1a/mCIRBftLio6E4VeISsG4xZNwysomWlO/KqIIYyviZnMQyj
9qsrPn2vgk1XPymb+w5DfZpOTT2nGkqVl+T2cIfhjrp5+9+IaqCqdCay9UZA
ZVMoU+LKF4gbf5wYozsKnLYo/rgHX+DFnid8Xw6OAv/luLkLC79Ai8KqrdXe
o9BVmiq+jFYDWlmvnGSzR+F/Ru+UdLxrQNUIdg4vG4P11mP69q61kMdo9zbk
G4cd520uvzCtgye2xn2MOzzQuP52a6JHHfjcEytxes4D2QRF/tDIOjhlc9ni
YTkP+vNbguw+1YH9oyaHDB4PYmZswudvrYfkW8lxnSYT0H7uyO0Ta75BS2lm
5Cn6JPj72maqif8A2uMLvtv0psA5pPCklMYPOKd7s+mg6RTsi1+sxTL6AYcn
Tfr2OU3Bkry27IbgHxD9986q3rAp+DRpmxdMNYDePNNzFfVTIOtjV9I52ADH
7w+Lux+dhpde9o3JVU1wuN3VpPPEDKToutRJDzaB4NFTk4oBM2TdT1RdF/sJ
7LEP1zB6Bs6E+hZ7mfyEsQEr3dXZM7A2MerJ7tqfoPo53rx5fAYs25vzvY81
Q6Jbhfwzr1n4Lih8fZF7C2w+e3o3rqHh3l7RuYf8W+C/9cw7x/+j4YfP4oE3
w1vgU51Uf7geDXNuSAfMzWyB88G8/tfGNIxbqHJ2dKAFvP4yLt48TkMLTZ3D
H061wnCrk0nEfRp+s3BZdfJsGzxSq5Pi8dMxqHXbsZtX2kDn59/TSUJ03OCs
lJZ3ow1mFJt5+uJ0jPdqXMT3vA08/75KPb2QjtaxhpLx/W3gl3nn25U1dPxT
qzld7NQOPy+c0ThpTccRo6kPUgd/QV1+acjzTDqm1NfzgcsveO302eNmNh1N
rV/o23n/gh+am0s9cun4ys01PyP2F0SHydXIF9PRN6w5U6/2F7A1klzV6+lI
VRTFHt/zGx6le3aZTdNRdFuow1v8Axpr7lk06zFQPy0PVI3/wHCnk5jPdgZ6
Cv5dcMPmD7RG9hwU2c3A5kqDcseLf2DLKXrFclMGPjXnXy1S9Ac++rpMLnRk
oJFzAM9qWweIPfZ7IhbMwPBQr5Cp3Z1w1dfTcc9HBhb1PbR3sOqEwJctcQZV
DBw3rtf97NoJGm1LDTfXMtBact3A/eudEJRvZKbUyMDVCcP7d1Z1Qtrm5bee
/WXg56duC+P2dUHH4ty9TEEKRWrss9ZZdsPNC8GPb+pTiD2buva5dMPJbdzE
2W0UurPlF5306Qa6XOuw7U4Kq9Z/jXh8uxs+PtMuVdxLYeSdrScUG7rBXE3p
4cnDFEocXbJa8NBf2HLphPlxLwqlJzqeNFn1wAuN4ZW/HlFoML/416RrD5wK
2BbX8oRC7xWJclLneyD9z7re708p/GF1INQkoQfGNpkfLsqmML6w7FjpT/L/
BFrVyXcUyoc+Us2y7oXZT5qrN32jcLHCsbTLR/qg00w9Io/JxJAmxcTQE30g
vyxoaBUfE0fj62Jv+PeR+SE7cQ4TS6X0riXf7QMJ1a6tvkJMPDZf+mjx9z4I
2X3ch7OAiZaUXeTFZf1glvn6a+tyJiaPihq9S+yHLWWXSxv3MPF77d+dW9P6
wfhlcIOgMROFXpRs+/C0H8brD3SvM2Gi56lzUM3th9NUAT3IjIkG/R0rWxv7
wXmx8i5Jayb2dnLnMaQHwKVQV7HKnYnrG4+Xb4ocAOaypmuN4UzMWHZSwjFu
ACT4wl6MRzJR6cyZw2FJA1CZY1UueoOJIsLnh75nDUChgkuuzi0mdmK4jMeX
AUj0yur2TWRi3IMslxTxQVg97nMmLpOJUy5jgoI3B0EbN/60/szEtxP+u2pu
D0FzWeK8q/wsrJE6Oep2fwgSoqS9RARY+Hu97T3B9CEoqXzlGyvIwrlntwxv
zhmCL7LRxg+EWGg6NCc+s34IdrGz9qeLs7CrO7I7TGIYjLJKWs4qsFC88UHQ
juvD4NEoFzJ/HQsduaWl+RdHoFjc62G0NQt52iKLtIJG4JMZc1OJDQuDnpv5
pEWMQOzRV0XjR1iYnvZbLfreCOjrb4wwt2dhbxQzyil/BJx5tWaCziz0cMRD
4hMjcGTvCRvdUyz0F3014HRiFFAu3a75EgtFQ2YNfnqOQtTcRNHByyxMYm97
sM+f1Am/viLGVRYWTtaawvVRSDrK3aQYyEL276Fc8SejoBoj/2hvKAtDclZd
4XaMglNibuvVGyy8ZZsqLWE9Bu9aTVdvSmbhsZ0L3q1wHIPab/JfdqSwUFcz
0EnffQwWnhI8ZpzKwlaGy6tT/mPgu6Mh4FAaC1ckrTStvjcGz8902jo9YWF+
84uI6y1jIBbXnWL0goVth4r4BWzHQbN6nahtEQuzt6x5qugyDgyeodyuYhZe
U0sx0z41Do6DIhu03pPnTV9NcQwYh+DEpIf0Uhaeid+pX3J/HNIvurhFlLOQ
/0f1+Uvt4/BcUm7X5WoWqpm3jM7Y8yDuEHWo8CcL48VgJvg4D3SC/+pdbGah
wMd4ltRpHvSlRbtiCws7NpmLa17igettk4icVhY+UK1UP5rEA5nycpmUXyyU
ns07VtnEAx+p7jyLbrJ+KbGtCWYT4Bt4rk5nlIWnrUc7VxyegCF4/d9v4nbp
fQOvHSag0nnnaOgYC99eF6bVnJ6AG2/tHX+Ms9DX64ocf/QEuJ+e3O86ycLB
XR7m7p8n4OxN77ceNDY2DRl+wh2TMFN4VIpPgI1hMnWL3Y0nQeTu2f2pxLp6
Vl4JBybBzUnr21ZBNiZEHlOacZqE9J1drwPmstFaPdA7N2gSZDUS+oaF2Njm
+k5lbcUkXDmmlvxiPhs7OrXOqxpOgerTrF/PZNkYK5pXY2E2BbmbDi7UlWPj
dm295UGHp0DukU1mCXHaNePaDrcpuN/q0Vwvz0bnJa6qKeFTEKi233NIgY09
dql1CtVTMEcAJuYos3Hwp9Rqyf3TUPX2TCB3BRsVbMe0Fh6ahkcq9eGaamw0
/F2jvdR+GiYNu5mpxI//XtfbcHoa4h0qtEJWstGBxzKzujENKuLd+Yar2fhd
bPBcSu00JFsOfs3VZOPbLR/K15rOwDG61tflG9jYX5r6GaxmwGqPonYosfyu
y7XbHWbAjqcj0UfsvRd/WpyZgUxDvw2ZG9modTh70C9mBuZpm+mt0mHjQ88k
qZKvM5CcjwliyMbwdO+jZmazYCJ/dNRzCxst6Vsqaq1mwe/6+rRiYhUzYfV9
DrPwFPz6RbeyMY/xYMLo9CzYFnjqpBF3HPgYahA1C0uFEuqrt7ER+BWe61TO
Qkdqyh4xAzaezTpCi1xMw18VQWz9PWw82FiiYbyEhi1bmksDiDfzq9mLqNIw
tb5+SSHxXKuxsjANkisG0/PQkI1Jc0KigjfRMJYRv32dERs/Wb9QuXyYhkM9
nIVie8n8hPl3e96m4doV8Y7++8n69l9IuZZAQxPX7ohXxBrVk7OxJIcMTC4w
7CeGG31Zr9NpGCm86oqVKRvNZeoWTObS0LhCum+NGRuDlqS0n2ug4ej2ys7P
5mwUmaOgG9ZMw/nju04yDrAxpuvWzbvtZLwpoShN4vtPQg24f2m48+2Ju9HE
eZqnn9Kmadhjuqjd2IKNvaDvGyBHx/fm0/avLdnooZhfG6VIxzht28h24gnG
+lUPlOnIe73RUvggG/neq7YWqdGRr3V7oS2xwq7529m6dCw4+XuI7xAb95q3
zg+0ouPZUBlhXSs2Zrv7p4cl0NFeK6r1iDWZf27/8wP36dikvpHtT3yYbZOv
lErHb3wd3+KJ+eM3VeVkkBzEFomsJbYoYYz9fkNH0PpsoGfDxhm5y5uhgY5z
zpvxiRxhY7XjyE6BZjoGLDu/aSlx6jP7/bVtdOTffHslEhvt2Oro0k1HJT7H
RW7ESR58YTcn6Dj63PB0GfGW8sBvfQsYmHOhvM/Nlo3SkhOtObIM3K9+wjWA
uNfa+e9lBQY2vf2WFEMcM2owK7OUgeklSWp5xB2Kc5W3r2Ngg319JWVH1veY
78r5GxmYMX6ALkEc8fLvuiZdBnZ84HUqE2/Y/dHAYysD825Ay1biEM8w93v7
GehNCz12mdi6cMbL5QADhxIeWUYTrxFyC1h7iIFdsIG6T9x03zCmwo6BZcvN
fLnEqytF8sZPkRzXJCkzQsyUvlBceJaByZf2VdPt2fjNbuBTmA8DmZeM9ISI
L05UtSgFkPeNWmKiQlyjHMVnHElyX23JShPiHUsWrD8ew0DK8F2MFXH+0juO
gXEMnDdR8MSJOE01textEgM382I6/Yjl1VZMNKYw8NvYF6FA4uiVmcsnHjHw
l29zWySxn3pusMYzBhqXq99NJh7SwLw9LxnoKPQjIIPYUav4r3MuA7PKZaVf
Epusq9x9v5CBAQLqB0qIS9fv8+OWMNDvmwOjklh3w7eMH+UM/P1m8uBX4qU6
bcLiNQyU+sC3pJ34jq4jrq5n4FlOS0wXsRj2uO9qYGBmceOrfuLpzWNVl9oZ
2D9NiU8Rn9T3ZSR2MHAgMGw33YHs5xa65huSUymfGW02cfV2weiRYQbqMg1X
CBNvMwgvEuUxcNLvusZ84rydEiNq0wzcoHT6rySxxu44ZQM6hT4hqyykiVP3
LDR1YFE4u6LXR45Y1ujBlYtzKPxp1mysQBxpvOzl3XkUqv63pmERMZ9Jxp8c
UQqFfsvIKBP77tNcUCdBYa9uodAS4oH9r7YPSVEYMs/i5VJiBzMdL2F5ChVG
hSSWEzeYv0tTXUShv7fIUlViY4tt37epULh+IqT/n99bVgjYLacwMyvLdQXx
f4eMN/qvpHA7939J/5xp9dUlXoPCU1JZIf+sYm0Z/2otha2xf1b8822b5oqa
DRTeHDoX8O95Irb20/26FPLlJ4X/G/+KXZfaPD0KwSVg3zLiSXs3q2Ukx/N2
7a78N3/3o8NhW0iO50ap0VWIfzt6cW0MyfsaGnctJrZ0nuk7Z0Kh0/FfQYrE
n10CFOLMKLyQJ9kmT7zlOL9xtiWFxp2iQzLEOa6hF6pJ7l/rT+UuIF7tLpbV
a0uhWA9nowRx8ombrQKOFB718TklSix9Snb+kmMUeppa2M0jDvdI1NNzp9A6
sHneHGLvs+kPfDwpVAmIDJ4l56PPc3XtTV8KwwokrCeI7bxfsJ77Uyil19cz
TGx4juvw9xqFQQ/3ru0kLvLTv8kfSuEBluZAK/EG/7ISpQgK992WdGggVgr4
svTQLQothaP8PhGbZ1HqDncoNBo6vuXfeQ9p0dR2S6RwOvlMGZd4BKJ3XEgj
fY5I1pynxO+n9jknv6bQbmylWyjxhOrlkxlvKNSTrFt8iXiV5Qvvl28p1DHv
jvEmjn0tEVxWRqHDwZFXDsROZ76m95C+5dRMTf9G4rvJ7OejjRQ2RyjdWU1c
XbM2b7aFwkOPOXOU/81f82aFaBeFDxZfVJhHPLffrGfNBIUp4zeMv5P7JsPp
20o/aSZqcaoaHYlbY+esuyrPxF+GSjEHiDml2hC+iPQ1RadFDIj9VeIMk0hf
8+h8ys7lxMZtFu7vNzCxLhCa/5D7dPhgQ6aQJRNfc2cTzYiXhszN4RxmYvpS
DNYnPpj73zsFWzJeN3e9OnGx1J1qDRcmDtsLtMz5dz9/PTRk6sPEmzvvOb8i
97u20U+thNtMjHdd7i9AnNfB6jmSwMQhC7etI6Se6F5Ykaxyn4ndyZHffxLr
Z3lJZDxioi+t9dhz4j3i4qN5r5kYdTvhP0viI/XbX36vI+MV/HcvgdSnYOss
bUnSh6yck6/OPMxGIV79wDcOCzuz0/90kPoXHjGbdkeG5N6eItePxDHvdkkr
Lya51vRn/w3ie0p/JjQ1WGi160yJEvHzDpk8YyMWMg4J1miTetroflk3NISF
jVEPJDeTekwrKJBLCmdhsEXIAXliJeGpqexoktP56E4TpJ47PzmZ2xzPwqUP
+Xszicc7D6/X+pf786qi5InFbDdo/PjIwqx2Ecdekh+27+9TXibMRh/DgGlH
kjeytA/MK45g4yFayUAlyTNKg0Hx0TfIvqodtr1PfONRnqrdLZJTchUzzhB7
yigYUIls9HruWSlLrDv9+8qmp2wUeJShd5Tko/ICD1r+JzZa8SSZI7vZ2L4t
fChbkA8f87adGCb5S9K05NvDy3zIa8zZcFWfPLeVFvHOgx8/b7sS4rSWjbck
HeepeM5BsfzoOhGSZy/edbq6xlkAHw/e361F8vOdT7Hvw9wFcecvIwmcYeE5
16h+uZNzMbvKTUa/g4XdNksXHDgyDz/cTRd7SPqR4OkuZpODEGZeM+9ensPC
nL/b+oQshNHPQjDMPYmFX5XXt25QEsFXsTu9zwaR/nGZ7aqoZBG87T96460b
6R9MLX02yYuigtW9SD1TFmqad6WJJ4ri+nV1UpwNpD8L2FqnIyOGWSXvnc0X
kn1x4J+gR4nh64yPP4qZLHwjZzPbJT4f1VdUid35Q875zBVqedh8lNpytVyx
gomfnul1hYqKo6eC1LRMBhOLFRzeh0SKo+hdR5ob6c8vvdyf2CIggRV6cxNv
ezDx4KIGK8tQCZy3IDHXyJSJk9mrZFT5JPH9idcyQ9rkHFOdFTf8JLFcYe1a
SfJdSipp2yjTOOh3p1qwepbCs66mwwJeHPR68yEpvI1C2bV2pSo+HGzq2+gp
RlwwfSJ+8zkOavyvYnd0K4UCoaH63hc42NCzl3eT3BN304uiOwM5uG5Mdm/C
Twrfd2isKY3jYOUZnmDGDwrFbYXPXM7joIuufnr5FwpfL5czSMznoMDc61d3
E1sNLpd/U8DBvpGldpXVFD68sPX9cBEHZX4byn+ponDjvXOSdh85WBsYGfO9
ksIjjd3Zm5s4+NlRNbaznNSdZF6QVTMH/SXEvV2IHx/jO+zdysFFL44c7PlA
4ejkIr6s3xyMOb5u0QC5B4OkLcwU+zh4k/qdNV5C4arWo6o6AxyMDFGO9Sau
STs9az7EQR/tr+em3lMorx2RGj7GwbUh4QY04kJags9jHgc5Y/HqF4spdCx9
bFg6yUFBEQUpJvHc8JzF7dMclF0vQ79SROqsWenY7CwH8yuvd/IR/x+FRKm3

        "]]}, 
      {RGBColor[1, 1, 0], LineBox[CompressedData["
1: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
29JpqNlPKc4v+Qx/KTpuTdKlcYDqIlLbPQ1/bsYLaiZJo0WJQvI9iWnoeHJs
kkOlo4RBf3K6wRQ07nBrSkyjo+zZZjS5NAmxlT/kDYkyULXJPr+iZwLsWO/t
bTkM9L8Z/XPejglYr9CW1yIz8fCpb8lNUeMQKTjRfiOKieeu0QtKP40BU/Wg
oxqJQOerQ/2xx8cgxNdySTSMQK1V3VCHp3xQ0HVpYUcQ+FztV9nxMj7UbgRw
j14ksJAvpOD/iA+iHI5h+CUC7WbYhpeK+XC7uOH6xK8Exva+USrM40PT+P4D
LVkEQuf2aXISH+jOlOC4agI/jvOsKD/x4U9NxRN5NQS+z1n+8rsLH+wXNJX+
qiVwVrhiSdeJD4WXjJqWGgh8GNYp5nCBD4dzLzJdXhE45nXoXoUFH5wGpiqO
DhJo9LY0/BfkAzl/NcH+I4Ff556sSerzocSb/GP4MIHbslXeFh7mw5d1FrmM
T6D9vU/3B3T5kCBnY6UyS2CA72zpyT180B7+SevIPIEm01LEuCYfeop+2bJe
JLAyZPN9rDoflA6mFqSsEHjYZi7q+U4+1JNyIkpWCaRLddhcUOGDe0uJWcs6
geRUzfR1JT6IpzzbObpB4F+ZC7uyFPjw2KplZWuLwL3TNNmDcnz4LxQ3Mno=

        "]]}, 
      {RGBColor[0, 0, 1], LineBox[CompressedData["
1:eJxFznlIk3EcBvDXq9nyrLnKC883U2JRWa7wDkVLtMLNq9Wmm8vWNCnPNI9m
ZdtQV5CZ1x+iogQpKVqals43TCUaidBmLjuckcdM0zFXQX5/Dzw8fP57XDnp
Z7nGGIZF/e2//X1KWBuTXhSA/U9Zyj6vCZwVuOWxn7NpElwIXuwMFQvwQnAJ
VeuYhEvBoyORX87hdeD0hqw30fgT8KBY/DwK7webbcskzaVNgCNuskXPGJPg
7lyusumdCjyVcJmWmf0ZbBsu4Q0GfQPbKLgdxxLnwe4uglYRZwHsp7wyGly1
hP5sFJ1W1GjB/JcE0V/yC1yd3Gxvd3ENfCBuZnWTuw5WaaPHgyJ04OXpvQep
sXpwRVteKpNpAOPW5lE5NVjQlrsyitqk9UZghaeMdKbKGOxR+t7rfLUJmB4z
faS+xhSszBAFSMRm4A56vOVw5TYwlTEy1SIigQPVWOWra+bgairfEs/ZDi6p
u3TbN40Mrh1/KJdm7AAXCGWLTpkW4Hm21554jiX4nl5jquJZgXt/hC9YJViD
P3j6qY972ID5+5NpsibkQUZifrCzLfhwnKaV0ogsKA2b9HfYCb7DM98wkiH3
ObENGsoucM9mmYm3FHm8M1QjsaWAh114cnEV8q3u2MYZsh04ye0jK1GCrOui
OfiQqOAbJnNvHxQiUz3obE9sNzhbyFgh5yI7Hk0h8HzkAf3VxyEFyGSJ5GRe
MXJd29D9ubvI8u+HfIlHyJRk6yzRC+Qeb6fIxn5k1rK3c98AcktxmHxlCPlE
QwE1ZQyZo5zvClEhk5rWy1mfkNsFpAt5auRVnRup4ytyuX0C03UBmaZO9fFf
Qla0XjfEaZGd6ZXNFWvIr7H6/PZ1ZD7RHk3okC0qet1n9chPmcSawYD8Bz//
Dkk=
        "]]}},
     AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
     Axes->True,
     AxesOrigin->{0, 0},
     DisplayFunction:>$DisplayFunction,
     FormatType->TraditionalForm,
     PlotRange->{{0, 6}, {-4.192385573313811, 7.997201072890859}},
     PlotRangeClipping->True,
     PlotRangePadding->{
       Scaled[0.02], 
       Scaled[0.02]}], {-1, -0.6180339887498948}, {
    Left, Bottom}, {2, 1.2360679774997896`}], GraphicsGroupBox[{
     {GrayLevel[0], 
      RectangleBox[{1.05, -0.45}, {1.425418994413408, 0.3499999999999999}]}, 
     {GrayLevel[1], EdgeForm[{GrayLevel[0], Thickness[0.001]}], 
      GraphicsGroupBox[{
        RectangleBox[{1, -0.4}, {1.3754189944134079`, 0.3999999999999999}], 
        InsetBox[
         GraphicsBox[{{{InsetBox[
              GraphicsBox[
               {RGBColor[0, 0, 1], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 0.08}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 2\"\>", {1.2100000000000002`, 0.58}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {RGBColor[1, 1, 0], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 1.24}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 1\"\>", {1.2100000000000002`, 1.74}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.37820393249936846`, 0.6, 0.6], Dashing[{0., Small}], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 2.4}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.5\"\>", {1.2100000000000002`, 2.9}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.1421359549995791, 0.6, 0.6], Thickness[Tiny], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 3.56}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.3\"\>", \
{1.2100000000000002`, 4.0600000000000005`}, {-1, 0}, Automatic, {1, 0}]}, {
             InsetBox[
              GraphicsBox[
               {Hue[0.9060679774997897, 0.6, 0.6], Thickness[Large], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 4.72}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.1\"\>", {1.2100000000000002`, 5.22}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.67, 0.6, 0.6], Dashing[{Small, Small}], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 5.88}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.05\"\>", {1.2100000000000002`, 6.38}, \
{-1, 0}, Automatic, {1, 0}]}}, {}},
          AspectRatio->2.1309523809523805`,
          FormatType->TraditionalForm,
          PlotRange->{{-0.1, 3.26}, {-0.1, 7.059999999999999}}], {1, -0.4}, {
         Left, Bottom}, {0.37541899441340787`, 0.7999999999999999}]}]}}]},
  AspectRatio->Automatic,
  Background->None,
  ColorOutput->Automatic,
  ImageSize->Automatic,
  PlotRange->All]], "Output",
 CellChangeTimes->{
  3.54623313329417*^9, {3.54623316422757*^9, 3.546233175420794*^9}, 
   3.546233754573585*^9, 3.554125338343712*^9, 3.554126369887006*^9, 
   3.554126563638233*^9},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
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
\
\>"]]
}, Open  ]],

Cell["", "Text",
 Editable->False,
 Selectable->False,
 CellFrame->{{0, 0}, {0, 3}},
 ShowCellBracket->False,
 CellMargins->{{0, 0}, {1, 1}},
 CellElementSpacings->{"CellMinHeight"->1},
 CellFrameMargins->0,
 CellFrameColor->RGBColor[0, 0, 1],
 CellSize->{Inherited, 5}],

Cell[BoxData[
 RowBox[{"Weibull", ":"}]], "Input",
 CellChangeTimes->{{3.543684992882703*^9, 3.543684994655665*^9}, {
  3.544320894879453*^9, 3.544320906231942*^9}, {3.544321013728986*^9, 
  3.544321015677552*^9}, {3.546149536487394*^9, 3.546149537999375*^9}},
 EmphasizeSyntaxErrors->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"ClearAll", "[", 
   RowBox[{"\[Alpha]", ",", "\[Sigma]", ",", "\[Mu]", ",", "x"}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.54613653746201*^9, 3.546136542655197*^9}, {
  3.546136596080742*^9, 3.546136617338891*^9}, {3.546139146090529*^9, 
  3.546139146249962*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p", " ", "=", " ", 
  RowBox[{
   FractionBox["k", "\[Lambda]"], 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
    RowBox[{"k", "-", "1"}]]}]}]], "Input",
 CellChangeTimes->{{3.543684783475436*^9, 3.543684946824956*^9}, 
   3.543685129663494*^9, {3.544295734613175*^9, 3.54429574288267*^9}, {
   3.54429580082901*^9, 3.54429582329368*^9}, {3.544320780873962*^9, 
   3.544320785346142*^9}, 3.544320837287442*^9, {3.544320881922005*^9, 
   3.54432088239278*^9}, {3.54432100764836*^9, 3.544321019573801*^9}, 
   3.546149541553032*^9}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", "k", 
   " ", 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
    RowBox[{
     RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"]], "Output",
 CellChangeTimes->{
  3.544320837880473*^9, {3.544320883580563*^9, 3.544320911227469*^9}, 
   3.545309803843712*^9, 3.546016483142384*^9, 3.546017657044242*^9, 
   3.546060076762132*^9, 3.546060141670154*^9, 3.546060377463162*^9, 
   3.546061431182232*^9, 3.54606188717779*^9, 3.546071462150901*^9, 
   3.546136812639187*^9, 3.546138975120109*^9, 3.546148046460689*^9, 
   3.546149544392845*^9, 3.546151403683482*^9, {3.54623018096315*^9, 
   3.546230186401331*^9}, 3.546233513423806*^9, 3.546233791803171*^9, 
   3.554125338482346*^9, 3.554126370079164*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Theta]", " ", "=", " ", "\[Mu]"}], ";"}]], "Input",
 CellChangeTimes->{{3.546137329720142*^9, 3.546137340576589*^9}, {
  3.546149548558869*^9, 3.546149554463107*^9}, {3.546233499084344*^9, 
  3.546233500287852*^9}, {3.546233793898834*^9, 3.546233794633646*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"ss", " ", "=", " ", 
   RowBox[{"FullSimplify", "[", 
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{"Log", "[", "p", "]"}], ",", "\[Theta]"}], "]"}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.543684996758039*^9, 3.543685116992625*^9}, {
   3.543685161495624*^9, 3.543685164824434*^9}, {3.543685617602922*^9, 
   3.543685622261405*^9}, {3.544295746546906*^9, 3.544295827428027*^9}, {
   3.544295874222879*^9, 3.544295884036298*^9}, 3.546016486016091*^9, {
   3.54601942039296*^9, 3.546019421197285*^9}, {3.546137342783463*^9, 
   3.54613734607702*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"1", "+", 
   RowBox[{"k", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        FractionBox[
         RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], ")"}]}]}], 
  
  RowBox[{"x", "-", "\[Mu]"}]]], "Output",
 CellChangeTimes->{
  3.544295884678365*^9, 3.545309805435313*^9, 3.546016487855942*^9, 
   3.546017670089106*^9, 3.546019421888676*^9, 3.546059377336055*^9, 
   3.546060078214513*^9, {3.546060139149627*^9, 3.546060144271088*^9}, 
   3.546060382291988*^9, 3.546061435830015*^9, 3.546061887191896*^9, 
   3.546071462301595*^9, 3.546136812733527*^9, {3.546137347255125*^9, 
   3.546137353812429*^9}, 3.54613897527059*^9, 3.546148046689522*^9, 
   3.546149558534132*^9, 3.546232064476071*^9, {3.546233504193507*^9, 
   3.546233516686043*^9}, 3.546233797109957*^9, 3.554125338635385*^9, 
   3.554126370190418*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ss", "'"}], " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"D", "[", 
    RowBox[{"ss", ",", "\[Theta]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.543685180126496*^9, 3.543685298634426*^9}, {
   3.543685431540192*^9, 3.543685489527895*^9}, 3.543685534481716*^9, {
   3.543685624867701*^9, 3.543685665571384*^9}, {3.543688058809387*^9, 
   3.543688137132826*^9}, {3.54368832453227*^9, 3.543688330973921*^9}, {
   3.544295753339424*^9, 3.544295760783175*^9}, {3.544295853271568*^9, 
   3.544295889194162*^9}, {3.546016489095013*^9, 3.54601649563242*^9}, {
   3.546019427600456*^9, 3.546019428430676*^9}, {3.54613735651055*^9, 
   3.546137357241563*^9}}],

Cell[BoxData[
 RowBox[{"-", 
  FractionBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{"k", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         FractionBox[
          RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]}], ")"}]}], 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"x", "-", "\[Mu]"}], ")"}], "2"]]}]], "Output",
 CellChangeTimes->{{3.543685658802668*^9, 3.54368566906248*^9}, {
   3.54368807593941*^9, 3.543688142568622*^9}, 3.543688332640362*^9, {
   3.54429586658533*^9, 3.544295890282246*^9}, 3.545309806594238*^9, {
   3.54601648969558*^9, 3.546016496189694*^9}, 3.546017677241552*^9, 
   3.546019429586647*^9, 3.546059378810901*^9, 3.546060079358672*^9, 
   3.546060145605671*^9, 3.546060384883913*^9, 3.546061436928236*^9, 
   3.546061887206539*^9, 3.546071462474284*^9, 3.546136812904919*^9, 
   3.546137359182575*^9, 3.546138975369357*^9, 3.546148046818373*^9, 
   3.546149560252101*^9, 3.54623206886184*^9, 3.546233518378738*^9, 
   3.546233799107136*^9, 3.554125338722875*^9, 3.554126370282902*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"p", "^", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}], "*", "ss"}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.546016522942259*^9, 3.546016539967992*^9}, {
   3.546017704408171*^9, 3.546017705125968*^9}, 3.546019441035926*^9, {
   3.546019471091529*^9, 3.546019479505023*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{"(", 
    RowBox[{"1", "+", 
     RowBox[{"k", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SuperscriptBox[
         RowBox[{"(", 
          FractionBox[
           RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], 
       ")"}]}]}], ")"}], " ", 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", 
         SuperscriptBox[
          RowBox[{"(", 
           FractionBox[
            RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", 
       "k", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         FractionBox[
          RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
    RowBox[{"1", "+", "\[Alpha]"}]]}], 
  RowBox[{"x", "-", "\[Mu]"}]]], "Output",
 CellChangeTimes->{
  3.546016544655516*^9, {3.546017682666078*^9, 3.546017707524088*^9}, 
   3.546019442560441*^9, 3.546019480115117*^9, 3.546060081264836*^9, 
   3.546060146559043*^9, 3.546060400916709*^9, 3.546061439971061*^9, 
   3.546061887221677*^9, 3.546071464395533*^9, 3.546136814598201*^9, 
   3.546137368746807*^9, 3.546138977048079*^9, 3.54614804861861*^9, 
   3.546149564604638*^9, 3.546149648173352*^9, 3.546232072442872*^9, 
   3.546233524049641*^9, 3.546233801423466*^9, 3.554125339615348*^9, 
   3.554126371120186*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"csIntCitatel1", "/.", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], "\[Rule]", " ", 
     RowBox[{"y", "*", "\[Lambda]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016644463204*^9, 3.546016698494855*^9}, {
  3.546017718072268*^9, 3.546017718824221*^9}, {3.546019484592136*^9, 
  3.546019489873669*^9}, {3.5460588628943*^9, 3.546058863025369*^9}, {
  3.546058985559764*^9, 3.54605898695691*^9}, {3.546149570336845*^9, 
  3.546149571255931*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{"(", 
    RowBox[{"1", "+", 
     RowBox[{"k", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SuperscriptBox["y", "k"]}], ")"}]}]}], ")"}], " ", 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", 
         SuperscriptBox["y", "k"]}]], " ", "k", " ", 
       SuperscriptBox["y", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
    RowBox[{"1", "+", "\[Alpha]"}]]}], 
  RowBox[{"y", " ", "\[Lambda]"}]]], "Output",
 CellChangeTimes->{
  3.546016699867985*^9, {3.54601771087677*^9, 3.546017720075646*^9}, 
   3.546019451857504*^9, 3.54601949082593*^9, 3.546058865086693*^9, 
   3.546058991110302*^9, 3.546059305292639*^9, {3.546060081368136*^9, 
   3.546060082414614*^9}, 3.546060147815039*^9, 3.546060407046361*^9, 
   3.546061531311124*^9, 3.546061887295093*^9, 3.546071465443946*^9, 
   3.546136815322759*^9, 3.546137371159345*^9, 3.546138977799651*^9, 
   3.546148049399068*^9, 3.546149656219562*^9, 3.546232076199355*^9, 
   3.54623352857147*^9, 3.546233804112583*^9, 3.554125340081783*^9, 
   3.554126371593227*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel3", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"csIntCitatel2", "*", "\[Lambda]"}], "/.", 
    RowBox[{"y", "\[Rule]", " ", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{"1", "/", "k"}], ")"}]}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232088390435*^9, 3.546232095185625*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["t", 
   RowBox[{
    RowBox[{"-", "1"}], "/", "k"}]], " ", 
  RowBox[{"(", 
   RowBox[{"1", "+", 
    RowBox[{"k", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       SuperscriptBox[
        RowBox[{"(", 
         SuperscriptBox["t", 
          FractionBox["1", "k"]], ")"}], "k"]}], ")"}]}]}], ")"}], " ", 
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", 
        SuperscriptBox[
         RowBox[{"(", 
          SuperscriptBox["t", 
           FractionBox["1", "k"]], ")"}], "k"]}]], " ", "k", " ", 
      SuperscriptBox[
       RowBox[{"(", 
        SuperscriptBox["t", 
         FractionBox["1", "k"]], ")"}], 
       RowBox[{
        RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
   RowBox[{"1", "+", "\[Alpha]"}]]}]], "Output",
 CellChangeTimes->{3.546232100824901*^9, 3.546233537073972*^9, 
  3.546233805965809*^9, 3.554125340582462*^9, 3.554126372067845*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel4", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"csIntCitatel3", "/", "k"}], "*", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "k"}], ")"}], "/", "k"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232112593013*^9, 3.546232125917882*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{
    RowBox[{"-", "t"}], " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", 
  SuperscriptBox["k", "\[Alpha]"], " ", 
  RowBox[{"(", 
   RowBox[{"1", "+", 
    RowBox[{"k", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "t"}], ")"}]}]}], ")"}], " ", 
  SuperscriptBox["t", 
   FractionBox[
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], "k"]], 
  " ", 
  SuperscriptBox["\[Lambda]", 
   RowBox[{
    RowBox[{"-", "1"}], "-", "\[Alpha]"}]]}]], "Output",
 CellChangeTimes->{3.546232131595805*^9, 3.546233543221349*^9, 
  3.546233810282288*^9, 3.55412534178063*^9, 3.554126373155695*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel5", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"Integrate", "[", 
    RowBox[{"csIntCitatel4", ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "\[Infinity]"}], "}"}]}], "]"}], "]"}], 
  " "}]], "Input",
 CellChangeTimes->{{3.546016758763041*^9, 3.546016792970542*^9}, {
  3.546017733204061*^9, 3.546017740186443*^9}, {3.546017914630278*^9, 
  3.546017915139312*^9}, {3.54601813955664*^9, 3.546018141998787*^9}, {
  3.546019493851544*^9, 3.546019499184226*^9}, {3.546058803868124*^9, 
  3.546058826478995*^9}, {3.546058870461028*^9, 3.546058872003744*^9}, {
  3.546059018757644*^9, 3.546059019951728*^9}, {3.546059209756854*^9, 
  3.546059224271504*^9}, {3.546060118428053*^9, 3.546060118951836*^9}, {
  3.546060429719045*^9, 3.546060435859049*^9}, {3.54606155661684*^9, 
  3.546061556750753*^9}, {3.54606187684573*^9, 3.546061879156262*^9}, {
  3.546149679351288*^9, 3.546149686924944*^9}, {3.546232153175871*^9, 
  3.54623216243717*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{"0", ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      FractionBox[
       RowBox[{"1", "+", "\[Alpha]", "-", 
        RowBox[{"k", " ", "\[Alpha]"}]}], "k"], "]"}], "<", "1"}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.546016797608153*^9, 3.546017744115164*^9, {3.546017901155742*^9, 
   3.546017918255887*^9}, 3.54601814479272*^9, 3.5460194592406*^9, 
   3.546019501847466*^9, 3.546058816227488*^9, 3.546058858910903*^9, 
   3.546058988908802*^9, 3.546059027020108*^9, {3.546059207468971*^9, 
   3.546059213730049*^9}, 3.546059311153677*^9, 3.54606008545984*^9, {
   3.546060121584368*^9, 3.54606015090936*^9}, 3.546060482353594*^9, 
   3.546061561105924*^9, 3.546061888934606*^9, 3.546071469576597*^9, 
   3.546136819048198*^9, 3.546137375365945*^9, 3.546138981516168*^9, 
   3.546148053135883*^9, 3.546150578307016*^9, 3.5462322891228228`*^9, 
   3.546233568384461*^9, 3.546233827611574*^9, 3.554125354185252*^9, 
   3.554126385760187*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"p", "^", 
    RowBox[{"(", 
     RowBox[{"1", "+", "\[Alpha]"}], ")"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016812881654*^9, 3.546016818147665*^9}, {
  3.546016886250683*^9, 3.546016904857094*^9}, {3.546018151081055*^9, 
  3.546018151902321*^9}, {3.546019505441384*^9, 3.546019506907304*^9}, {
  3.546059876912032*^9, 3.546059883931349*^9}, {3.546060057180457*^9, 
  3.546060062381365*^9}}],

Cell[BoxData[
 SuperscriptBox[
  RowBox[{"(", 
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       SuperscriptBox[
        RowBox[{"(", 
         FractionBox[
          RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", "k",
      " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
  RowBox[{"1", "+", "\[Alpha]"}]]], "Output",
 CellChangeTimes->{
  3.546230203148988*^9, {3.546233577473427*^9, 3.54623358052292*^9}, 
   3.546233833105397*^9, 3.554125354256655*^9, 3.554126385863041*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"csIntJmenovatel1", "/.", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], "\[Rule]", " ", 
     RowBox[{"y", "*", "\[Lambda]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016918820028*^9, 3.546016933459735*^9}, {
  3.546018162034847*^9, 3.546018162802109*^9}, {3.546019511970786*^9, 
  3.546019518337126*^9}, {3.546059893179542*^9, 3.546059893847781*^9}, {
  3.546060047266137*^9, 3.546060052681203*^9}, {3.546230217034243*^9, 
  3.546230217998498*^9}}],

Cell[BoxData[
 SuperscriptBox[
  RowBox[{"(", 
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       SuperscriptBox["y", "k"]}]], " ", "k", " ", 
     SuperscriptBox["y", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
  RowBox[{"1", "+", "\[Alpha]"}]]], "Output",
 CellChangeTimes->{{3.546230207442299*^9, 3.546230219675734*^9}, 
   3.546233583258629*^9, 3.55412535426552*^9, 3.554126385872124*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel3", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"csIntJmenovatel2", "*", "\[Lambda]"}], "/.", 
    RowBox[{"y", "\[Rule]", " ", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{"1", "/", "k"}], ")"}]}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.54623072884787*^9, 3.546230785760333*^9}, {
  3.546231604373572*^9, 3.546231605426678*^9}, {3.546231716620151*^9, 
  3.546231717085787*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", 
        SuperscriptBox[
         RowBox[{"(", 
          SuperscriptBox["t", 
           FractionBox["1", "k"]], ")"}], "k"]}]], " ", "k", " ", 
      SuperscriptBox[
       RowBox[{"(", 
        SuperscriptBox["t", 
         FractionBox["1", "k"]], ")"}], 
       RowBox[{
        RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
   RowBox[{"1", "+", "\[Alpha]"}]], " ", "\[Lambda]"}]], "Output",
 CellChangeTimes->{{3.546230757338739*^9, 3.546230786864854*^9}, 
   3.54623122497391*^9, 3.546231390679448*^9, 3.546231620590633*^9, 
   3.546231718726483*^9, 3.546231912776218*^9, 3.546233587684638*^9, 
   3.554125354377819*^9, 3.554126385978791*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel4", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"csIntJmenovatel3", "/", "k"}], "*", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "k"}], ")"}], "/", "k"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546231135452288*^9, 3.546231187522384*^9}, 
   3.546231380041735*^9, {3.546231608893195*^9, 3.546231609558657*^9}, {
   3.546231727310628*^9, 3.546231732399831*^9}, {3.546231878599405*^9, 
   3.546231893664122*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"-", "t"}]], " ", 
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", "t"}]], " ", "k", " ", 
      SuperscriptBox["t", 
       FractionBox[
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}], "k"]]}], "\[Lambda]"], ")"}], 
   "\[Alpha]"]}]], "Output",
 CellChangeTimes->{
  3.5462311903916*^9, 3.54623123012743*^9, 3.546231393222635*^9, 
   3.546231736337671*^9, {3.546231899759423*^9, 3.546231920689016*^9}, 
   3.546233592071807*^9, 3.554125354653946*^9, 3.554126386219087*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel5", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"Integrate", "[", 
    RowBox[{"csIntJmenovatel4", ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "\[Infinity]"}], "}"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.546017079018856*^9, 3.546017090969569*^9}, {
  3.546018190056803*^9, 3.546018190821094*^9}, {3.546059043677427*^9, 
  3.54605904460088*^9}, {3.546059403368323*^9, 3.546059411524818*^9}, {
  3.546059479614725*^9, 3.546059492483282*^9}, {3.546059617399394*^9, 
  3.546059617680817*^9}, {3.546059915271946*^9, 3.546059916341114*^9}, {
  3.546060024912348*^9, 3.546060025553251*^9}, {3.546061569414866*^9, 
  3.546061603372963*^9}, {3.54606187218996*^9, 3.546061873288195*^9}, {
  3.546230234851797*^9, 3.546230235704077*^9}, {3.54623031496448*^9, 
  3.546230316811469*^9}, {3.546230894174747*^9, 3.54623093187054*^9}, {
  3.546231021434708*^9, 3.546231058033388*^9}, {3.546231204938011*^9, 
  3.546231254795637*^9}, {3.54623130518147*^9, 3.546231317577529*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}]}]], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      FractionBox["k", "\[Lambda]"], ")"}], "\[Alpha]"], " ", 
    RowBox[{"Gamma", "[", 
     RowBox[{"1", "+", "\[Alpha]", "-", 
      FractionBox["\[Alpha]", "k"]}], "]"}]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.546230539424707*^9, 3.546230928296439*^9, 3.546231130736478*^9, 
   3.546231217042055*^9, {3.546231310240832*^9, 3.546231332557165*^9}, 
   3.546231408953687*^9, 3.546231758805175*^9, 3.546231931318572*^9, 
   3.546233612404448*^9, 3.554125371926736*^9, 3.554126403394792*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cs", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"csIntCitatel5", "/", "csIntJmenovatel5"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546017159619789*^9, 3.546017171553549*^9}, {
   3.546018198699244*^9, 3.54601820322215*^9}, 3.546061584597621*^9, {
   3.546061615263666*^9, 3.546061627686996*^9}, {3.546232301287677*^9, 
   3.546232306940481*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{"0", ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", 
      FractionBox[
       RowBox[{"1", "+", "\[Alpha]", "-", 
        RowBox[{"k", " ", "\[Alpha]"}]}], "k"], "]"}], "<", "1"}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232321705469*^9, 3.546233615617531*^9, 
  3.546233839664305*^9, 3.554125372057463*^9, 3.554126403502606*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"cs", "'"}], " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"D", "[", 
    RowBox[{"cs", ",", "\[Theta]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546017177523059*^9, 3.546017189050696*^9}, {
  3.546018219369372*^9, 3.546018251272656*^9}, {3.546137392518803*^9, 
  3.546137393253288*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{"0", ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", 
      FractionBox[
       RowBox[{"1", "+", "\[Alpha]", "-", 
        RowBox[{"k", " ", "\[Alpha]"}]}], "k"], "]"}], "<", "1"}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232329374177*^9, 3.546233619140492*^9, 
  3.546233841542044*^9, 3.554125372161416*^9, 3.554126403598872*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia", " ", "=", 
  RowBox[{"FullSimplify", "[", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"ss", "'"}], " ", "-", " ", 
      RowBox[{"cs", "'"}], "-", 
      RowBox[{"\[Alpha]", 
       RowBox[{"(", 
        RowBox[{"ss", "-", "cs"}], ")"}], 
       RowBox[{"(", 
        RowBox[{"cs", "-", "ss"}], ")"}]}]}], ")"}], "*", 
    RowBox[{"p", "^", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016927559429*^9, 3.546016927697169*^9}, {
   3.546017069821145*^9, 3.546017085073989*^9}, 3.546017230368702*^9, {
   3.546017453638702*^9, 3.546017454633499*^9}, {3.546017487540381*^9, 
   3.546017511750122*^9}, 3.546060275246113*^9, {3.546060594894228*^9, 
   3.546060607304117*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"\[Alpha]", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", 
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                FractionBox[
                 RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], 
             ")"}]}]}], ")"}], "2"]}], "-", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"k", " ", 
           SuperscriptBox[
            RowBox[{"(", 
             FractionBox[
              RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]}], 
         ")"}]}]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           SuperscriptBox[
            RowBox[{"(", 
             FractionBox[
              RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", 
         "k", " ", 
         SuperscriptBox[
          RowBox[{"(", 
           FractionBox[
            RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
      RowBox[{"1", "+", "\[Alpha]"}]]}], 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], "2"]], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", 
      FractionBox[
       RowBox[{"1", "+", "\[Alpha]", "-", 
        RowBox[{"k", " ", "\[Alpha]"}]}], "k"], "]"}], "<", "1"}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232363544007*^9, 3.546233625680107*^9, 
  3.546233846478155*^9, 3.554125375123291*^9, 3.554126406811117*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"Ia", "/.", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], "\[Rule]", 
     RowBox[{"y", "*", "\[Lambda]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016832069324*^9, 3.54601683491256*^9}, {
  3.546016912126374*^9, 3.546016916727737*^9}, {3.546017322178493*^9, 
  3.546017372508301*^9}, {3.546017463020216*^9, 3.54601752428375*^9}, {
  3.546232394685446*^9, 3.546232395694052*^9}, {3.554125779646662*^9, 
  3.554125791680512*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}], ")"}]}], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"k", " ", 
           SuperscriptBox["y", "k"]}]}], ")"}]}], "+", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", 
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox["y", "k"]}], ")"}]}]}], ")"}], "2"], " ", 
        "\[Alpha]"}]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           SuperscriptBox["y", "k"]}]], " ", "k", " ", 
         SuperscriptBox["y", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
      RowBox[{"1", "+", "\[Alpha]"}]]}], 
    RowBox[{
     SuperscriptBox["y", "2"], " ", 
     SuperscriptBox["\[Lambda]", "2"]}]], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", 
      FractionBox[
       RowBox[{"1", "+", "\[Alpha]", "-", 
        RowBox[{"k", " ", "\[Alpha]"}]}], "k"], "]"}], "<", "1"}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{{3.546232392215838*^9, 3.546232413442848*^9}, 
   3.546233631780497*^9, 3.546233853890843*^9, 3.554125376751765*^9, 
   3.554126408427743*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"Ia1", "*", "\[Lambda]"}], "/.", 
    RowBox[{"y", "\[Rule]", " ", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{"1", "/", "k"}], ")"}]}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232427015182*^9, 3.546232435156028*^9}, {
  3.554125783733777*^9, 3.554125789018718*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox["t", 
      RowBox[{
       RowBox[{"-", "2"}], "/", "k"}]], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}], ")"}]}], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"k", " ", 
           SuperscriptBox[
            RowBox[{"(", 
             SuperscriptBox["t", 
              FractionBox["1", "k"]], ")"}], "k"]}]}], ")"}]}], "+", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", 
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                SuperscriptBox["t", 
                 FractionBox["1", "k"]], ")"}], "k"]}], ")"}]}]}], ")"}], 
         "2"], " ", "\[Alpha]"}]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           SuperscriptBox[
            RowBox[{"(", 
             SuperscriptBox["t", 
              FractionBox["1", "k"]], ")"}], "k"]}]], " ", "k", " ", 
         SuperscriptBox[
          RowBox[{"(", 
           SuperscriptBox["t", 
            FractionBox["1", "k"]], ")"}], 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
      RowBox[{"1", "+", "\[Alpha]"}]]}], "\[Lambda]"], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Re", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}], "]"}], "<", "1"}],
     "&&", 
    RowBox[{
     RowBox[{"Re", "[", 
      FractionBox[
       RowBox[{"1", "+", "\[Alpha]", "-", 
        RowBox[{"k", " ", "\[Alpha]"}]}], "k"], "]"}], "<", "1"}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232478566571*^9, 3.546233638036752*^9, 
  3.546233857654396*^9, 3.554125378955357*^9, 3.554126410591141*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia3", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Ia2", "/", "k"}], "*", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "k"}], ")"}], "/", "k"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.54623247327657*^9, 3.546232478732023*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", "t"}]], " ", 
     SuperscriptBox["t", 
      RowBox[{
       RowBox[{"-", "2"}], "/", "k"}]], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}], ")"}]}], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"k", " ", "t"}]}], ")"}]}], "+", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", 
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "t"}], ")"}]}]}], ")"}], "2"], " ", 
        "\[Alpha]"}]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", "t"}]], " ", "k", " ", 
         SuperscriptBox["t", 
          FractionBox[
           RowBox[{
            RowBox[{"-", "1"}], "+", "k"}], "k"]]}], "\[Lambda]"], ")"}], 
      "\[Alpha]"]}], 
    SuperscriptBox["\[Lambda]", "2"]], ",", 
   RowBox[{"k", ">", "1"}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232498458661*^9, 3.546233646492959*^9, 
  3.546233865780492*^9, 3.554125380853339*^9, 3.554126412317779*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia4", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"Integrate", "[", 
    RowBox[{"Ia3", ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "\[Infinity]"}], "}"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.546017553376211*^9, 3.546017578186591*^9}, {
  3.546060190028669*^9, 3.546060215541151*^9}, {3.546232494373554*^9, 
  3.546232519267088*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"-", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}], ")"}]}], " ", 
    SuperscriptBox["k", "\[Alpha]"], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
     FractionBox[
      RowBox[{"2", "+", "\[Alpha]", "-", 
       RowBox[{"k", " ", 
        RowBox[{"(", 
         RowBox[{"3", "+", "\[Alpha]"}], ")"}]}]}], "k"]], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", "k", "+", 
      RowBox[{"k", " ", "\[Alpha]"}]}], ")"}], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      FractionBox["1", "\[Lambda]"], ")"}], 
     RowBox[{"2", "+", "\[Alpha]"}]], " ", 
    RowBox[{"Gamma", "[", 
     FractionBox[
      RowBox[{
       RowBox[{"-", "2"}], "+", "k", "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], "k"], 
     "]"}]}], ",", 
   RowBox[{
    RowBox[{"k", ">", "1"}], "&&", 
    RowBox[{
     RowBox[{"2", "+", 
      RowBox[{"Re", "[", "\[Alpha]", "]"}]}], "<", 
     RowBox[{"k", "+", 
      RowBox[{"k", " ", 
       RowBox[{"Re", "[", "\[Alpha]", "]"}]}]}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232723877207*^9, 3.546233680133625*^9, 
  3.546233880705698*^9, 3.554125390795675*^9, 3.554126422260917*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IFb", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"-", 
     RowBox[{"Ia4", "^", 
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}]}]}], " ", "*", " ", 
    RowBox[{"(", 
     RowBox[{"p", "^", "\[Alpha]"}], ")"}], "*", 
    RowBox[{"(", 
     RowBox[{"ss", "-", "cs"}], ")"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546018347393014*^9, 3.546018403066614*^9}, {
   3.546018436099692*^9, 3.546018441274599*^9}, 3.546019614310392*^9, {
   3.546019656617135*^9, 3.546019704529838*^9}, {3.546057935083661*^9, 
   3.546057940051575*^9}, {3.546060690488888*^9, 3.546060692698881*^9}, {
   3.546136907926816*^9, 3.54613692580183*^9}, {3.546232739391533*^9, 
   3.546232740164084*^9}, 3.554125795760592*^9}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
      RowBox[{"-", 
       FractionBox[
        RowBox[{"2", "+", "\[Alpha]", "-", 
         RowBox[{"k", " ", 
          RowBox[{"(", 
           RowBox[{"3", "+", "\[Alpha]"}], ")"}]}]}], "k"]}]], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox["1", "\[Lambda]"], ")"}], 
      RowBox[{
       RowBox[{"-", "2"}], "-", "\[Alpha]"}]], " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"k", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          SuperscriptBox[
           RowBox[{"(", 
            FractionBox[
             RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], 
         ")"}]}]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           SuperscriptBox[
            RowBox[{"(", 
             FractionBox[
              RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", 
         
         SuperscriptBox[
          RowBox[{"(", 
           FractionBox[
            RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
      "\[Alpha]"]}], 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k", "+", 
       RowBox[{"k", " ", "\[Alpha]"}]}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], " ", 
     RowBox[{"Gamma", "[", 
      FractionBox[
       RowBox[{
        RowBox[{"-", "2"}], "+", "k", "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], "k"], 
      "]"}]}]], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"2", "+", 
      RowBox[{"Re", "[", "\[Alpha]", "]"}]}], "<", 
     RowBox[{"k", "+", 
      RowBox[{"k", " ", 
       RowBox[{"Re", "[", "\[Alpha]", "]"}]}]}]}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", 
      FractionBox[
       RowBox[{"1", "+", "\[Alpha]", "-", 
        RowBox[{"k", " ", "\[Alpha]"}]}], "k"], "]"}], "<", "1"}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232757750575*^9, 3.546233688982581*^9, 
  3.546233886496002*^9, 3.554125393983497*^9, 3.554126425204463*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IF1b", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"IFb", "/.", 
    RowBox[{"\[Lambda]", "\[Rule]", "1"}]}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.546017428290329*^9, {3.546018467395976*^9, 3.546018491191415*^9}, {
   3.546018587031472*^9, 3.546018597806486*^9}, 3.546157241026402*^9, {
   3.54623389091695*^9, 3.546233914238473*^9}, {3.554125799167905*^9, 
   3.554125800628412*^9}, {3.554127083862557*^9, 3.554127096547584*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
      RowBox[{"-", 
       FractionBox[
        RowBox[{"2", "+", "\[Alpha]", "-", 
         RowBox[{"k", " ", 
          RowBox[{"(", 
           RowBox[{"3", "+", "\[Alpha]"}], ")"}]}]}], "k"]}]], " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"k", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{"x", "-", "\[Mu]"}], ")"}], "k"]}], ")"}]}]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"-", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{"x", "-", "\[Mu]"}], ")"}], "k"]}]], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"x", "-", "\[Mu]"}], ")"}], 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}]]}], ")"}], "\[Alpha]"]}], 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k", "+", 
       RowBox[{"k", " ", "\[Alpha]"}]}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], " ", 
     RowBox[{"Gamma", "[", 
      FractionBox[
       RowBox[{
        RowBox[{"-", "2"}], "+", "k", "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], "k"], 
      "]"}]}]], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"2", "+", 
      RowBox[{"Re", "[", "\[Alpha]", "]"}]}], "<", 
     RowBox[{"k", "+", 
      RowBox[{"k", " ", 
       RowBox[{"Re", "[", "\[Alpha]", "]"}]}]}]}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", 
      FractionBox[
       RowBox[{"1", "+", "\[Alpha]", "-", 
        RowBox[{"k", " ", "\[Alpha]"}]}], "k"], "]"}], "<", "1"}], "&&", 
    RowBox[{
     RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", 
     RowBox[{"-", "1"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.546232774650792*^9, 3.546233699094437*^9, {3.546233894146207*^9, 
   3.546233916241534*^9}, 3.554125395189885*^9, 3.554126426376208*^9, {
   3.554127088333095*^9, 3.554127097942642*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IF2b", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"IF1b", "/.", 
    RowBox[{"k", "\[Rule]", "2"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232789850054*^9, 3.546232814587751*^9}, {
   3.546232870367111*^9, 3.546232891695176*^9}, 3.546233703305696*^9, {
   3.54623393071251*^9, 3.546233930927549*^9}, {3.546234024310321*^9, 
   3.546234025513919*^9}, {3.554125802167871*^9, 3.554125812404414*^9}, {
   3.554126639642228*^9, 3.554126651141911*^9}, {3.554126780892053*^9, 
   3.55412678102218*^9}, {3.554126967786063*^9, 3.554126990908704*^9}, {
   3.554127052594279*^9, 3.554127101904885*^9}, 3.554140427746951*^9, {
   3.554143217057125*^9, 3.554143249698236*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
      RowBox[{"2", "+", 
       FractionBox["\[Alpha]", "2"]}]], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       RowBox[{"2", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"x", "-", "\[Mu]"}], ")"}], "2"]}]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"-", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{"x", "-", "\[Mu]"}], ")"}], "2"]}]], " ", 
        RowBox[{"(", 
         RowBox[{"x", "-", "\[Mu]"}], ")"}]}], ")"}], "\[Alpha]"]}], 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"2", " ", "\[Alpha]"}]}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], " ", 
     RowBox[{"Gamma", "[", 
      FractionBox["\[Alpha]", "2"], "]"}]}]], ",", 
   RowBox[{
    RowBox[{"Re", "[", "\[Alpha]", "]"}], ">", "0"}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.546233010925664*^9, 3.546233716615459*^9, 3.546233933348742*^9, 
   3.546234026816667*^9, 3.554125396010735*^9, 3.554126426578324*^9, {
   3.55412664162295*^9, 3.554126652847976*^9}, 3.554126784371428*^9, {
   3.554126971368585*^9, 3.55412699240759*^9}, 3.554127091847067*^9, 
   3.554140428514259*^9, {3.554143221144051*^9, 3.554143250118409*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"IFun", " ", "=", " ", 
   RowBox[{"Function", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Mu]", ",", "\[Alpha]"}], "}"}], " ", ",", 
     FractionBox[
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
        RowBox[{"2", "+", 
         FractionBox["\[Alpha]", "2"]}]], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         RowBox[{"2", " ", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{"x", "-", "\[Mu]"}], ")"}], "2"]}]}], ")"}], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"-", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"x", "-", "\[Mu]"}], ")"}], "2"]}]], " ", 
          RowBox[{"(", 
           RowBox[{"x", "-", "\[Mu]"}], ")"}]}], ")"}], "\[Alpha]"]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "\[Alpha]"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"x", "-", "\[Mu]"}], ")"}], " ", 
       RowBox[{"Gamma", "[", 
        FractionBox["\[Alpha]", "2"], "]"}]}]]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.54608073954952*^9, 3.546080787340927*^9}, {
   3.546080827508503*^9, 3.546080832763547*^9}, {3.546080881724667*^9, 
   3.54608089839569*^9}, {3.546136031913543*^9, 3.546136106756538*^9}, {
   3.546136264957334*^9, 3.546136269166274*^9}, {3.546136300237964*^9, 
   3.546136302873075*^9}, 3.546136404353272*^9, {3.546136877306471*^9, 
   3.546136878124014*^9}, {3.546136974390393*^9, 3.546136995325726*^9}, {
   3.546137115334749*^9, 3.546137121892679*^9}, {3.546233026432763*^9, 
   3.546233039064002*^9}, {3.546233731274747*^9, 3.546233735724144*^9}, {
   3.546233948572817*^9, 3.546233952794951*^9}, 3.546234044136561*^9}],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<PlotLegends`\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.546078399638204*^9, 3.546078434270568*^9}, {
  3.546078523483738*^9, 3.546078526611331*^9}, {3.546078631725602*^9, 
  3.546078677869414*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"IFun", "[", 
      RowBox[{"0", ",", "0.05"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"0", ",", "0.1"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"0", ",", "0.3"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"0", ",", "0.5"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"0", ",", "1"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"0", ",", "2"}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "6"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotLegend", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<\[Alpha] = 0.05\>\"", ",", "\"\<\[Alpha] = 0.1\>\"", ",", 
      "\"\<\[Alpha] = 0.3\>\"", ",", "\"\<\[Alpha] = 0.5\>\"", ",", 
      "\"\<\[Alpha] = 1\>\"", ",", "\"\<\[Alpha] = 2\>\""}], "}"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"LegendPosition", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"-", "0.4"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Dashed", ",", " ", "Thick", ",", "Thin", ",", " ", "Dotted", ",", " ", 
      "Yellow", ",", " ", "Blue"}], "}"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.546071566443362*^9, 3.546071604772914*^9}, {
   3.546071664304524*^9, 3.546071734557583*^9}, {3.546071769565434*^9, 
   3.546071781503191*^9}, {3.546077877666447*^9, 3.546077878779971*^9}, {
   3.546078077257591*^9, 3.546078094273397*^9}, {3.546078128979278*^9, 
   3.546078131508565*^9}, {3.546078195525481*^9, 3.546078246143438*^9}, {
   3.54607831567725*^9, 3.546078368785814*^9}, {3.546078441904356*^9, 
   3.546078501052553*^9}, 3.546078697301196*^9, {3.546078795298968*^9, 
   3.546078819926423*^9}, {3.546078851304196*^9, 3.54607891370029*^9}, {
   3.546079894604615*^9, 3.546079946211399*^9}, {3.546136122778719*^9, 
   3.546136164810206*^9}, 3.546136449027762*^9, 3.54623312566578*^9, {
   3.54623315837957*^9, 3.546233172933139*^9}, {3.546233958904524*^9, 
   3.54623396333546*^9}}],

Cell[BoxData[
 GraphicsBox[{InsetBox[
    GraphicsBox[{{}, {}, 
      {Hue[0.67, 0.6, 0.6], Dashing[{Small, Small}], LineBox[CompressedData["
1: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
Y4iqZVDUcDY8tm7++fcvG23bkupc+rPh/zLMdJo=
        "]]}, 
      {Hue[0.9060679774997897, 0.6, 0.6], Thickness[Large], 
       LineBox[CompressedData["
1:eJwV1nk4Vd0XB/DLvRdJpnCJNJKShCIqa1VCpdBAUZRZvPErZAz1UsboGkqG
UpJGZJ7OPUWEEhkSKlMviswy/05/3efz3Oc85+y19/quvcbK5agtN41GU+Ci
0f7+riprlOgvewd17n7uOxreEXJzsgfKat9B9OzHPyvevCPWmjmb+RpWw81R
29qPGu8IGQlevz/HayAks8otZUsVsaLieZBpXA0o0mS1hocqCSm345F5LTUw
quF4RjuzkpBouJ/iZlYL07s91Qq2VxLCkbteD1u+h/AlFpNuh94STJ6LvP3n
6+B6e2bvkaRyou+Av9BYeh1oS8bFSV0oJ6ojwlnzPXVgfVfK2hPKicrQT+wb
yh/hwLTivd7uN0SY6NCDxIyPULfo1LZJ7Q0htnZdeXlSPfC+VQ5k9JMEs3xj
1YGSethTXkESJElM2m6t/fClHkYswlx7E0jic8buxs+sBshSODxmf4QkklRO
9vyKboCtcwftlhdxCPk9EQzx4E9wRaX76JgOQbC62XwJDz+B9dULu7i4CYIv
KEFg1ZtPcEk/yek5UUYMVKWLbaQ1wnG/voymXWXES6PX63d7N0JdqHOkjHYp
sePslI7thSYYqNOWcDIrJg74nwvKNWmBgoPhhdU/8wnVm6TufbcWeC/l/OV4
YT4hk7KGL+JWC8it1BHRup5PDJd1htp8aAFR2u/bwuvzibiFc1HLdT9DxMEs
k5pzeUSPn9Xd/21vhWc2fm/cfuUQAb7WWUpibXB8wPxYiEY2cT78zUUp1TZ4
nNGw64xgNnE8cd02phHl4Uclzr1ZxIaS7rz2sDZIZ7CSdsZkER9mrUvC6O3w
8r2RedB4JiHjY1PZP9oOdNuRUacrL4l8L9uOtPqvMB69d2R05AnxSNupZcXo
V5jN7ZpQffSEiKP/r/6m6DdIDRDVbzR7QnhE+FZ4HfsGO79Xn1evyCDU77Of
H276BrmOS0rMkh8T5j3fy7ydv4NLg8rQnnOPiC9LhW6ude0Euz6Vvj3rUolW
Myfli5e7QXa5a4/StxgitEvPOT64G0Y33hLlvxRDaJ1fn1ES2w3NS2e3IG8M
kejVsZY3pxuCd9pb5G9lE2dvG0okDnfDlI2zTtn1aOK/JrX5CsceaBkcbtwW
Fk5MGM1VS53uhTTzljr9EX9CRC/CjsT/YF+3scoO9Qsg3GibrWH+E0Q2DTPJ
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
JximbmJgrVBV1AvKOSeqTZ9uYWDy4Zl//v7f9++MZY4qAzcf26b293mZnE0O
peoMdJRf2fmQsnG3metbLQZOzJh7JlEOFg3zrNOm1qdye5pNuWhPccDnvQzk
N/OyvUF5yPXnjU5dBvIqp5d4U157Tzp64CADp++8WzxP2aTu0J2xIwz8lXlD
+RTlsAWf+3NHGdiUF26wnzJH6VkG05SBLtJXTJUpj59uzxI0Z+ByH6bx3/or
hAsUsSwZ+CC5RnOe2p/Txbter7ZmoJmPl+jf/YoacK7eaM/AAtWCtr/7WSGV
1KDqxMAToipxqZRn9N9/2enCwLfsiL0BlLd4znfpXGKgx+nLneaU45rPjJn4
MDBdLWFagHI1M3LW0p+BS+w3uHVR529xWxnd8RoDJRUHunMpO7BlxXzCGNgQ
WpRmQlnT6Nu2lLsM5IhoVPhT57ukjzlolcJAer3wgj5l7cDNafIPGBhvHOom
TFkn20v8xRMG5r0MlUmg+ueImNhkSSEDC335HW5T/ffxmdaLgFIGptIVk45R
Prb/nJ0OSX1v9kGxZX/71+NFc00VA6sjCqu9qf62+qyf/6WFgafkiuz3UP3f
4+riktxGrWdWo2SIygf7JXEbrL4x0F5OxjSBsrNWd3z/DwaqGRy2+jVMgkei
n+efCar+jg0dPlTehJ3N1pQQY+LxaxW9+lR+CU5/HmllMTEod3v3FyrfoqIX
M5KkmagpPKLsRDnutcEKuXVMlHMJLgym8vDe+v9m1FSZ+OHk18QMKj9z+qRL
jI2Y6CiotjalhwT1wL1u4seZ+PlBsakE5UIpx82tpkyUrovqDeum5sXBvMSz
lkz04rIVuNhFQtUzIz+XC0xcah0ft4nK8w7XIO2IcCYKtETKHKbmAY3DWZka
xcTLTJUjiV+ovBOam8uLYWKE6vXb/a0knH9+sfh7IhNj1HZ6X/lMwp9+yx3b
njPRibYzOLqJ6k9rLdW290wsVmqwOUPNJ/Vsd5HheiYqRd72iqTm2SmurGFG
MxMbOj5ml76n1pey4eWWr0wM3BsWK1FLglK72OarQ0zc+ql1a3YVCfonfstt
FOJBwZhWm2iSBKeHm5jay3nQMjxOKo1DQuSYbc9RFg9+NXuwkEfNz6bo9lTf
VTx4Wujx6aZSaj8/vFv1UZkH23fs95srJMFP76HUZSMe1HS1+zNOzedszVPL
KqJ5MIMnXjLmHrXe0dDEmFgefHt1e8VV6j4Q+6RE0eYODzobRYy6UPcFT+nV
B+n3eXAZrbN+fyJ1Hud/BO/J5MGPjrY53+JJqOG40co+8ODz7AB2bSR1fvSi
xvKW8uKN/4xFb/qQIGFS2fo4iBdHNG8xvxhR+bXrIdqG8GKiz+kRN0MSLq8N
TF8TwYs2OVvYgkdI+Dyk5Z4Qw4v2IYdmdx+i5uX1F8LhD3jRSUrgQsR+6j5V
GKvnQvKi+Pshq9+a1HyRscndPs+LUfVTuW/WUPe7Llr0azc+3PxG4lLdIAfu
SDgsk/dcgr07sm9V/sOBq8mO17ef50dFp23RqjUEJH24/TbSdSmu+XVv1imo
DPwusIdXXhTAqafSDTabS+HnOQXJU1bLMGzbi1xGazGEzQ8wvtoJYkyPNDlq
VgRFv/R+C5oJodxnvq2RgwXQLLejS2u9MCoK/qey5Fo+OGy0VmanCaPNxdqh
qj+5QJqY++yRFcF3H6U/e4XlgNrJgQyx+yIoJrdlKI75Cpyv6bbslhbFLSo2
jQv3s+CGHd8MF1sUC7sDHfwNM6F05bnFAbHl6JBfM+PY9hwKF4LpmyKX4/uT
8/n7rJ/Ch1f7BiJExLCXMPEiWx5DxWq7t+G3xJDPbfKguO8j+Df/xP1OfnFc
K9/FPnT+IZxe225hHiGOQlUKX4aMUmE2T1lakVcCJ4XqE/dduQe+9P7a2CsS
uFV9bkvRkySQWK95To7GwvVVKac8TibA5Qsm4/xeLNxQntodGxAPMuo2VfI+
LFS7uaDi6hYPnPn/Je71Y+E+X5E9hg7xwB8RoeMdyMJNwsxkaaN4SH5aHtMf
wkLtI0k7B1fFw9s+1e1VCSyUUruhd4kTB2LWQh5BJSz0UaXHMphxULhp5cH7
ZSz8pQzG7tOxYDG6SbaUw0IvH/vsgcFYeByo+3a8nIXrDny37G6OhZ33/CRs
3rOwv2nZEYGMWLDq+Jm39ysLV4Wxn+w8Egu8adOhFt9Z6H5IRX9ybyw8c+a1
9O5i4T/hQr65GrEwObuWN/sHC02b6lP3rImF0BVmpmt+s1DHXqUhajwGlLvs
FXePsND/dAKva38MNGa4L54cY+FBc07Nsa8xIKsZnR41Rb1f2GtOoSoG3tBS
fJ5NszDBQ85+RWkMOFQ9M6yaZSGh8/q0cHYMCEQVreuZZ+FtdfN2/vQYyDKt
mlpcZGF43GzPksQY+D9Lv/Kr
        "]]}, 
      {Hue[0.14213595499957954`, 0.6, 0.6], Thickness[Tiny], 
       LineBox[CompressedData["
1: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

        "]]}, 
      {Hue[0.37820393249936934`, 0.6, 0.6], Dashing[{0, Small}], 
       LineBox[CompressedData["
1:eJwVl3c81d8fx+097r6UUUIhLVTC530yKiOjJMkoSrKKUmigjISQEZGIkhDZ
SWRlZd5bSchXkpl9r+13f/98Pp/n43E+55zX6/0+533OVvsrJy5ysLGxabEe
/3+fYfdjk740AO1ed7wOdjVV/bBy2e158zf85HAfjDxdVvVw8Kjrk+Df8GUv
WdDqZ2nVIWfZrIq431DclGNwxa60KtmnT4a36De0Wphl+zqVVJ1LMKEkT/+G
V3uULhLuFlX9/aqyVn95CB50l71UKc2vWjBdbRa3/gPnRbjLk6pfVOGPRjhW
o79gRB6/NlgdDbpZFaBk9heY8edjUsJjwFtwQizu/F/4aLGWz2kRBwPtBi1O
9/7C563teY1DCZBvybcHV/cXhmb5eDVnn4Op8/0l26Mj8GNNpPvs8CuIivAJ
Xz0+CtjuRLXv0gVQN/X6oqPtKGiKcq7XhhTAolk31uE+Ct92DetZTRXAOcqB
mfTIUUhTDVG7/7EQ9jyfP2XYOQozkRUV9aeKoSP/ivRT8zHwreF4xXOjDHD0
iwUHzo7DeTH319pelYAmD4+Zu4yDXqzDYkpHJVzlkZLxvDUOtmc7OTOVqqDz
4LfonKRxkLPqUC0fqILHz454bO0dB+ZzV+Ub6Z+AfGn7HkGbCThHyvH6yF4D
m5ZHcvttJ4G2ZvcoKqUODIj1f1bcJwH/bzRl4XMd+O5MkxT3mwR0wVp/z1Qd
/LQ9E3Hy+SRwi1g6yUM9JNc2uTb+mgRc0fR7cl89SEW8USo49w/+Jiwbs+Eb
YNsW16wg+yl4UOWuxHumCcL7t6ZFeExBr+OrkTqfJmAkf0+I85+CikyRdpun
TdAorvPgZcoUnBg2kdr6swlciZsu1fdMgXWq1MqkVTOc5bzw+J7CNPCeT4l7
cbIFXjLwpjVp0/DzScv3hwqt0PN1wvBI1jQcvM+ML9BrBZHihqPN+dPw6t72
/uLzreB97Q50VU1DvbgIxSSxFQymR3YN9k1D92nJ7C88bfBvtEqYY9MMnGz+
m73Y0wYH+9xaDj+eAVnhUlNJ1Q54q+BJdno6A9Y2jrKTqANkb9ywe/RiBniu
5c5mHu8AnKjfXE/BDPxlaEf3O3bAKIrafJ02A/vcM8+YJnTA04wCl1ekWdiX
72tvwGS1nykp/iIxC8bWgzJfODohWOvDxqzsLDzJ61RWF+kEz2+1MaA2C/+O
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
RaMYr/Uby0DsfzMvqoE=
        "]]}, 
      {RGBColor[1, 1, 0], LineBox[CompressedData["
1:eJwBEQLu/SFib1JlAgAAACAAAAACAAAAeEXhM55M4z/PdX11ONLJv9laay9y
d+M/Z9PLcPJwyL+K4kdsl4bjP+yzaM2g9se/OmokqbyV4z+mLCWQdXzHv5x5
3SIHtOM/d18zWZWIxr9gmE8WnPDjP3GMvUXDosS/59Uz/cVp5D9NcQY/gN/A
v/VQ/MoZXOU/tUajuh//sr8RR41mwUDnP33BUf6/AaI/RKm8PytR5z9O2QeE
hNKjP3gL7BiVYec/YRRs5M6hpT/gz0rLaILnP5oDEm/qO6k/sFgIMBDE5z8T
IrpG+S6wP1Bqg/leR+g/bCLR0YQrtz+QjXmM/E3pPz4XoN0pQ8I/xO+oZWZe
6T/5XLpNWKrCP/hR2D7Qbuk/B1ZdixURwz9gFjfxo4/pPyCWWYE63cM/MJ/0
VUvR6T8HP10uIXDFP9Cwbx+aVOo/b4VMX/1/yD8Q1GWyN1vrPxovCNYhRc4/
QO1B6lRr6z8fyIuNvZvOP3AGHiJye+s/0ikaKuDxzj/RONaRrJvrP0mv0vu4
nM8/kp1GcSHc6z+5xTTaWHbQPxVnJzALXew/SHj938S60T8a+uit3l7tP/Nv
Glu4FNQ/ShPF5ftu7T/Dx1l/PjjUP3osoR0Zf+0/vGUcFYVb1D/bXlmNU5/t
PzhvcmNTodQ/nMPJbMjf7T+59/xU8ynVP7n2FQx4DO4//t7oYYSE1T+1/ggd

        "]], LineBox[CompressedData["
1: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
nEqUWTUvrK0xwO2IZ/WHxxTify3H+js=
        "]]}, 
      {RGBColor[0, 0, 1], 
       LineBox[{{1.2244897959183673`*^-7, -6.612244897958786*^-7}, {
        0.0018403075233577606`, -0.009937526002051543}, {
        0.0036804925977359294`, -0.01987358315902815}, {
        0.007360862746492267, -0.039740044836081734`}, {
        0.014721603044004942`, -0.07942776299600669}, {
        0.029443083639030292`, -0.15844204815362947`}, {
        0.037657223376417276`, -0.20172792183704621`}}], 
       LineBox[{{0.6577132781014055, -0.20172792183704621`}, {
        0.6674927677691175, -0.16102692739973995`}, {
        0.6693415787947472, -0.15338386553572964`}, {
        0.6711903898203768, -0.14575005345905034`}, {
        0.6748880118716363, -0.13051225170387187`}, {
        0.6822832559741552, -0.10017027668723452`}, {
        0.6970737441791929, -0.040132869149116686`}, {0.7266547205892683, 
        0.07650525319843415}, {0.728658318029638, 0.08420504997595588}, {
        0.7306619154700078, 0.09187640511258109}, {0.7346691103507474, 
        0.10713173296388026`}, {0.7426835001122267, 0.13727876566976022`}, {
        0.7587122796351853, 0.19601030491373372`}, {0.7907698386811024, 
        0.3064363174569967}, {0.7927734361214722, 0.3129983122112355}, {
        0.794777033561842, 0.31951820259689834`}, {0.7987842284425817, 
        0.3324303583949046}, {0.799982301254143, 0.33621320306291114`}}], 
       LineBox[CompressedData["
1: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
k76d+T+z4nsD
        "]]}},
     AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
     Axes->True,
     AxesOrigin->{0, 0},
     DisplayFunction:>$DisplayFunction,
     FormatType->TraditionalForm,
     PlotRange->{{0, 6}, {-0.20172792183704621`, 0.33621320306291114`}},
     PlotRangeClipping->True,
     PlotRangePadding->{
       Scaled[0.02], 
       Scaled[0.02]}], {-1, -0.6180339887498948}, {
    Left, Bottom}, {2, 1.2360679774997896`}], GraphicsGroupBox[{
     {GrayLevel[0], 
      RectangleBox[{1.05, -0.45}, {1.425418994413408, 0.3499999999999999}]}, 
     {GrayLevel[1], EdgeForm[{GrayLevel[0], Thickness[0.001]}], 
      GraphicsGroupBox[{
        RectangleBox[{1, -0.4}, {1.3754189944134079`, 0.3999999999999999}], 
        InsetBox[
         GraphicsBox[{{{InsetBox[
              GraphicsBox[
               {RGBColor[0, 0, 1], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 0.08}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 2\"\>", {1.2100000000000002`, 0.58}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {RGBColor[1, 1, 0], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 1.24}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 1\"\>", {1.2100000000000002`, 1.74}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.37820393249936846`, 0.6, 0.6], Dashing[{0., Small}], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 2.4}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.5\"\>", {1.2100000000000002`, 2.9}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.1421359549995791, 0.6, 0.6], Thickness[Tiny], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 3.56}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.3\"\>", {1.2100000000000002`, 4.0600000000000005`},
               {-1, 0}, Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.9060679774997897, 0.6, 0.6], Thickness[Large], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 4.72}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.1\"\>", {1.2100000000000002`, 5.22}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.67, 0.6, 0.6], Dashing[{Small, Small}], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 5.88}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.05\"\>", {1.2100000000000002`, 6.38}, \
{-1, 0}, Automatic, {1, 0}]}}, {}},
          AspectRatio->2.1309523809523805`,
          FormatType->TraditionalForm,
          PlotRange->{{-0.1, 3.26}, {-0.1, 7.059999999999999}}], {1, -0.4}, {
         Left, Bottom}, {0.37541899441340787`, 0.7999999999999999}]}]}}]},
  AspectRatio->Automatic,
  Background->None,
  ColorOutput->Automatic,
  ImageSize->{671., Automatic},
  PlotRange->All]], "Output",
 CellChangeTimes->{
  3.54623313329417*^9, {3.54623316422757*^9, 3.546233175420794*^9}, 
   3.546233754573585*^9, 3.546233968450642*^9, 3.546234053655817*^9, 
   3.554125398455493*^9, 3.554126429021795*^9},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzdvQd8VNXTx72ySSgi9l7A3rB3pdgbdlEUlSoIoiIIKl0RpQkCovTeQXrv
vXdC7yEJBEKAhJoC8+733Dl37+IGNonP87zv+//8N3Lvljtnzjlzpvxm5s3K
9WpU+7pyvZpVKxd7pW7lb2vUrPpdsZdr1w3c8l/g8+Xr4/Nd8GExH/8Wn8/+
kcD/nT/9+MPt/x/fuNf8x+9zhi7Oy/3Qd/8nH7rW/Odiv2QdbDKreYX637b5
q0Pr2hVL/To3xZclckv6jg4bStzz0SVzDx/tvKrWbbFXFH96TunSpQOvEsse
faxSkUWpPCLyBz10bNXXS4s//lf0rgy5OWNnh3WP3Ven0JrjEiWZh+/bsi7+
ghNn5Iqs5Ck9Gn7erdDG42f41iWZhzcUijt+OrIHXex86NaT2//sXqda1Z5V
q1b15TN/L+xStUaja8bsywh+WdLrbW/7YP/bP1vuOypykaQt2f7xrQ/d8seO
dF+U8zvXZuwd161B9dZXzEnO9EWbe9FeAh5fulQeXL1a7OdLrl2779bEhFRz
pfcGzmw+8EC/N5s8emDTHt/Vzr335+xcctHxjBOez8XcI7LhcZGl9rcvOHNG
qnfr5tkmpZ0xXmP+kz/w98Qf6769q8Ndtdf6josUkuNrNte68+7i9WJPKK1R
N6THD5tbrVT54p1jj/nOiPj/PYSWP/4oP7Zs6ZLbu1XLOVUmTtjsHcKYqQ16
SbeSdT7aPmOVZfHdh1N2X5J+6qj+orm3sOaYxo9v3L/N+91aIp3/EPnWXOVz
7rE/GN5Zc1jy7PGl19/W5sF+t1cInZ/2gfmJdh9xumzSiJLLbnisa3RchjM+
Mzx9euuuXZb8OGjgai9FbZb8PY7RNFzVf7odTfTp05kPJe/f6h3Nl6M2TL13
56E93u9+JDKkn0gF72iOXHyxXHzkSDajcZZ+jC79v6N3m6XfyS79fO5gz5Q8
PK9G/XfbbPGdFHkybXG52JuL/5x/8ym7xUJm7e+aNaXm33+7dNUdNnRt+85/
LvLS+sXGsYsYZ/e5bYb5LnHuPZyctMXdABc6914RmTJe5A3vmA5efrlckZx8
7jEF5EZKozktKtep177b7+2+q1Ky5bxDyA2H3phLsw4t6Nm6apWvG3Xq0ue3
Su+XqTdhvy8z7CIc8Omn8ln//i7pFSdP3tL/1xazvMN5PnHlVoYzZ9zXne1w
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
trniiG8yW7ZsHMSz5JQIB60euHIyB/1k6i77otoo5/HOPXuATJj8fQ+LfyM8
USIxYd3QZjM6nPjzz/pdv/oqQ03FmOwCxGUcCec7lwvvdfczGe/uHVVvxPtl
637Z+q8/ujWpXu7juoN3+U4F3n3TIcEvWYcrLuvbIOnZq6/6qVSzsdFJGd7v
nyl+LPav8VXfqPJ1k07dOv7+TZWXW0w9YOLUTmJqTJRkJjeZ1rxCvdptu//Y
rWXNr2r+uTJf2mkL6YyYhY4ZF7i607lX5NixdPeL6mrAE2GFPUmBetsipvd3
69Z4SPXqqVe6bA+J8TkDztYbGBzzqXf3jOp2zVQnFHxb+rY2cfff9Polsw6L
7y3dbZK+Y2n7xx+5o8WWU77gfGR8kDi87rNNZqf4Tgtxu45bHrmj4kVL0lxe
PXp0ea2595fq70/ICmhSJ2LXfP/AY7e23Z4ejleRe3OzXSlFw7LbnO13OU8k
KP/A9m2OxatuLJtlSEQNwG2+UCZvHzSoyeTy5VOyYbJyKMRN+bb70TOlD8+p
vO72++oVWnfcLuQL5Exqk+XNqzSt+3PLRi1b1N9T5sbr27xc/49rx+5Ntwy/
/MzBSYklrnv4xh57Mj0MP/Xj1pYP9LqjygrfMZFoydi9ossjxZ55c0GqL3uO
/sfO5X8x4Fw+WROu4Opu5x7hMBJOjRdL+Yz/BdeHTaTR27emHk54Zsu+jZsG
DWuy8N13k7Jhv7L6bC+owzJGlv5u4qhOtTt2aDDg409bXT0rKcPKgWLpuwbW
+L7LxvwnTgXXtq7bIqdT198/Ze1hX5acfiFlRsVNt9717YWrjnlE0ckWGxvd
tezKx9oV3HDizI0Ze/rveqnY08X+2pVxjpk4t7/7spyz14G/uadwwft27Ejh
KEA1yqdwIGBAR3u//CPsfXfX3HXWiPhpxLIh+zoPqLumTJl437mZ6zvL1/qm
e/tk402/PPzbww02+E7YxP1oI4MTRjW7v/va2KXtQvl6Q2b8sCafNO9cq1vn
XzvUr938zhGbjwenC/5kVUjo9+TI298bXGVwr99716v8+ds/jdltxHc4vlqI
ZGBnXCpyiJevsPnrvzBwXLif+y/97rnYBg40MnCl93BY4M4hRGHxLjU2jFlo
obq4mrj74eqtc9cMHP/jzhIlEoJTFAKFeCN4cGXrY/Ycbk8fWfhdher94nwZ
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
h4I3+v1//obvgv8HyvqNgA==\
\>"]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[AliasDelimiter]", 
  RowBox[{"\[AliasDelimiter]", 
   RowBox[{"\[AliasDelimiter]", 
    RowBox[{"\[AliasDelimiter]", 
     RowBox[{"\[AliasDelimiter]", "\[AliasDelimiter]"}]}]}]}]}]], "Input",
 CellChangeTimes->{{3.554125545943529*^9, 3.554125546870975*^9}}],

Cell[BoxData[
 SuperscriptBox["\[AliasDelimiter]", "6"]], "Output",
 CellChangeTimes->{3.554126429160574*^9}]
}, Open  ]]
},
WindowSize->{935, 1028},
WindowMargins->{{272, Automatic}, {Automatic, 92}},
PrintingCopies->1,
PrintingPageRange->{Automatic, Automatic},
PrintingOptions->{"PaperOrientation"->"Portrait",
"PaperSize"->{Automatic, Automatic},
"PostScriptOutputFile"->"/home/honza/IF-Weibull.pdf"},
FrontEndVersion->"8.0 for Linux x86 (32-bit) (February 23, 2011)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[557, 20, 290, 5, 30, "Input"],
Cell[850, 27, 325, 7, 50, "Input"],
Cell[CellGroupData[{
Cell[1200, 38, 807, 20, 55, "Input"],
Cell[2010, 60, 943, 23, 62, "Output"]
}, Open  ]],
Cell[2968, 86, 199, 4, 30, "Input"],
Cell[CellGroupData[{
Cell[3192, 94, 620, 13, 50, "Input"],
Cell[3815, 109, 936, 22, 56, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4788, 136, 706, 13, 30, "Input"],
Cell[5497, 151, 1025, 23, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6559, 179, 410, 10, 30, "Input"],
Cell[6972, 191, 1513, 43, 84, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8522, 239, 579, 12, 30, "Input"],
Cell[9104, 253, 1190, 30, 67, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10331, 288, 363, 9, 30, "Input"],
Cell[10697, 299, 1070, 34, 128, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11804, 338, 597, 17, 30, "Input"],
Cell[12404, 357, 691, 22, 78, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13132, 384, 1001, 18, 30, "Input"],
Cell[14136, 404, 2261, 61, 103, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16434, 470, 503, 10, 30, "Input"],
Cell[16940, 482, 627, 20, 76, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17604, 507, 588, 12, 30, "Input"],
Cell[18195, 521, 452, 13, 59, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[18684, 539, 466, 11, 30, "Input"],
Cell[19153, 552, 788, 22, 114, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[19978, 579, 775, 20, 30, "Input"],
Cell[20756, 601, 612, 18, 67, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[21405, 624, 1048, 18, 30, "Input"],
Cell[22456, 644, 1204, 36, 49, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[23697, 685, 387, 7, 30, "Input"],
Cell[24087, 694, 1211, 39, 96, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[25335, 738, 343, 8, 30, "Input"],
Cell[25681, 748, 1600, 50, 96, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[27318, 803, 787, 20, 30, "Input"],
Cell[28108, 825, 4052, 120, 228, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[32197, 950, 505, 11, 30, "Input"],
Cell[32705, 963, 3411, 100, 216, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[36153, 1068, 343, 9, 30, "Input"],
Cell[36499, 1079, 3936, 116, 307, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[40472, 1200, 576, 17, 30, "Input"],
Cell[41051, 1219, 2820, 78, 185, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[43908, 1302, 405, 10, 30, "Input"],
Cell[44316, 1314, 3480, 101, 157, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[47833, 1420, 735, 17, 30, "Input"],
Cell[48571, 1439, 4980, 145, 292, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[53588, 1589, 319, 7, 30, "Input"],
Cell[53910, 1598, 4731, 137, 292, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[58678, 1740, 281, 6, 30, "Input"],
Cell[58962, 1748, 4280, 124, 223, "Output"]
}, Open  ]],
Cell[63257, 1875, 4840, 127, 283, "Input"],
Cell[68100, 2004, 241, 4, 30, "Input"],
Cell[CellGroupData[{
Cell[68366, 2012, 2286, 47, 240, "Input"],
Cell[70655, 2061, 108891, 1812, 199, 94562, 1575, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]],
Cell[179561, 3876, 85, 1, 30, "Input"],
Cell[179649, 3879, 172, 3, 88, "Input"],
Cell[179824, 3884, 271, 9, 10, "Text"],
Cell[180098, 3895, 290, 5, 30, "Input"],
Cell[180391, 3902, 325, 7, 50, "Input"],
Cell[CellGroupData[{
Cell[180741, 3913, 807, 20, 55, "Input"],
Cell[181551, 3935, 969, 24, 62, "Output"]
}, Open  ]],
Cell[182535, 3962, 256, 5, 30, "Input"],
Cell[CellGroupData[{
Cell[182816, 3971, 620, 13, 50, "Input"],
Cell[183439, 3986, 856, 19, 56, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[184332, 4010, 706, 13, 30, "Input"],
Cell[185041, 4025, 980, 20, 56, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[186058, 4050, 410, 10, 30, "Input"],
Cell[186471, 4062, 1340, 36, 84, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[187848, 4103, 579, 12, 30, "Input"],
Cell[188430, 4117, 1098, 26, 67, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[189565, 4148, 363, 9, 30, "Input"],
Cell[189931, 4159, 843, 27, 114, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[190811, 4191, 597, 17, 30, "Input"],
Cell[191411, 4210, 593, 19, 49, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[192041, 4234, 1001, 18, 30, "Input"],
Cell[193045, 4254, 1750, 44, 63, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[194832, 4303, 503, 10, 30, "Input"],
Cell[195338, 4315, 676, 21, 76, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[196051, 4341, 588, 12, 30, "Input"],
Cell[196642, 4355, 473, 13, 59, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[197152, 4373, 466, 11, 30, "Input"],
Cell[197621, 4386, 810, 22, 114, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[198468, 4413, 775, 20, 30, "Input"],
Cell[199246, 4435, 634, 18, 67, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[199917, 4458, 1048, 18, 30, "Input"],
Cell[200968, 4478, 1228, 36, 49, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[202233, 4519, 387, 7, 30, "Input"],
Cell[202623, 4528, 650, 20, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[203310, 4553, 343, 8, 30, "Input"],
Cell[203656, 4563, 673, 21, 50, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[204366, 4589, 787, 20, 30, "Input"],
Cell[205156, 4611, 2248, 69, 125, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[207441, 4685, 505, 11, 30, "Input"],
Cell[207949, 4698, 1797, 54, 100, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[209783, 4757, 343, 9, 30, "Input"],
Cell[210129, 4768, 2147, 65, 174, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[212313, 4838, 576, 17, 30, "Input"],
Cell[212892, 4857, 1513, 45, 83, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[214442, 4907, 405, 10, 30, "Input"],
Cell[214850, 4919, 1016, 31, 49, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[215903, 4955, 758, 17, 30, "Input"],
Cell[216664, 4974, 1854, 56, 129, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[218555, 5035, 371, 8, 30, "Input"],
Cell[218929, 5045, 1639, 50, 129, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[220605, 5100, 444, 8, 30, "Input"],
Cell[221052, 5110, 1395, 41, 101, "Output"]
}, Open  ]],
Cell[222462, 5154, 2104, 53, 113, "Input"],
Cell[224569, 5209, 241, 4, 30, "Input"],
Cell[CellGroupData[{
Cell[224835, 5217, 2237, 46, 240, "Input"],
Cell[227075, 5265, 39470, 676, 199, 25135, 438, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]],
Cell[266560, 5944, 270, 9, 10, "Text"],
Cell[266833, 5955, 290, 5, 30, "Input"],
Cell[267126, 5962, 325, 7, 50, "Input"],
Cell[CellGroupData[{
Cell[267476, 5973, 807, 20, 55, "Input"],
Cell[268286, 5995, 991, 24, 62, "Output"]
}, Open  ]],
Cell[269292, 6022, 298, 5, 30, "Input"],
Cell[CellGroupData[{
Cell[269615, 6031, 620, 13, 50, "Input"],
Cell[270238, 6046, 933, 22, 58, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[271208, 6073, 706, 13, 30, "Input"],
Cell[271917, 6088, 1147, 26, 59, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[273101, 6119, 410, 10, 30, "Input"],
Cell[273514, 6131, 1475, 41, 86, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[275026, 6177, 579, 12, 30, "Input"],
Cell[275608, 6191, 1224, 31, 69, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[276869, 6227, 363, 9, 30, "Input"],
Cell[277235, 6238, 1026, 33, 114, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[278298, 6276, 597, 17, 30, "Input"],
Cell[278898, 6295, 821, 27, 38, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[279756, 6327, 1001, 18, 30, "Input"],
Cell[280760, 6347, 1119, 23, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[281916, 6375, 503, 10, 30, "Input"],
Cell[282422, 6387, 698, 21, 76, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[283157, 6413, 588, 12, 30, "Input"],
Cell[283748, 6427, 473, 13, 59, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[284258, 6445, 466, 11, 30, "Input"],
Cell[284727, 6458, 810, 22, 114, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[285574, 6485, 775, 20, 30, "Input"],
Cell[286352, 6507, 634, 18, 67, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[287023, 6530, 1048, 18, 30, "Input"],
Cell[288074, 6550, 1228, 36, 49, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[289339, 6591, 387, 7, 30, "Input"],
Cell[289729, 6600, 721, 21, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[290487, 6626, 343, 8, 30, "Input"],
Cell[290833, 6636, 721, 21, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[291591, 6662, 787, 20, 30, "Input"],
Cell[292381, 6684, 2270, 71, 130, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[294688, 6760, 554, 12, 30, "Input"],
Cell[295245, 6774, 1854, 59, 110, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[297136, 6838, 392, 10, 30, "Input"],
Cell[297531, 6850, 2241, 70, 175, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[299809, 6925, 576, 17, 30, "Input"],
Cell[300388, 6944, 1375, 43, 78, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[301800, 6992, 405, 10, 30, "Input"],
Cell[302208, 7004, 1386, 43, 78, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[303631, 7052, 758, 17, 30, "Input"],
Cell[304392, 7071, 2616, 83, 137, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[307045, 7159, 475, 9, 30, "Input"],
Cell[307523, 7170, 2347, 73, 112, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[309907, 7248, 710, 12, 30, "Input"],
Cell[310620, 7262, 1507, 42, 69, "Output"]
}, Open  ]],
Cell[312142, 7307, 1894, 47, 83, "Input"],
Cell[314039, 7356, 241, 4, 30, "Input"],
Cell[CellGroupData[{
Cell[314305, 7364, 2286, 47, 240, "Input"],
Cell[316594, 7413, 103564, 1725, 357, 69480, 1164, "CachedBoxData", \
"BoxData", "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[420195, 9143, 284, 6, 30, "Input"],
Cell[420482, 9151, 109, 2, 30, "Output"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
