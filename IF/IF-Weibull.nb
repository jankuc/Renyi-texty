(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    484275,      10223]
NotebookOptionsPosition[    474414,       9893]
NotebookOutlinePosition[    474958,       9913]
CellTagsIndexPosition[    474915,       9910]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"Weibull", ":"}]], "Input",
 CellChangeTimes->{{3.543684992882703*^9, 3.543684994655665*^9}, {
  3.544320894879453*^9, 3.544320906231942*^9}, {3.544321013728986*^9, 
  3.544321015677552*^9}, {3.546149536487394*^9, 3.546149537999375*^9}},
 EmphasizeSyntaxErrors->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"ClearAll", "[", 
   RowBox[{"\[Alpha]", ",", "\[Sigma]", ",", "\[Mu]", ",", "x", ",", "k"}], 
   "]"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.54613653746201*^9, 3.546136542655197*^9}, {
  3.546136596080742*^9, 3.546136617338891*^9}, {3.546139146090529*^9, 
  3.546139146249962*^9}, {3.555264411086697*^9, 3.555264411288873*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p", " ", "=", " ", 
  RowBox[{
   FractionBox["k", "\[Lambda]"], 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
    RowBox[{"k", "-", "1"}]]}]}]], "Input",
 CellChangeTimes->{{3.543684783475436*^9, 3.543684946824956*^9}, 
   3.543685129663494*^9, {3.544295734613175*^9, 3.54429574288267*^9}, {
   3.54429580082901*^9, 3.54429582329368*^9}, {3.544320780873962*^9, 
   3.544320785346142*^9}, 3.544320837287442*^9, {3.544320881922005*^9, 
   3.54432088239278*^9}, {3.54432100764836*^9, 3.544321019573801*^9}, 
   3.546149541553032*^9}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", "k", 
   " ", 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
    RowBox[{
     RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"]], "Output",
 CellChangeTimes->{
  3.544320837880473*^9, {3.544320883580563*^9, 3.544320911227469*^9}, 
   3.545309803843712*^9, 3.546016483142384*^9, 3.546017657044242*^9, 
   3.546060076762132*^9, 3.546060141670154*^9, 3.546060377463162*^9, 
   3.546061431182232*^9, 3.54606188717779*^9, 3.546071462150901*^9, 
   3.546136812639187*^9, 3.546138975120109*^9, 3.546148046460689*^9, 
   3.546149544392845*^9, 3.546151403683482*^9, {3.54623018096315*^9, 
   3.546230186401331*^9}, 3.554124823373607*^9, 3.554125865604088*^9, 
   3.55526441361957*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Theta]", " ", "=", " ", "k"}], ";"}]], "Input",
 CellChangeTimes->{{3.546137329720142*^9, 3.546137340576589*^9}, {
  3.546149548558869*^9, 3.546149554463107*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"ss", " ", "=", " ", 
   RowBox[{"FullSimplify", "[", 
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{"Log", "[", "p", "]"}], ",", "\[Theta]"}], "]"}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.543684996758039*^9, 3.543685116992625*^9}, {
   3.543685161495624*^9, 3.543685164824434*^9}, {3.543685617602922*^9, 
   3.543685622261405*^9}, {3.544295746546906*^9, 3.544295827428027*^9}, {
   3.544295874222879*^9, 3.544295884036298*^9}, 3.546016486016091*^9, {
   3.54601942039296*^9, 3.546019421197285*^9}, {3.546137342783463*^9, 
   3.54613734607702*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"1", "-", 
   RowBox[{"k", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        FractionBox[
         RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], ")"}], " ", 
    RowBox[{"Log", "[", 
     FractionBox[
      RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], "]"}]}]}], "k"]], "Output",
 CellChangeTimes->{
  3.544295884678365*^9, 3.545309805435313*^9, 3.546016487855942*^9, 
   3.546017670089106*^9, 3.546019421888676*^9, 3.546059377336055*^9, 
   3.546060078214513*^9, {3.546060139149627*^9, 3.546060144271088*^9}, 
   3.546060382291988*^9, 3.546061435830015*^9, 3.546061887191896*^9, 
   3.546071462301595*^9, 3.546136812733527*^9, {3.546137347255125*^9, 
   3.546137353812429*^9}, 3.54613897527059*^9, 3.546148046689522*^9, 
   3.546149558534132*^9, 3.546232064476071*^9, 3.554124824098476*^9, 
   3.554125865785223*^9, 3.555264417383193*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ss", "'"}], " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"D", "[", 
    RowBox[{"ss", ",", "\[Theta]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.543685180126496*^9, 3.543685298634426*^9}, {
   3.543685431540192*^9, 3.543685489527895*^9}, 3.543685534481716*^9, {
   3.543685624867701*^9, 3.543685665571384*^9}, {3.543688058809387*^9, 
   3.543688137132826*^9}, {3.54368832453227*^9, 3.543688330973921*^9}, {
   3.544295753339424*^9, 3.544295760783175*^9}, {3.544295853271568*^9, 
   3.544295889194162*^9}, {3.546016489095013*^9, 3.54601649563242*^9}, {
   3.546019427600456*^9, 3.546019428430676*^9}, {3.54613735651055*^9, 
   3.546137357241563*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox["1", 
    SuperscriptBox["k", "2"]]}], "-", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"], " ", 
   SuperscriptBox[
    RowBox[{"Log", "[", 
     FractionBox[
      RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], "]"}], "2"]}]}]], "Output",
 CellChangeTimes->{{3.543685658802668*^9, 3.54368566906248*^9}, {
   3.54368807593941*^9, 3.543688142568622*^9}, 3.543688332640362*^9, {
   3.54429586658533*^9, 3.544295890282246*^9}, 3.545309806594238*^9, {
   3.54601648969558*^9, 3.546016496189694*^9}, 3.546017677241552*^9, 
   3.546019429586647*^9, 3.546059378810901*^9, 3.546060079358672*^9, 
   3.546060145605671*^9, 3.546060384883913*^9, 3.546061436928236*^9, 
   3.546061887206539*^9, 3.546071462474284*^9, 3.546136812904919*^9, 
   3.546137359182575*^9, 3.546138975369357*^9, 3.546148046818373*^9, 
   3.546149560252101*^9, 3.54623206886184*^9, 3.554124824250654*^9, 
   3.554125865995926*^9, 3.555264418538679*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"p", "^", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}], "*", "ss"}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.546016522942259*^9, 3.546016539967992*^9}, {
   3.546017704408171*^9, 3.546017705125968*^9}, 3.546019441035926*^9, {
   3.546019471091529*^9, 3.546019479505023*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", 
         SuperscriptBox[
          RowBox[{"(", 
           FractionBox[
            RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", 
       "k", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         FractionBox[
          RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
    RowBox[{"1", "+", "\[Alpha]"}]], " ", 
   RowBox[{"(", 
    RowBox[{"1", "-", 
     RowBox[{"k", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SuperscriptBox[
         RowBox[{"(", 
          FractionBox[
           RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], ")"}], 
      " ", 
      RowBox[{"Log", "[", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], "]"}]}]}], ")"}]}], 
  "k"]], "Output",
 CellChangeTimes->{
  3.546016544655516*^9, {3.546017682666078*^9, 3.546017707524088*^9}, 
   3.546019442560441*^9, 3.546019480115117*^9, 3.546060081264836*^9, 
   3.546060146559043*^9, 3.546060400916709*^9, 3.546061439971061*^9, 
   3.546061887221677*^9, 3.546071464395533*^9, 3.546136814598201*^9, 
   3.546137368746807*^9, 3.546138977048079*^9, 3.54614804861861*^9, 
   3.546149564604638*^9, 3.546149648173352*^9, 3.546232072442872*^9, 
   3.554124825685968*^9, 3.554125867075418*^9, 3.555264420607619*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"csIntCitatel1", "/.", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], "\[Rule]", " ", 
     RowBox[{"y", "*", "\[Lambda]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016644463204*^9, 3.546016698494855*^9}, {
  3.546017718072268*^9, 3.546017718824221*^9}, {3.546019484592136*^9, 
  3.546019489873669*^9}, {3.5460588628943*^9, 3.546058863025369*^9}, {
  3.546058985559764*^9, 3.54605898695691*^9}, {3.546149570336845*^9, 
  3.546149571255931*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", 
         SuperscriptBox["y", "k"]}]], " ", "k", " ", 
       SuperscriptBox["y", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
    RowBox[{"1", "+", "\[Alpha]"}]], " ", 
   RowBox[{"(", 
    RowBox[{"1", "-", 
     RowBox[{"k", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SuperscriptBox["y", "k"]}], ")"}], " ", 
      RowBox[{"Log", "[", "y", "]"}]}]}], ")"}]}], "k"]], "Output",
 CellChangeTimes->{
  3.546016699867985*^9, {3.54601771087677*^9, 3.546017720075646*^9}, 
   3.546019451857504*^9, 3.54601949082593*^9, 3.546058865086693*^9, 
   3.546058991110302*^9, 3.546059305292639*^9, {3.546060081368136*^9, 
   3.546060082414614*^9}, 3.546060147815039*^9, 3.546060407046361*^9, 
   3.546061531311124*^9, 3.546061887295093*^9, 3.546071465443946*^9, 
   3.546136815322759*^9, 3.546137371159345*^9, 3.546138977799651*^9, 
   3.546148049399068*^9, 3.546149656219562*^9, 3.546232076199355*^9, 
   3.554124826345241*^9, 3.554125867859221*^9, 3.555264421259118*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel3", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"csIntCitatel2", "*", "\[Lambda]"}], "/.", 
    RowBox[{"y", "\[Rule]", " ", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{"1", "/", "k"}], ")"}]}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232088390435*^9, 3.546232095185625*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", 
         SuperscriptBox[
          RowBox[{"(", 
           SuperscriptBox["t", 
            FractionBox["1", "k"]], ")"}], "k"]}]], " ", "k", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         SuperscriptBox["t", 
          FractionBox["1", "k"]], ")"}], 
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
    RowBox[{"1", "+", "\[Alpha]"}]], " ", "\[Lambda]", " ", 
   RowBox[{"(", 
    RowBox[{"1", "-", 
     RowBox[{"k", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SuperscriptBox[
         RowBox[{"(", 
          SuperscriptBox["t", 
           FractionBox["1", "k"]], ")"}], "k"]}], ")"}], " ", 
      RowBox[{"Log", "[", 
       SuperscriptBox["t", 
        FractionBox["1", "k"]], "]"}]}]}], ")"}]}], "k"]], "Output",
 CellChangeTimes->{3.546232100824901*^9, 3.554124827447808*^9, 
  3.554125868654988*^9, 3.555264422196014*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel4", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"csIntCitatel3", "/", "k"}], "*", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "k"}], ")"}], "/", "k"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232112593013*^9, 3.546232125917882*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", "t"}]], " ", 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", "t"}]], " ", "k", " ", 
       SuperscriptBox["t", 
        FractionBox[
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}], "k"]]}], "\[Lambda]"], ")"}], 
    "\[Alpha]"], " ", 
   RowBox[{"(", 
    RowBox[{"1", "+", 
     RowBox[{"Log", "[", "t", "]"}], "-", 
     RowBox[{"t", " ", 
      RowBox[{"Log", "[", "t", "]"}]}]}], ")"}]}], "k"]], "Output",
 CellChangeTimes->{3.546232131595805*^9, 3.554124828633268*^9, 
  3.554125869546646*^9, 3.555264423184855*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel5", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"Integrate", "[", 
     RowBox[{"csIntCitatel4", ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "0", ",", "\[Infinity]"}], "}"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\[Alpha]", ">", "0"}], ",", 
      RowBox[{"k", ">", "0"}]}], "}"}]}], "]"}], " "}]], "Input",
 CellChangeTimes->{{3.546016758763041*^9, 3.546016792970542*^9}, {
  3.546017733204061*^9, 3.546017740186443*^9}, {3.546017914630278*^9, 
  3.546017915139312*^9}, {3.54601813955664*^9, 3.546018141998787*^9}, {
  3.546019493851544*^9, 3.546019499184226*^9}, {3.546058803868124*^9, 
  3.546058826478995*^9}, {3.546058870461028*^9, 3.546058872003744*^9}, {
  3.546059018757644*^9, 3.546059019951728*^9}, {3.546059209756854*^9, 
  3.546059224271504*^9}, {3.546060118428053*^9, 3.546060118951836*^9}, {
  3.546060429719045*^9, 3.546060435859049*^9}, {3.54606155661684*^9, 
  3.546061556750753*^9}, {3.54606187684573*^9, 3.546061879156262*^9}, {
  3.546149679351288*^9, 3.546149686924944*^9}, {3.546232153175871*^9, 
  3.54623216243717*^9}, {3.555264427860503*^9, 3.555264430260362*^9}, {
  3.555264649546884*^9, 3.555264655661618*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"\[Alpha]", " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
      RowBox[{
       RowBox[{"-", "2"}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}]}]], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox["k", "\[Lambda]"], ")"}], "\[Alpha]"], " ", 
     RowBox[{"Gamma", "[", 
      RowBox[{"1", "+", "\[Alpha]", "-", 
       FractionBox["\[Alpha]", "k"]}], "]"}], " ", 
     RowBox[{"(", 
      RowBox[{"k", "-", 
       RowBox[{"Log", "[", 
        RowBox[{"1", "+", "\[Alpha]"}], "]"}], "+", 
       RowBox[{"PolyGamma", "[", 
        RowBox[{"0", ",", 
         RowBox[{"1", "+", "\[Alpha]", "-", 
          FractionBox["\[Alpha]", "k"]}]}], "]"}]}], ")"}]}], 
    SuperscriptBox["k", "2"]], ",", 
   RowBox[{
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}], ">", "\[Alpha]"}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.546016797608153*^9, 3.546017744115164*^9, {3.546017901155742*^9, 
   3.546017918255887*^9}, 3.54601814479272*^9, 3.5460194592406*^9, 
   3.546019501847466*^9, 3.546058816227488*^9, 3.546058858910903*^9, 
   3.546058988908802*^9, 3.546059027020108*^9, {3.546059207468971*^9, 
   3.546059213730049*^9}, 3.546059311153677*^9, 3.54606008545984*^9, {
   3.546060121584368*^9, 3.54606015090936*^9}, 3.546060482353594*^9, 
   3.546061561105924*^9, 3.546061888934606*^9, 3.546071469576597*^9, 
   3.546136819048198*^9, 3.546137375365945*^9, 3.546138981516168*^9, 
   3.546148053135883*^9, 3.546150578307016*^9, 3.5462322891228228`*^9, 
   3.554124959908049*^9, 3.554126003491012*^9, 3.55526456291598*^9, 
   3.555264725296231*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"p", "^", 
    RowBox[{"(", 
     RowBox[{"1", "+", "\[Alpha]"}], ")"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016812881654*^9, 3.546016818147665*^9}, {
  3.546016886250683*^9, 3.546016904857094*^9}, {3.546018151081055*^9, 
  3.546018151902321*^9}, {3.546019505441384*^9, 3.546019506907304*^9}, {
  3.546059876912032*^9, 3.546059883931349*^9}, {3.546060057180457*^9, 
  3.546060062381365*^9}}],

Cell[BoxData[
 SuperscriptBox[
  RowBox[{"(", 
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       SuperscriptBox[
        RowBox[{"(", 
         FractionBox[
          RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", "k",
      " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
  RowBox[{"1", "+", "\[Alpha]"}]]], "Output",
 CellChangeTimes->{3.546230203148988*^9, 3.554124960246277*^9, 
  3.554126003630607*^9, 3.555264790746181*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"csIntJmenovatel1", "/.", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], "\[Rule]", " ", 
     RowBox[{"y", "*", "\[Lambda]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016918820028*^9, 3.546016933459735*^9}, {
  3.546018162034847*^9, 3.546018162802109*^9}, {3.546019511970786*^9, 
  3.546019518337126*^9}, {3.546059893179542*^9, 3.546059893847781*^9}, {
  3.546060047266137*^9, 3.546060052681203*^9}, {3.546230217034243*^9, 
  3.546230217998498*^9}}],

Cell[BoxData[
 SuperscriptBox[
  RowBox[{"(", 
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       SuperscriptBox["y", "k"]}]], " ", "k", " ", 
     SuperscriptBox["y", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
  RowBox[{"1", "+", "\[Alpha]"}]]], "Output",
 CellChangeTimes->{{3.546230207442299*^9, 3.546230219675734*^9}, 
   3.554124960322561*^9, 3.554126003743395*^9, 3.555264794723352*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel3", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"csIntJmenovatel2", "*", "\[Lambda]"}], "/.", 
    RowBox[{"y", "\[Rule]", " ", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{"1", "/", "k"}], ")"}]}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.54623072884787*^9, 3.546230785760333*^9}, {
  3.546231604373572*^9, 3.546231605426678*^9}, {3.546231716620151*^9, 
  3.546231717085787*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", 
        SuperscriptBox[
         RowBox[{"(", 
          SuperscriptBox["t", 
           FractionBox["1", "k"]], ")"}], "k"]}]], " ", "k", " ", 
      SuperscriptBox[
       RowBox[{"(", 
        SuperscriptBox["t", 
         FractionBox["1", "k"]], ")"}], 
       RowBox[{
        RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
   RowBox[{"1", "+", "\[Alpha]"}]], " ", "\[Lambda]"}]], "Output",
 CellChangeTimes->{{3.546230757338739*^9, 3.546230786864854*^9}, 
   3.54623122497391*^9, 3.546231390679448*^9, 3.546231620590633*^9, 
   3.546231718726483*^9, 3.546231912776218*^9, 3.554124960707793*^9, 
   3.554126004060839*^9, 3.555264797210443*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel4", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"csIntJmenovatel3", "/", "k"}], "*", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "k"}], ")"}], "/", "k"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546231135452288*^9, 3.546231187522384*^9}, 
   3.546231380041735*^9, {3.546231608893195*^9, 3.546231609558657*^9}, {
   3.546231727310628*^9, 3.546231732399831*^9}, {3.546231878599405*^9, 
   3.546231893664122*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"-", "t"}]], " ", 
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", "t"}]], " ", "k", " ", 
      SuperscriptBox["t", 
       FractionBox[
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}], "k"]]}], "\[Lambda]"], ")"}], 
   "\[Alpha]"]}]], "Output",
 CellChangeTimes->{
  3.5462311903916*^9, 3.54623123012743*^9, 3.546231393222635*^9, 
   3.546231736337671*^9, {3.546231899759423*^9, 3.546231920689016*^9}, 
   3.554124960999412*^9, 3.554126004391079*^9, 3.555264799725232*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel5", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"Integrate", "[", 
     RowBox[{"csIntJmenovatel4", ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "0", ",", "\[Infinity]"}], "}"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\[Alpha]", ">", "0"}], ",", 
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546017079018856*^9, 3.546017090969569*^9}, {
  3.546018190056803*^9, 3.546018190821094*^9}, {3.546059043677427*^9, 
  3.54605904460088*^9}, {3.546059403368323*^9, 3.546059411524818*^9}, {
  3.546059479614725*^9, 3.546059492483282*^9}, {3.546059617399394*^9, 
  3.546059617680817*^9}, {3.546059915271946*^9, 3.546059916341114*^9}, {
  3.546060024912348*^9, 3.546060025553251*^9}, {3.546061569414866*^9, 
  3.546061603372963*^9}, {3.54606187218996*^9, 3.546061873288195*^9}, {
  3.546230234851797*^9, 3.546230235704077*^9}, {3.54623031496448*^9, 
  3.546230316811469*^9}, {3.546230894174747*^9, 3.54623093187054*^9}, {
  3.546231021434708*^9, 3.546231058033388*^9}, {3.546231204938011*^9, 
  3.546231254795637*^9}, {3.54623130518147*^9, 3.546231317577529*^9}, {
  3.55526480530414*^9, 3.555264821300079*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}]}]], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      FractionBox["k", "\[Lambda]"], ")"}], "\[Alpha]"], " ", 
    RowBox[{"Gamma", "[", 
     RowBox[{"1", "+", "\[Alpha]", "-", 
      FractionBox["\[Alpha]", "k"]}], "]"}]}], ",", 
   RowBox[{"\[Alpha]", "<", 
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.546230539424707*^9, 3.546230928296439*^9, 3.546231130736478*^9, 
   3.546231217042055*^9, {3.546231310240832*^9, 3.546231332557165*^9}, 
   3.546231408953687*^9, 3.546231758805175*^9, 3.546231931318572*^9, 
   3.55412497644567*^9, 3.55412602044187*^9, 3.555264836734777*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cs", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"csIntCitatel5", "/", "csIntJmenovatel5"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546017159619789*^9, 3.546017171553549*^9}, {
   3.546018198699244*^9, 3.54601820322215*^9}, 3.546061584597621*^9, {
   3.546061615263666*^9, 3.546061627686996*^9}, {3.546232301287677*^9, 
   3.546232306940481*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"\[Alpha]", " ", 
     RowBox[{"(", 
      RowBox[{"k", "-", 
       RowBox[{"Log", "[", 
        RowBox[{"1", "+", "\[Alpha]"}], "]"}], "+", 
       RowBox[{"PolyGamma", "[", 
        RowBox[{"0", ",", 
         RowBox[{"1", "+", "\[Alpha]", "-", 
          FractionBox["\[Alpha]", "k"]}]}], "]"}]}], ")"}]}], 
    RowBox[{
     SuperscriptBox["k", "2"], " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], ",", 
   RowBox[{
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}], ">", "\[Alpha]"}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232321705469*^9, 3.554124976721383*^9, 
  3.554126020597159*^9, 3.555264841750114*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"cs", "'"}], " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"D", "[", 
    RowBox[{"cs", ",", "\[Theta]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546017177523059*^9, 3.546017189050696*^9}, {
  3.546018219369372*^9, 3.546018251272656*^9}, {3.546137392518803*^9, 
  3.546137393253288*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"\[Alpha]", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "k"}], " ", 
        RowBox[{"(", 
         RowBox[{"k", "-", 
          RowBox[{"2", " ", 
           RowBox[{"Log", "[", 
            RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
          RowBox[{"2", " ", 
           RowBox[{"PolyGamma", "[", 
            RowBox[{"0", ",", 
             RowBox[{"1", "+", "\[Alpha]", "-", 
              FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], "+", 
       RowBox[{"\[Alpha]", " ", 
        RowBox[{"PolyGamma", "[", 
         RowBox[{"1", ",", 
          RowBox[{"1", "+", "\[Alpha]", "-", 
           FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], 
    RowBox[{
     SuperscriptBox["k", "4"], " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], ",", 
   RowBox[{
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}], ">", "\[Alpha]"}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232329374177*^9, 3.554124977154078*^9, 
  3.554126021083231*^9, 3.55526484945301*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia", " ", "=", 
  RowBox[{"FullSimplify", "[", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"ss", "'"}], " ", "-", " ", 
      RowBox[{"cs", "'"}], "-", 
      RowBox[{"\[Alpha]", 
       RowBox[{"(", 
        RowBox[{"ss", "-", "cs"}], ")"}], 
       RowBox[{"(", 
        RowBox[{"cs", "-", "ss"}], ")"}]}]}], ")"}], "*", 
    RowBox[{"p", "^", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016927559429*^9, 3.546016927697169*^9}, {
   3.546017069821145*^9, 3.546017085073989*^9}, 3.546017230368702*^9, {
   3.546017453638702*^9, 3.546017454633499*^9}, {3.546017487540381*^9, 
   3.546017511750122*^9}, 3.546060275246113*^9, {3.546060594894228*^9, 
   3.546060607304117*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      FractionBox[
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"-", 
          SuperscriptBox[
           RowBox[{"(", 
            FractionBox[
             RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", 
        "k", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          FractionBox[
           RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
     RowBox[{"1", "+", "\[Alpha]"}]], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", 
        SuperscriptBox["k", "2"]]}], "-", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         FractionBox[
          RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"], " ", 
       SuperscriptBox[
        RowBox[{"Log", "[", 
         FractionBox[
          RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], "]"}], "2"]}], "+", 
      FractionBox[
       RowBox[{"\[Alpha]", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "\[Alpha]"}], " ", 
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              RowBox[{"k", " ", 
               RowBox[{"(", 
                RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", "1"}], "+", 
                 SuperscriptBox[
                  RowBox[{"(", 
                   FractionBox[
                    RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], 
                ")"}], " ", 
               RowBox[{"Log", "[", 
                FractionBox[
                 RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], "]"}]}]}], 
             ")"}]}], "+", 
           RowBox[{"\[Alpha]", " ", 
            RowBox[{"PolyGamma", "[", 
             RowBox[{"0", ",", 
              RowBox[{"1", "+", "\[Alpha]", "-", 
               FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}], "2"]}], 
       RowBox[{
        SuperscriptBox["k", "4"], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"]}]], "+", 
      FractionBox[
       RowBox[{"\[Alpha]", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"k", " ", 
           RowBox[{"(", 
            RowBox[{"k", "-", 
             RowBox[{"2", " ", 
              RowBox[{"Log", "[", 
               RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
             RowBox[{"2", " ", 
              RowBox[{"PolyGamma", "[", 
               RowBox[{"0", ",", 
                RowBox[{"1", "+", "\[Alpha]", "-", 
                 FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], "-", 
          RowBox[{"\[Alpha]", " ", 
           RowBox[{"PolyGamma", "[", 
            RowBox[{"1", ",", 
             RowBox[{"1", "+", "\[Alpha]", "-", 
              FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], 
       RowBox[{
        SuperscriptBox["k", "4"], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]}], ")"}]}], ",", 
   RowBox[{
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}], ">", "\[Alpha]"}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232363544007*^9, 3.554125005987716*^9, 
  3.554126050731914*^9, 3.555264895458327*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"Ia", "/.", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], "\[Rule]", 
     RowBox[{"y", "*", "\[Lambda]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016832069324*^9, 3.54601683491256*^9}, {
  3.546016912126374*^9, 3.546016916727737*^9}, {3.546017322178493*^9, 
  3.546017372508301*^9}, {3.546017463020216*^9, 3.54601752428375*^9}, {
  3.546232394685446*^9, 3.546232395694052*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      FractionBox[
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"-", 
          SuperscriptBox["y", "k"]}]], " ", "k", " ", 
        SuperscriptBox["y", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
     RowBox[{"1", "+", "\[Alpha]"}]], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", 
        SuperscriptBox["k", "2"]]}], "-", 
      RowBox[{
       SuperscriptBox["y", "k"], " ", 
       SuperscriptBox[
        RowBox[{"Log", "[", "y", "]"}], "2"]}], "+", 
      FractionBox[
       RowBox[{"\[Alpha]", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              RowBox[{"k", " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", "1"}], "+", 
                 SuperscriptBox["y", "k"]}], ")"}], " ", 
               RowBox[{"(", 
                RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
               RowBox[{"Log", "[", "y", "]"}]}]}], ")"}]}], "-", 
           RowBox[{"\[Alpha]", " ", 
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
           RowBox[{"\[Alpha]", " ", 
            RowBox[{"PolyGamma", "[", 
             RowBox[{"0", ",", 
              RowBox[{"1", "+", "\[Alpha]", "-", 
               FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}], "2"]}], 
       RowBox[{
        SuperscriptBox["k", "4"], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"]}]], "+", 
      FractionBox[
       RowBox[{"\[Alpha]", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"k", " ", 
           RowBox[{"(", 
            RowBox[{"k", "-", 
             RowBox[{"2", " ", 
              RowBox[{"Log", "[", 
               RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
             RowBox[{"2", " ", 
              RowBox[{"PolyGamma", "[", 
               RowBox[{"0", ",", 
                RowBox[{"1", "+", "\[Alpha]", "-", 
                 FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], "-", 
          RowBox[{"\[Alpha]", " ", 
           RowBox[{"PolyGamma", "[", 
            RowBox[{"1", ",", 
             RowBox[{"1", "+", "\[Alpha]", "-", 
              FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], 
       RowBox[{
        SuperscriptBox["k", "4"], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]}], ")"}]}], ",", 
   RowBox[{
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}], ">", "\[Alpha]"}]}], "]"}]], "Output",
 CellChangeTimes->{{3.546232392215838*^9, 3.546232413442848*^9}, 
   3.554125021209639*^9, 3.554126065939538*^9, 3.555264934510473*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"Ia1", "*", "\[Lambda]"}], "/.", 
    RowBox[{"y", "\[Rule]", " ", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{"1", "/", "k"}], ")"}]}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232427015182*^9, 3.546232435156028*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      FractionBox[
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"-", 
          SuperscriptBox[
           RowBox[{"(", 
            SuperscriptBox["t", 
             FractionBox["1", "k"]], ")"}], "k"]}]], " ", "k", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          SuperscriptBox["t", 
           FractionBox["1", "k"]], ")"}], 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
     RowBox[{"1", "+", "\[Alpha]"}]], " ", "\[Lambda]", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", 
        SuperscriptBox["k", "2"]]}], "-", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         SuperscriptBox["t", 
          FractionBox["1", "k"]], ")"}], "k"], " ", 
       SuperscriptBox[
        RowBox[{"Log", "[", 
         SuperscriptBox["t", 
          FractionBox["1", "k"]], "]"}], "2"]}], "+", 
      FractionBox[
       RowBox[{"\[Alpha]", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              RowBox[{"k", " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", "1"}], "+", 
                 SuperscriptBox[
                  RowBox[{"(", 
                   SuperscriptBox["t", 
                    FractionBox["1", "k"]], ")"}], "k"]}], ")"}], " ", 
               RowBox[{"(", 
                RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
               RowBox[{"Log", "[", 
                SuperscriptBox["t", 
                 FractionBox["1", "k"]], "]"}]}]}], ")"}]}], "-", 
           RowBox[{"\[Alpha]", " ", 
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
           RowBox[{"\[Alpha]", " ", 
            RowBox[{"PolyGamma", "[", 
             RowBox[{"0", ",", 
              RowBox[{"1", "+", "\[Alpha]", "-", 
               FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}], "2"]}], 
       RowBox[{
        SuperscriptBox["k", "4"], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"]}]], "+", 
      FractionBox[
       RowBox[{"\[Alpha]", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"k", " ", 
           RowBox[{"(", 
            RowBox[{"k", "-", 
             RowBox[{"2", " ", 
              RowBox[{"Log", "[", 
               RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
             RowBox[{"2", " ", 
              RowBox[{"PolyGamma", "[", 
               RowBox[{"0", ",", 
                RowBox[{"1", "+", "\[Alpha]", "-", 
                 FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], "-", 
          RowBox[{"\[Alpha]", " ", 
           RowBox[{"PolyGamma", "[", 
            RowBox[{"1", ",", 
             RowBox[{"1", "+", "\[Alpha]", "-", 
              FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], 
       RowBox[{
        SuperscriptBox["k", "4"], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]]}], ")"}]}], ",", 
   RowBox[{
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}], ">", "\[Alpha]"}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232478566571*^9, 3.554125041162726*^9, 
  3.554126087062014*^9, 3.555264963740088*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia3", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Ia2", "/", "k"}], "*", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "k"}], ")"}], "/", "k"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.54623247327657*^9, 3.546232478732023*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    FractionBox["1", 
     SuperscriptBox["k", "5"]], 
    RowBox[{
     SuperscriptBox["t", 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       FractionBox["1", "k"]}]], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", "t"}]], " ", "k", " ", 
         SuperscriptBox["t", 
          FractionBox[
           RowBox[{
            RowBox[{"-", "1"}], "+", "k"}], "k"]]}], "\[Lambda]"], ")"}], 
      RowBox[{"1", "+", "\[Alpha]"}]], " ", "\[Lambda]", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", 
        SuperscriptBox["k", "2"]}], "-", 
       RowBox[{
        SuperscriptBox["k", "2"], " ", "t", " ", 
        SuperscriptBox[
         RowBox[{"Log", "[", "t", "]"}], "2"]}], "+", 
       FractionBox[
        RowBox[{"\[Alpha]", " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"k", "-", 
            RowBox[{"k", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "1"}], "+", "t"}], ")"}], " ", 
             RowBox[{"(", 
              RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
             RowBox[{"Log", "[", "t", "]"}]}], "+", 
            RowBox[{"\[Alpha]", " ", 
             RowBox[{"Log", "[", 
              RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "-", 
            RowBox[{"\[Alpha]", " ", 
             RowBox[{"PolyGamma", "[", 
              RowBox[{"0", ",", 
               RowBox[{"1", "+", "\[Alpha]", "-", 
                FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}], "2"]}], 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"]], "+", 
       FractionBox[
        RowBox[{"\[Alpha]", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{"k", "-", 
              RowBox[{"2", " ", 
               RowBox[{"Log", "[", 
                RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
              RowBox[{"2", " ", 
               RowBox[{"PolyGamma", "[", 
                RowBox[{"0", ",", 
                 RowBox[{"1", "+", "\[Alpha]", "-", 
                  FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], "-", 
           RowBox[{"\[Alpha]", " ", 
            RowBox[{"PolyGamma", "[", 
             RowBox[{"1", ",", 
              RowBox[{"1", "+", "\[Alpha]", "-", 
               FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], 
        RowBox[{"1", "+", "\[Alpha]"}]]}], ")"}]}]}], ",", 
   RowBox[{
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}], ">", "\[Alpha]"}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232498458661*^9, 3.554125048505696*^9, 
  3.554126094475435*^9, 3.555264986231152*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia4", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"Integrate", "[", 
     RowBox[{"Ia3", ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "0", ",", "\[Infinity]"}], "}"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546017553376211*^9, 3.546017578186591*^9}, {
  3.546060190028669*^9, 3.546060215541151*^9}, {3.546232494373554*^9, 
  3.546232519267088*^9}, {3.555264995524204*^9, 3.555264996123785*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{"-", 
    RowBox[{
     FractionBox["1", 
      SuperscriptBox["k", "4"]], 
     RowBox[{
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
       RowBox[{
        RowBox[{"-", "3"}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", 
           FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}]}]], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        FractionBox["k", "\[Lambda]"], ")"}], "\[Alpha]"], " ", 
      RowBox[{"Gamma", "[", 
       RowBox[{"1", "+", "\[Alpha]", "-", 
        FractionBox["\[Alpha]", "k"]}], "]"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"k", "+", 
           RowBox[{
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "2"}], " ", "k"}], "+", 
              RowBox[{"2", " ", "\[Alpha]"}], "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"k", "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", 
                  "\[Alpha]"}]}], ")"}], " ", 
               RowBox[{"Log", "[", 
                RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}]}]}], ")"}]}],
         "-", 
        RowBox[{"2", " ", "k", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "k"}], "+", "\[Alpha]", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"k", "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], 
             ")"}], " ", 
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}], " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"0", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}], "+", 
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"k", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], 
          ")"}], " ", 
         SuperscriptBox[
          RowBox[{"PolyGamma", "[", 
           RowBox[{"0", ",", 
            RowBox[{"1", "+", "\[Alpha]", "-", 
             FractionBox["\[Alpha]", "k"]}]}], "]"}], "2"]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox["k", "2"], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "k", " ", 
            "\[Alpha]"}], "+", 
           SuperscriptBox["\[Alpha]", "2"]}], ")"}], " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"1", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}]}]}], ",", 
   RowBox[{
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}], ">", "\[Alpha]"}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232723877207*^9, 3.554125232562294*^9, 
  3.554126263522407*^9, 3.555265196069639*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IF", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Ia4", "^", 
       RowBox[{"(", 
        RowBox[{"-", "1"}], ")"}]}]}], " ", "*", " ", 
     RowBox[{"(", 
      RowBox[{"p", "^", "\[Alpha]"}], ")"}], "*", 
     RowBox[{"(", 
      RowBox[{"ss", "-", "cs"}], ")"}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546018347393014*^9, 3.546018403066614*^9}, {
   3.546018436099692*^9, 3.546018441274599*^9}, 3.546019614310392*^9, {
   3.546019656617135*^9, 3.546019704529838*^9}, {3.546057935083661*^9, 
   3.546057940051575*^9}, {3.546060690488888*^9, 3.546060692698881*^9}, {
   3.546136907926816*^9, 3.54613692580183*^9}, {3.546232739391533*^9, 
   3.546232740164084*^9}, {3.55526506620564*^9, 3.555265069546957*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["k", "2"], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
       RowBox[{"2", "+", "\[Alpha]", "-", 
        FractionBox["\[Alpha]", "k"]}]], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           SuperscriptBox[
            RowBox[{"(", 
             FractionBox[
              RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", 
         
         SuperscriptBox[
          RowBox[{"(", 
           FractionBox[
            RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}]]}], ")"}], "\[Alpha]"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"\[Alpha]", " ", 
         RowBox[{"Log", "[", 
          RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"1", "-", 
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                FractionBox[
                 RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], 
             ")"}], " ", 
            RowBox[{"Log", "[", 
             FractionBox[
              RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], "]"}]}]}], ")"}]}], 
        "-", 
        RowBox[{"\[Alpha]", " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"0", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], ")"}], "/", 
    
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Gamma", "[", 
       RowBox[{"1", "+", "\[Alpha]", "-", 
        FractionBox["\[Alpha]", "k"]}], "]"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"k", "+", 
           RowBox[{
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "2"}], " ", "k"}], "+", 
              RowBox[{"2", " ", "\[Alpha]"}], "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"k", "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", 
                  "\[Alpha]"}]}], ")"}], " ", 
               RowBox[{"Log", "[", 
                RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}]}]}], ")"}]}],
         "-", 
        RowBox[{"2", " ", "k", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "k"}], "+", "\[Alpha]", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"k", "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], 
             ")"}], " ", 
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}], " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"0", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}], "+", 
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"k", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], 
          ")"}], " ", 
         SuperscriptBox[
          RowBox[{"PolyGamma", "[", 
           RowBox[{"0", ",", 
            RowBox[{"1", "+", "\[Alpha]", "-", 
             FractionBox["\[Alpha]", "k"]}]}], "]"}], "2"]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox["k", "2"], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "k", " ", 
            "\[Alpha]"}], "+", 
           SuperscriptBox["\[Alpha]", "2"]}], ")"}], " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"1", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], ")"}]}], 
   ",", 
   RowBox[{
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}], ">", "\[Alpha]"}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232757750575*^9, 3.554125244462411*^9, 
  3.55412627616335*^9, 3.555265577691487*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IF1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"IF", "/.", 
    RowBox[{"\[Mu]", "->", "0"}]}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.546017428290329*^9, {3.546018467395976*^9, 3.546018491191415*^9}, {
   3.546018587031472*^9, 3.546018597806486*^9}, 3.546157241026402*^9}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["k", "2"], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
       RowBox[{"2", "+", "\[Alpha]", "-", 
        FractionBox["\[Alpha]", "k"]}]], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           SuperscriptBox[
            RowBox[{"(", 
             FractionBox["x", "\[Lambda]"], ")"}], "k"]}]], " ", 
         SuperscriptBox[
          RowBox[{"(", 
           FractionBox["x", "\[Lambda]"], ")"}], 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}]]}], ")"}], "\[Alpha]"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"\[Alpha]", " ", 
         RowBox[{"Log", "[", 
          RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "+", 
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"1", "-", 
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                FractionBox["x", "\[Lambda]"], ")"}], "k"]}], ")"}], " ", 
            RowBox[{"Log", "[", 
             FractionBox["x", "\[Lambda]"], "]"}]}]}], ")"}]}], "-", 
        RowBox[{"\[Alpha]", " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"0", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], ")"}], "/", 
    
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Gamma", "[", 
       RowBox[{"1", "+", "\[Alpha]", "-", 
        FractionBox["\[Alpha]", "k"]}], "]"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"k", "+", 
           RowBox[{
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "2"}], " ", "k"}], "+", 
              RowBox[{"2", " ", "\[Alpha]"}], "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"k", "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", 
                  "\[Alpha]"}]}], ")"}], " ", 
               RowBox[{"Log", "[", 
                RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}]}]}], ")"}]}],
         "-", 
        RowBox[{"2", " ", "k", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "k"}], "+", "\[Alpha]", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"k", "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], 
             ")"}], " ", 
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}], " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"0", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}], "+", 
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"k", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], 
          ")"}], " ", 
         SuperscriptBox[
          RowBox[{"PolyGamma", "[", 
           RowBox[{"0", ",", 
            RowBox[{"1", "+", "\[Alpha]", "-", 
             FractionBox["\[Alpha]", "k"]}]}], "]"}], "2"]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox["k", "2"], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "k", " ", 
            "\[Alpha]"}], "+", 
           SuperscriptBox["\[Alpha]", "2"]}], ")"}], " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"1", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], ")"}]}], 
   ",", 
   RowBox[{
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}], ">", "\[Alpha]"}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232774650792*^9, 3.554125249562382*^9, 
  3.554126281263408*^9, 3.555265590588807*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IF2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"IF1", "/.", 
    RowBox[{"\[Lambda]", "\[Rule]", "1"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232789850054*^9, 3.546232814587751*^9}, {
  3.546232870367111*^9, 3.546232891695176*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["k", "2"], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           SuperscriptBox["x", "k"]}]], " ", 
         SuperscriptBox["x", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}]]}], ")"}], "\[Alpha]"], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
       RowBox[{"2", "+", "\[Alpha]", "-", 
        FractionBox["\[Alpha]", "k"]}]], " ", 
      RowBox[{"(", 
       RowBox[{"k", "-", 
        RowBox[{
         SuperscriptBox["k", "2"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", 
           SuperscriptBox["x", "k"]}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
         RowBox[{"Log", "[", "x", "]"}]}], "+", 
        RowBox[{"\[Alpha]", " ", 
         RowBox[{"Log", "[", 
          RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "-", 
        RowBox[{"\[Alpha]", " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"0", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], ")"}], "/", 
    
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Gamma", "[", 
       RowBox[{"1", "+", "\[Alpha]", "-", 
        FractionBox["\[Alpha]", "k"]}], "]"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"k", "+", 
           RowBox[{
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"-", "2"}], " ", "k"}], "+", 
              RowBox[{"2", " ", "\[Alpha]"}], "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"k", "+", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", 
                  "\[Alpha]"}]}], ")"}], " ", 
               RowBox[{"Log", "[", 
                RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}]}]}], ")"}]}],
         "-", 
        RowBox[{"2", " ", "k", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "k"}], "+", "\[Alpha]", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"k", "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], 
             ")"}], " ", 
            RowBox[{"Log", "[", 
             RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}], " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"0", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}], "+", 
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"k", "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], 
          ")"}], " ", 
         SuperscriptBox[
          RowBox[{"PolyGamma", "[", 
           RowBox[{"0", ",", 
            RowBox[{"1", "+", "\[Alpha]", "-", 
             FractionBox["\[Alpha]", "k"]}]}], "]"}], "2"]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox["k", "2"], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "k", " ", 
            "\[Alpha]"}], "+", 
           SuperscriptBox["\[Alpha]", "2"]}], ")"}], " ", 
         RowBox[{"PolyGamma", "[", 
          RowBox[{"1", ",", 
           RowBox[{"1", "+", "\[Alpha]", "-", 
            FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], ")"}]}], 
   ",", 
   RowBox[{
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}], ">", "\[Alpha]"}]}], "]"}]], "Output",
 CellChangeTimes->{3.546233010925664*^9, 3.554125253198756*^9, 
  3.554126284914077*^9, 3.555265598534741*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"IFun", " ", "=", " ", 
   RowBox[{"Function", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k", ",", "\[Alpha]"}], "}"}], " ", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["k", "2"], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           SuperscriptBox["\[ExponentialE]", 
            RowBox[{"-", 
             SuperscriptBox["x", "k"]}]], " ", 
           SuperscriptBox["x", 
            RowBox[{
             RowBox[{"-", "1"}], "+", "k"}]]}], ")"}], "\[Alpha]"], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
         RowBox[{"2", "+", "\[Alpha]", "-", 
          FractionBox["\[Alpha]", "k"]}]], " ", 
        RowBox[{"(", 
         RowBox[{"k", "-", 
          RowBox[{
           SuperscriptBox["k", "2"], " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", "1"}], "+", 
             SuperscriptBox["x", "k"]}], ")"}], " ", 
           RowBox[{"(", 
            RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
           RowBox[{"Log", "[", "x", "]"}]}], "+", 
          RowBox[{"\[Alpha]", " ", 
           RowBox[{"Log", "[", 
            RowBox[{"1", "+", "\[Alpha]"}], "]"}]}], "-", 
          RowBox[{"\[Alpha]", " ", 
           RowBox[{"PolyGamma", "[", 
            RowBox[{"0", ",", 
             RowBox[{"1", "+", "\[Alpha]", "-", 
              FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], ")"}], 
      "/", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Gamma", "[", 
         RowBox[{"1", "+", "\[Alpha]", "-", 
          FractionBox["\[Alpha]", "k"]}], "]"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"k", " ", 
           RowBox[{"(", 
            RowBox[{"k", "+", 
             RowBox[{
              RowBox[{"Log", "[", 
               RowBox[{"1", "+", "\[Alpha]"}], "]"}], " ", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"-", "2"}], " ", "k"}], "+", 
                RowBox[{"2", " ", "\[Alpha]"}], "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"k", "+", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", 
                    "\[Alpha]"}]}], ")"}], " ", 
                 RowBox[{"Log", "[", 
                  RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}]}]}], 
            ")"}]}], "-", 
          RowBox[{"2", " ", "k", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", "k"}], "+", "\[Alpha]", "+", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"k", "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}],
                ")"}], " ", 
              RowBox[{"Log", "[", 
               RowBox[{"1", "+", "\[Alpha]"}], "]"}]}]}], ")"}], " ", 
           RowBox[{"PolyGamma", "[", 
            RowBox[{"0", ",", 
             RowBox[{"1", "+", "\[Alpha]", "-", 
              FractionBox["\[Alpha]", "k"]}]}], "]"}]}], "+", 
          RowBox[{"k", " ", 
           RowBox[{"(", 
            RowBox[{"k", "+", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], 
            ")"}], " ", 
           SuperscriptBox[
            RowBox[{"PolyGamma", "[", 
             RowBox[{"0", ",", 
              RowBox[{"1", "+", "\[Alpha]", "-", 
               FractionBox["\[Alpha]", "k"]}]}], "]"}], "2"]}], "+", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["k", "2"], "+", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "k", " ", 
              "\[Alpha]"}], "+", 
             SuperscriptBox["\[Alpha]", "2"]}], ")"}], " ", 
           RowBox[{"PolyGamma", "[", 
            RowBox[{"1", ",", 
             RowBox[{"1", "+", "\[Alpha]", "-", 
              FractionBox["\[Alpha]", "k"]}]}], "]"}]}]}], ")"}]}], ")"}]}]}],
     "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.54608073954952*^9, 3.546080787340927*^9}, {
   3.546080827508503*^9, 3.546080832763547*^9}, {3.546080881724667*^9, 
   3.54608089839569*^9}, {3.546136031913543*^9, 3.546136106756538*^9}, {
   3.546136264957334*^9, 3.546136269166274*^9}, {3.546136300237964*^9, 
   3.546136302873075*^9}, 3.546136404353272*^9, {3.546136877306471*^9, 
   3.546136878124014*^9}, {3.546136974390393*^9, 3.546136995325726*^9}, {
   3.546137115334749*^9, 3.546137121892679*^9}, {3.546233026432763*^9, 
   3.546233039064002*^9}}],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<PlotLegends`\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.546078399638204*^9, 3.546078434270568*^9}, {
  3.546078523483738*^9, 3.546078526611331*^9}, {3.546078631725602*^9, 
  3.546078677869414*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"IFun", "[", 
      RowBox[{"2", ",", "0.05"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"2", ",", "0.1"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"2", ",", "0.3"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"2", ",", "0.5"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"2", ",", "1"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"2", ",", "2"}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "6"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotLegend", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<\[Alpha] = 0.05\>\"", ",", "\"\<\[Alpha] = 0.1\>\"", ",", 
      "\"\<\[Alpha] = 0.3\>\"", ",", "\"\<\[Alpha] = 0.5\>\"", ",", 
      "\"\<\[Alpha] = 1\>\"", ",", "\"\<\[Alpha] = 2\>\""}], "}"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"LegendPosition", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"-", "0.4"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Dashed", ",", " ", "Thick", ",", "Thin", ",", " ", "Dotted", ",", " ", 
      "Yellow", ",", " ", "Blue"}], "}"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.546071566443362*^9, 3.546071604772914*^9}, {
   3.546071664304524*^9, 3.546071734557583*^9}, {3.546071769565434*^9, 
   3.546071781503191*^9}, {3.546077877666447*^9, 3.546077878779971*^9}, {
   3.546078077257591*^9, 3.546078094273397*^9}, {3.546078128979278*^9, 
   3.546078131508565*^9}, {3.546078195525481*^9, 3.546078246143438*^9}, {
   3.54607831567725*^9, 3.546078368785814*^9}, {3.546078441904356*^9, 
   3.546078501052553*^9}, 3.546078697301196*^9, {3.546078795298968*^9, 
   3.546078819926423*^9}, {3.546078851304196*^9, 3.54607891370029*^9}, {
   3.546079894604615*^9, 3.546079946211399*^9}, {3.546136122778719*^9, 
   3.546136164810206*^9}, 3.546136449027762*^9, 3.54623312566578*^9, {
   3.54623315837957*^9, 3.546233172933139*^9}, {3.55414454024273*^9, 
   3.554144551589526*^9}}],

Cell[BoxData[
 GraphicsBox[{InsetBox[
    GraphicsBox[{{}, {}, 
      {Hue[0.67, 0.6, 0.6], Dashing[{Small, Small}], LineBox[CompressedData["
1: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
/B+9XjZF
        "]]}, 
      {Hue[0.9060679774997897, 0.6, 0.6], Thickness[Large], 
       LineBox[CompressedData["
1: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
jjZMLixQ0c44vfbLKkr4f2OvhNk=
        "]]}, 
      {Hue[0.14213595499957954`, 0.6, 0.6], Thickness[Tiny], 
       LineBox[CompressedData["
1:eJwV1nc81P8fAHDjrKw7d+cyEioVKeWroni/UTRURGSvlGwSMkqK7E32jqRU
dsj7o2GUrLLJlnnOvpL87vfP3eP5uM/n/Xm/X+s+ElbOV21YmJiYpBkf//+m
X3RK13b2V+l68O2RS98ECrqx/0CblBnwPFLnq1dGwL5RJ+wipJxAmMyB4U5F
IlZEHsjqS/MAtieM/dNYSRitVD3cQeo+kBzRj+N+SMKED3bXbPcEgLrgviLr
LhKm7BV6tDktCEzzj/bo4MmYRaNKQaxlKJDfPnV/jxIZCxBcETWRigSXPFEN
ZkDGOkt0m2PXooGvk6D1BQcydqNf9vFGTyzo3W14cfAeGVtj5gQm1fHgTZSL
1vJDMhZ0cOw3lpYIPtizzWQFkjGKTm3ZvgdJILZOHl/J8HOvROdQyxTAKrdx
4nsAGVPKcpFeVE8DyVCL4upHxr42XpjUlcoAwlq3R5fvkrFiTwFtE1wW2MH9
8nkB4/meYQ9eRa5lgYDHzybbLMkYzJzfUT+VDcLa3euyrpExzlJD25WeHCBr
KuSmcY6MtTc0fN7XnAssD/MfnFIkY8n98nuuV+cBlxBeg0xpMibNwvezNi0f
JLBvBX/mImPLZJ9TixEF4PDgsK0pnYTVHJxOknjwHOzmFcq3mSJhWjofdIMs
XwDe26buzPUkzDnLo/mKVDGoShAh57mSsJNl41IBlNdgj1HVNR5TEsZ044Ca
Ee4NWDLSLFc4R8KaPRMyw9feAOpJH+OxXSTMKNPZaKmnBLScGjy7t5GI+VL3
tFenVYAPH2/eliIRsfrw8JpLUnWg6ss6H5ZHwOpm+1q4C+uAsfBQX3kYAas9
t/9nswwC0wvPdYrcCJgxiyVT7k4M6Fzpuf8UErBrdZuSu8XqgY/fH8eAQTx2
4fhRW8rBj+B3poPtbxIek5dKW+YAjaAvVj3Cg8SLsbG7cczYtQF668V5XxEO
7PwDy8By/R7w5cPqBL3iNzoWVa+R7d4DSFlrHav2v5FopgRnRGwPeGE9GrJL
4jei1Y2G3mjtAU/KbsythdFR4j/LaKJGLzCgD9xqsN5AE35Wqa4KfSAn/0UO
m+ga8ve1fitLGgCnk0OYVl/TkF34RzehYwNgx7STaKsdDeml7fmPTXsAvPdz
sOnbR0P7a8crBsMGwM5OKhen4iJq3bSuDWMdBLYOr6DRzgUk6nOjcWZ5ECx5
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
3qbAqKqoPb/kgtD/APJs5nE=
        "]]}, 
      {Hue[0.37820393249936934`, 0.6, 0.6], Dashing[{0, Small}], 
       LineBox[CompressedData["
1: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
        "]]}, 
      {RGBColor[1, 1, 0], LineBox[CompressedData["
1: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
NqP/LskcoxY+ov4PFLfP7A==
        "]]}, 
      {RGBColor[0, 0, 1], LineBox[CompressedData["
1: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
o1B1IQ==
        "]]}},
     AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
     Axes->True,
     AxesOrigin->{0, 0},
     DisplayFunction:>$DisplayFunction,
     FormatType->TraditionalForm,
     PlotRange->{{0, 6}, {-30.528644426310244`, 3.501330025154799}},
     PlotRangeClipping->True,
     PlotRangePadding->{
       Scaled[0.02], 
       Scaled[0.02]}], {-1, -0.6180339887498948}, {
    Left, Bottom}, {2, 1.2360679774997896`}], GraphicsGroupBox[{
     {GrayLevel[0], 
      RectangleBox[{1.05, -0.45}, {1.425418994413408, 0.3499999999999999}]}, 
     {GrayLevel[1], EdgeForm[{GrayLevel[0], Thickness[0.001]}], 
      GraphicsGroupBox[{
        RectangleBox[{1, -0.4}, {1.3754189944134079`, 0.3999999999999999}], 
        InsetBox[
         GraphicsBox[{{{InsetBox[
              GraphicsBox[
               {RGBColor[0, 0, 1], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 0.08}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 2\"\>", {1.2100000000000002`, 0.58}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {RGBColor[1, 1, 0], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 1.24}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 1\"\>", {1.2100000000000002`, 1.74}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.37820393249936846`, 0.6, 0.6], Dashing[{0., Small}], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 2.4}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.5\"\>", {1.2100000000000002`, 2.9}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.1421359549995791, 0.6, 0.6], Thickness[Tiny], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 3.56}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.3\"\>", \
{1.2100000000000002`, 4.0600000000000005`}, {-1, 0}, Automatic, {1, 0}]}, {
             InsetBox[
              GraphicsBox[
               {Hue[0.9060679774997897, 0.6, 0.6], Thickness[Large], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 4.72}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.1\"\>", {1.2100000000000002`, 5.22}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.67, 0.6, 0.6], Dashing[{Small, Small}], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 5.88}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.05\"\>", {1.2100000000000002`, 6.38}, \
{-1, 0}, Automatic, {1, 0}]}}, {}},
          AspectRatio->2.1309523809523805`,
          FormatType->TraditionalForm,
          PlotRange->{{-0.1, 3.26}, {-0.1, 7.059999999999999}}], {1, -0.4}, {
         Left, Bottom}, {0.37541899441340787`, 0.7999999999999999}]}]}}]},
  AspectRatio->Automatic,
  Background->None,
  ColorOutput->Automatic,
  ImageSize->Automatic,
  PlotRange->All]], "Output",
 CellChangeTimes->{
  3.54623313329417*^9, {3.54623316422757*^9, 3.546233175420794*^9}, 
   3.554125256024948*^9, 3.554126287327232*^9, 3.554144567046009*^9, 
   3.555265608905695*^9},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
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
g7SUHiP2C1k5wjAxfO2aJyRBfkIq5P90ekLq5qtkJPGmhinA1vryijpiVYRb
NcSZOVnn2kj3DMRpIemxhnSZ/8HAgEzZSZHqYjFBtbXezi6ium6sgck/6VvI
izCWGuDUoXVx57M66CJvG19dKScoVgoqOhZn5ffIT84amhmZJDc8MzyRURiY
/T0Fm1qX5RcrVFZUriK9eRyiPZPy0w5afnu59HOMB7eJWaOtqWg5pfsvLcXL
KS2Ckm4FDos1sAiljnTSDsXZBTMSvSP2BT5xuuly+anjm91GYU/WnM+/P+sw
owKmE/YxSrn3Zx8Jfqp28d077VtGrlef7Qmydp6Z6BWOzzKLayLbLz436cLN
rw83vIv4zCFbo61XDXH6MRCrLU7Vlgize+SO9TPw/t0B7Xfkrj1dIlyHLWGv
PR58Pvso5vGKM0oEBQXB7SlaqRYLdLHp2zP1K3I+Npv1GAXECpuyH8zVqTKd
qEl78zLM/jr2xu7g7aO+Zh+nJPtFKVfwy5m/JLDvAJEClBjQyYQM6+egWUxZ
vNACKyxYsVCQq6qsGpsWFKvnYfgy0mrVOQW6HgX3/jzk8mrnDUO3qza4FnPi
PUIH5HxPbVJeymftmFL7kpzCQdkxKfPj3IL3Bj51xnXDZ3AtGTqOQtmdqdqf
3u41PuJnbj8kKyp5jix2qBoKuK1L7lhvFYNUjNhxt5PVUfIIwyVP49dJlotP
MPKUvDkP5hx59vHo/Z3Bz11RduSrKisZVcpHuH4roz/56bsbvPCzUb9SeWuS
JvucQuyjZacR58nCJcFnZjYQXlEnFl4seMDqCrIr0IIV+/Iywaawt55fX2y9
xs0b93DZKcQBlwLn/ZWuTkt+YcmS704B9z+fe4S8xfZOM1+gi1COSw383giq
qqbJDCXpw8I2JDoqC7djyF0z2tamNL/ohM+998iejBydLU8op6ZCuf0jLTgW
Z+st5pyRGWHxp71vv0NxprDJhws/Hvxm6UAkd0oDyYdb3eSOdf07FWfmI2cW
3pt5iAVH3uv5lmtqEXbeSEZmIGvOsqOTRSwgJ5bHlx8O350X7x6CJJ3YQFhE
0sMGzpgzxiiNVEyw+rRtaV6RgbvB85K70w/grCjgqMLGpwZ8Z4aK6fRn4tcw
ZEeEiUUDdQJqxOb8olJm/H8IGxZ2WJw5Tcs9WPFES7I/wOozLh9OiWxu9em4
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
9CSmtWd0NPSIiYHW2dnAyJEV7aTI54uPDwpfzQHyhwH4or4+CHDBAGD3S6HW
8QMYmgagKrSDjTBlHgQw0AlgEqoxlLXLAFqoGFDmtgDcWgbwdDGADcofptfl
hgP4CKM3gCj0m4jvpIACzB6DwmBm3ftIZ6Lq2LXe9DbMATNae6yDbLk2tF1B
atb7qx9FXOQc+1XfwP0BRsZc26jQ9Cj1t+GO1XOPaHD+CE6L6JBdnFs9H4ku
NW7tcG2Ny8r5yF/KfKEws4dpmvP5RX2F9hMNEb44BSCHzMUoYhOyGvpq+I6a
Fz/L4Q2jiB/R+iIHYvoQN0Mal5eXSSqUroMTSbgI+IUStfwMe0veJZ1B+ZGF
iW0hKEnozmMfqt4mfGGV62fr3Tcpmy/Ygl9neH+ZldqpYxVuMPCkDlV/G6V5
Y+TxDFXVylidIxal31N+IV1M523DKf0eql8bnhGeKDGgkDSmdNQa3K9xSQlu
XqGskDb8RO4UJbRJ6lfPs91zcnLxxfDItf42xX+4H20j/NQ3LTODa++XmpHx
e2JqCrYxcuLnarUp1+jHjlu9jX0Um7gpmGptMkzBqz2F0Huposs0Cm+b/8Di
DeYDylekRjPk4brL5Cu3wG5VQwf5vj276Wu3gtRsieUl0nn8BxE6dUK3Iq+T
apHA8f2sKv8XQ2DPwbXYxf3JdkMsmJJVXP5B1v5/++z/dfhmSedImrpTxgON
4Sa6h+Hm3Q0wrJevUMtpRt5bdemIp7kj7mg2ljp7Y4yrl0c6BMbNHhpa1b9n
CESHd4f3p/8suzNDE0uuf8+KTGLrmGo+31dCWx8Z+0lqqwNLOr3C+tTID1Ud
O6aWG6gJo4IZf9OCX17w03UX8Sy1WsR77xHp4YnkWDFNLDRF7wdPvauF2vlc
9jB6/eWlhkH5zUnaMLqTN4we6Q7eUb+m3Di1A8/xYhErma9ZNUgIIGxy0+bE
iYCCLVusIrSf7Ai6eu5w6Z35uxgerToWGE05mG84SzfBdMl5Rs7+7T4TRt7D
RsMgz2i2bpnx1IPscXoeXJ+zs2p8P7eq2X/afY33X/ZHckw0/e2ZltLxp/Or
tM3MhNLWrYuj4pPH2534dLJzYUH21lAX+xtu983t3x6/GmG15mzFrcn7lclU
ShW3pmgmWqgfcH119HzIAVOtivHzXvOnT3daVlr6mk7ZWvqU1K1WxTDe98AB
e9yB5rYiMIbRtvJ/NScs1gv9lDkJYd7LYnzdt4Y6228Pcfy4LfTzpy1hLg5r
Iryd9zl6vZ4REe+HOwXoq2Vv1XiSN2FiQM/i4hQKQ5v6YFDGXW50fE3T04/i
tgr6eoOjs+PvXHC+uetZkF01rw0LA2Z6JQawXoDSdX33ewEbrLVm+yT57gO4
Wnz+/KmUQYMyW+XlVdLp29Zea5rfVETEMZ7BbXfMO2wAuI/xBusyjAlOj9xv
FfBmaGRmLDuZInpCSwCeYRQVbGxsGNerlwBhJ/O0k44mnVG5fXo6qV3rGx4O
WI7lATDmG8DvODOSnt1x7AMQgY50FECvLwB/nLKx+ZbaoQP0iooCilJ76VPR
iLUVBmKfpk0D7rc+5gDYolNeIOR9HBfzaD4Aw7OEyyOEv7MJgAY63ehUpamq
wuCAAHYu1frmkpevqCAB4d83bnCGkacAUI54TABwGQXwtT1AOucsz3/1Slwi
R0bqIH0O9twLBiEpHTsCpmG5mmb1u3fJOCO9vNhxOtZeavYQDz6FWE1ycuL0
rwK6aRiyRvbuTRaEDNBJOiBsmnWiszPgYiDn4GME/NRU2GFkBPFdu4L5unVk
G4d80Vn6cDTnotQmK4sMhZv/wp4kxWS1YgWMdXdnceoifQxyrfN/qqnvKfL5
f+n/2mnoZ6bR/wCPan8I\
\>"]]
}, Open  ]],

Cell[BoxData["\[AliasDelimiter]"], "Input",
 CellChangeTimes->{3.554151788971515*^9}],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.546137165687608*^9, 3.546137166387722*^9}}],

Cell[" ", "Text",
 Editable->False,
 Selectable->False,
 CellFrame->{{0, 0}, {0, 3}},
 ShowCellBracket->False,
 CellMargins->{{0, 0}, {1, 1}},
 CellElementSpacings->{"CellMinHeight"->1},
 CellFrameMargins->0,
 CellFrameColor->RGBColor[0, 0, 1],
 CellSize->{Inherited, 5}],

Cell[BoxData[
 RowBox[{"Weibull", ":"}]], "Input",
 CellChangeTimes->{{3.543684992882703*^9, 3.543684994655665*^9}, {
  3.544320894879453*^9, 3.544320906231942*^9}, {3.544321013728986*^9, 
  3.544321015677552*^9}, {3.546149536487394*^9, 3.546149537999375*^9}},
 EmphasizeSyntaxErrors->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"ClearAll", "[", 
   RowBox[{
   "\[Alpha]", ",", "\[Sigma]", ",", "\[Mu]", ",", "x", ",", "k", ",", 
    "\[Lambda]", ",", "\[Theta]"}], "]"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.54613653746201*^9, 3.546136542655197*^9}, {
  3.546136596080742*^9, 3.546136617338891*^9}, {3.546139146090529*^9, 
  3.546139146249962*^9}, {3.555265619055746*^9, 3.555265650698346*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p", " ", "=", " ", 
  RowBox[{
   FractionBox["k", "\[Lambda]"], 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
    RowBox[{"k", "-", "1"}]]}]}]], "Input",
 CellChangeTimes->{{3.543684783475436*^9, 3.543684946824956*^9}, 
   3.543685129663494*^9, {3.544295734613175*^9, 3.54429574288267*^9}, {
   3.54429580082901*^9, 3.54429582329368*^9}, {3.544320780873962*^9, 
   3.544320785346142*^9}, 3.544320837287442*^9, {3.544320881922005*^9, 
   3.54432088239278*^9}, {3.54432100764836*^9, 3.544321019573801*^9}, 
   3.546149541553032*^9}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", "k", 
   " ", 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
    RowBox[{
     RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"]], "Output",
 CellChangeTimes->{
  3.544320837880473*^9, {3.544320883580563*^9, 3.544320911227469*^9}, 
   3.545309803843712*^9, 3.546016483142384*^9, 3.546017657044242*^9, 
   3.546060076762132*^9, 3.546060141670154*^9, 3.546060377463162*^9, 
   3.546061431182232*^9, 3.54606188717779*^9, 3.546071462150901*^9, 
   3.546136812639187*^9, 3.546138975120109*^9, 3.546148046460689*^9, 
   3.546149544392845*^9, 3.546151403683482*^9, {3.54623018096315*^9, 
   3.546230186401331*^9}, 3.546233513423806*^9, 3.554125256148111*^9, 
   3.554126287479439*^9, {3.555265627736354*^9, 3.555265655104156*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Theta]", " ", "=", " ", "\[Lambda]"}], ";"}]], "Input",
 CellChangeTimes->{{3.546137329720142*^9, 3.546137340576589*^9}, {
  3.546149548558869*^9, 3.546149554463107*^9}, {3.546233499084344*^9, 
  3.546233500287852*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"ss", " ", "=", " ", 
   RowBox[{"FullSimplify", "[", 
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{"Log", "[", "p", "]"}], ",", "\[Theta]"}], "]"}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.543684996758039*^9, 3.543685116992625*^9}, {
   3.543685161495624*^9, 3.543685164824434*^9}, {3.543685617602922*^9, 
   3.543685622261405*^9}, {3.544295746546906*^9, 3.544295827428027*^9}, {
   3.544295874222879*^9, 3.544295884036298*^9}, 3.546016486016091*^9, {
   3.54601942039296*^9, 3.546019421197285*^9}, {3.546137342783463*^9, 
   3.54613734607702*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"k", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], ")"}]}], 
  "\[Lambda]"]], "Output",
 CellChangeTimes->{
  3.544295884678365*^9, 3.545309805435313*^9, 3.546016487855942*^9, 
   3.546017670089106*^9, 3.546019421888676*^9, 3.546059377336055*^9, 
   3.546060078214513*^9, {3.546060139149627*^9, 3.546060144271088*^9}, 
   3.546060382291988*^9, 3.546061435830015*^9, 3.546061887191896*^9, 
   3.546071462301595*^9, 3.546136812733527*^9, {3.546137347255125*^9, 
   3.546137353812429*^9}, 3.54613897527059*^9, 3.546148046689522*^9, 
   3.546149558534132*^9, 3.546232064476071*^9, {3.546233504193507*^9, 
   3.546233516686043*^9}, 3.554125256276245*^9, 3.55412628757933*^9, {
   3.555265630697381*^9, 3.555265657991809*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ss", "'"}], " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"D", "[", 
    RowBox[{"ss", ",", "\[Theta]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.543685180126496*^9, 3.543685298634426*^9}, {
   3.543685431540192*^9, 3.543685489527895*^9}, 3.543685534481716*^9, {
   3.543685624867701*^9, 3.543685665571384*^9}, {3.543688058809387*^9, 
   3.543688137132826*^9}, {3.54368832453227*^9, 3.543688330973921*^9}, {
   3.544295753339424*^9, 3.544295760783175*^9}, {3.544295853271568*^9, 
   3.544295889194162*^9}, {3.546016489095013*^9, 3.54601649563242*^9}, {
   3.546019427600456*^9, 3.546019428430676*^9}, {3.54613735651055*^9, 
   3.546137357241563*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"k", "-", 
   RowBox[{"k", " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", "k"}], ")"}], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      FractionBox[
       RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]}], 
  SuperscriptBox["\[Lambda]", "2"]]], "Output",
 CellChangeTimes->{{3.543685658802668*^9, 3.54368566906248*^9}, {
   3.54368807593941*^9, 3.543688142568622*^9}, 3.543688332640362*^9, {
   3.54429586658533*^9, 3.544295890282246*^9}, 3.545309806594238*^9, {
   3.54601648969558*^9, 3.546016496189694*^9}, 3.546017677241552*^9, 
   3.546019429586647*^9, 3.546059378810901*^9, 3.546060079358672*^9, 
   3.546060145605671*^9, 3.546060384883913*^9, 3.546061436928236*^9, 
   3.546061887206539*^9, 3.546071462474284*^9, 3.546136812904919*^9, 
   3.546137359182575*^9, 3.546138975369357*^9, 3.546148046818373*^9, 
   3.546149560252101*^9, 3.54623206886184*^9, 3.546233518378738*^9, 
   3.554125256443412*^9, 3.554126287713825*^9, 3.555265659452512*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"p", "^", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}], "*", "ss"}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.546016522942259*^9, 3.546016539967992*^9}, {
   3.546017704408171*^9, 3.546017705125968*^9}, 3.546019441035926*^9, {
   3.546019471091529*^9, 3.546019479505023*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"k", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], ")"}], " ", 
   
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", 
         SuperscriptBox[
          RowBox[{"(", 
           FractionBox[
            RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", 
       "k", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         FractionBox[
          RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
    RowBox[{"1", "+", "\[Alpha]"}]]}], "\[Lambda]"]], "Output",
 CellChangeTimes->{
  3.546016544655516*^9, {3.546017682666078*^9, 3.546017707524088*^9}, 
   3.546019442560441*^9, 3.546019480115117*^9, 3.546060081264836*^9, 
   3.546060146559043*^9, 3.546060400916709*^9, 3.546061439971061*^9, 
   3.546061887221677*^9, 3.546071464395533*^9, 3.546136814598201*^9, 
   3.546137368746807*^9, 3.546138977048079*^9, 3.54614804861861*^9, 
   3.546149564604638*^9, 3.546149648173352*^9, 3.546232072442872*^9, 
   3.546233524049641*^9, 3.554125257280551*^9, 3.554126288565291*^9, 
   3.555265661602609*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"csIntCitatel1", "/.", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], "\[Rule]", " ", 
     RowBox[{"y", "*", "\[Lambda]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016644463204*^9, 3.546016698494855*^9}, {
  3.546017718072268*^9, 3.546017718824221*^9}, {3.546019484592136*^9, 
  3.546019489873669*^9}, {3.5460588628943*^9, 3.546058863025369*^9}, {
  3.546058985559764*^9, 3.54605898695691*^9}, {3.546149570336845*^9, 
  3.546149571255931*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"k", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     SuperscriptBox["y", "k"]}], ")"}], " ", 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", 
         SuperscriptBox["y", "k"]}]], " ", "k", " ", 
       SuperscriptBox["y", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
    RowBox[{"1", "+", "\[Alpha]"}]]}], "\[Lambda]"]], "Output",
 CellChangeTimes->{
  3.546016699867985*^9, {3.54601771087677*^9, 3.546017720075646*^9}, 
   3.546019451857504*^9, 3.54601949082593*^9, 3.546058865086693*^9, 
   3.546058991110302*^9, 3.546059305292639*^9, {3.546060081368136*^9, 
   3.546060082414614*^9}, 3.546060147815039*^9, 3.546060407046361*^9, 
   3.546061531311124*^9, 3.546061887295093*^9, 3.546071465443946*^9, 
   3.546136815322759*^9, 3.546137371159345*^9, 3.546138977799651*^9, 
   3.546148049399068*^9, 3.546149656219562*^9, 3.546232076199355*^9, 
   3.54623352857147*^9, 3.554125257762887*^9, 3.554126289036192*^9, 
   3.555265663051691*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel3", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"csIntCitatel2", "*", "\[Lambda]"}], "/.", 
    RowBox[{"y", "\[Rule]", " ", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{"1", "/", "k"}], ")"}]}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232088390435*^9, 3.546232095185625*^9}}],

Cell[BoxData[
 RowBox[{"k", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "1"}], "+", 
    SuperscriptBox[
     RowBox[{"(", 
      SuperscriptBox["t", 
       FractionBox["1", "k"]], ")"}], "k"]}], ")"}], " ", 
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", 
        SuperscriptBox[
         RowBox[{"(", 
          SuperscriptBox["t", 
           FractionBox["1", "k"]], ")"}], "k"]}]], " ", "k", " ", 
      SuperscriptBox[
       RowBox[{"(", 
        SuperscriptBox["t", 
         FractionBox["1", "k"]], ")"}], 
       RowBox[{
        RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
   RowBox[{"1", "+", "\[Alpha]"}]]}]], "Output",
 CellChangeTimes->{3.546232100824901*^9, 3.546233537073972*^9, 
  3.554125258306997*^9, 3.554126289527586*^9, 3.55526566451166*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel4", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"csIntCitatel3", "/", "k"}], "*", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "k"}], ")"}], "/", "k"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232112593013*^9, 3.546232125917882*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "1"}], "+", "t"}], ")"}], " ", 
  SuperscriptBox["t", 
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}], "k"]], " ", 
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", "t"}]], " ", "k"}], "\[Lambda]"], ")"}], 
   RowBox[{"1", "+", "\[Alpha]"}]]}]], "Output",
 CellChangeTimes->{3.546232131595805*^9, 3.546233543221349*^9, 
  3.554125259478956*^9, 3.554126290634149*^9, 3.555265667427409*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel5", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"Integrate", "[", 
     RowBox[{"csIntCitatel4", ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "0", ",", "\[Infinity]"}], "}"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\[Alpha]", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"k", ">", "0"}]}], "}"}]}], "]"}], " "}]], "Input",
 CellChangeTimes->{{3.546016758763041*^9, 3.546016792970542*^9}, {
  3.546017733204061*^9, 3.546017740186443*^9}, {3.546017914630278*^9, 
  3.546017915139312*^9}, {3.54601813955664*^9, 3.546018141998787*^9}, {
  3.546019493851544*^9, 3.546019499184226*^9}, {3.546058803868124*^9, 
  3.546058826478995*^9}, {3.546058870461028*^9, 3.546058872003744*^9}, {
  3.546059018757644*^9, 3.546059019951728*^9}, {3.546059209756854*^9, 
  3.546059224271504*^9}, {3.546060118428053*^9, 3.546060118951836*^9}, {
  3.546060429719045*^9, 3.546060435859049*^9}, {3.54606155661684*^9, 
  3.546061556750753*^9}, {3.54606187684573*^9, 3.546061879156262*^9}, {
  3.546149679351288*^9, 3.546149686924944*^9}, {3.546232153175871*^9, 
  3.54623216243717*^9}, {3.55526567404278*^9, 3.555265696826132*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{"-", 
    FractionBox[
     RowBox[{"\[Alpha]", " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
       RowBox[{
        RowBox[{"-", "2"}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", 
           FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}]}]], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        FractionBox["k", "\[Lambda]"], ")"}], "\[Alpha]"], " ", 
      RowBox[{"Gamma", "[", 
       RowBox[{"1", "+", "\[Alpha]", "-", 
        FractionBox["\[Alpha]", "k"]}], "]"}]}], "\[Lambda]"]}], ",", 
   RowBox[{"\[Alpha]", "<", 
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.546016797608153*^9, 3.546017744115164*^9, {3.546017901155742*^9, 
   3.546017918255887*^9}, 3.54601814479272*^9, 3.5460194592406*^9, 
   3.546019501847466*^9, 3.546058816227488*^9, 3.546058858910903*^9, 
   3.546058988908802*^9, 3.546059027020108*^9, {3.546059207468971*^9, 
   3.546059213730049*^9}, 3.546059311153677*^9, 3.54606008545984*^9, {
   3.546060121584368*^9, 3.54606015090936*^9}, 3.546060482353594*^9, 
   3.546061561105924*^9, 3.546061888934606*^9, 3.546071469576597*^9, 
   3.546136819048198*^9, 3.546137375365945*^9, 3.546138981516168*^9, 
   3.546148053135883*^9, 3.546150578307016*^9, 3.5462322891228228`*^9, 
   3.546233568384461*^9, 3.554125279456246*^9, 3.554126310315995*^9, 
   3.555265721508435*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"p", "^", 
    RowBox[{"(", 
     RowBox[{"1", "+", "\[Alpha]"}], ")"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016812881654*^9, 3.546016818147665*^9}, {
  3.546016886250683*^9, 3.546016904857094*^9}, {3.546018151081055*^9, 
  3.546018151902321*^9}, {3.546019505441384*^9, 3.546019506907304*^9}, {
  3.546059876912032*^9, 3.546059883931349*^9}, {3.546060057180457*^9, 
  3.546060062381365*^9}}],

Cell[BoxData[
 SuperscriptBox[
  RowBox[{"(", 
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       SuperscriptBox[
        RowBox[{"(", 
         FractionBox[
          RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", "k",
      " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
  RowBox[{"1", "+", "\[Alpha]"}]]], "Output",
 CellChangeTimes->{
  3.546230203148988*^9, {3.546233577473427*^9, 3.54623358052292*^9}, 
   3.554125279553732*^9, 3.554126310417225*^9, 3.555265894815395*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"csIntJmenovatel1", "/.", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], "\[Rule]", " ", 
     RowBox[{"y", "*", "\[Lambda]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016918820028*^9, 3.546016933459735*^9}, {
  3.546018162034847*^9, 3.546018162802109*^9}, {3.546019511970786*^9, 
  3.546019518337126*^9}, {3.546059893179542*^9, 3.546059893847781*^9}, {
  3.546060047266137*^9, 3.546060052681203*^9}, {3.546230217034243*^9, 
  3.546230217998498*^9}}],

Cell[BoxData[
 SuperscriptBox[
  RowBox[{"(", 
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       SuperscriptBox["y", "k"]}]], " ", "k", " ", 
     SuperscriptBox["y", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
  RowBox[{"1", "+", "\[Alpha]"}]]], "Output",
 CellChangeTimes->{{3.546230207442299*^9, 3.546230219675734*^9}, 
   3.546233583258629*^9, 3.554125279563041*^9, 3.55412631042607*^9, 
   3.555265896658691*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel3", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"csIntJmenovatel2", "*", "\[Lambda]"}], "/.", 
    RowBox[{"y", "\[Rule]", " ", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{"1", "/", "k"}], ")"}]}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.54623072884787*^9, 3.546230785760333*^9}, {
  3.546231604373572*^9, 3.546231605426678*^9}, {3.546231716620151*^9, 
  3.546231717085787*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", 
        SuperscriptBox[
         RowBox[{"(", 
          SuperscriptBox["t", 
           FractionBox["1", "k"]], ")"}], "k"]}]], " ", "k", " ", 
      SuperscriptBox[
       RowBox[{"(", 
        SuperscriptBox["t", 
         FractionBox["1", "k"]], ")"}], 
       RowBox[{
        RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
   RowBox[{"1", "+", "\[Alpha]"}]], " ", "\[Lambda]"}]], "Output",
 CellChangeTimes->{{3.546230757338739*^9, 3.546230786864854*^9}, 
   3.54623122497391*^9, 3.546231390679448*^9, 3.546231620590633*^9, 
   3.546231718726483*^9, 3.546231912776218*^9, 3.546233587684638*^9, 
   3.554125279689558*^9, 3.554126310560129*^9, 3.555265898160251*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel4", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"csIntJmenovatel3", "/", "k"}], "*", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "k"}], ")"}], "/", "k"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546231135452288*^9, 3.546231187522384*^9}, 
   3.546231380041735*^9, {3.546231608893195*^9, 3.546231609558657*^9}, {
   3.546231727310628*^9, 3.546231732399831*^9}, {3.546231878599405*^9, 
   3.546231893664122*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"-", "t"}]], " ", 
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", "t"}]], " ", "k", " ", 
      SuperscriptBox["t", 
       FractionBox[
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}], "k"]]}], "\[Lambda]"], ")"}], 
   "\[Alpha]"]}]], "Output",
 CellChangeTimes->{
  3.5462311903916*^9, 3.54623123012743*^9, 3.546231393222635*^9, 
   3.546231736337671*^9, {3.546231899759423*^9, 3.546231920689016*^9}, 
   3.546233592071807*^9, 3.554125279913958*^9, 3.554126310798819*^9, 
   3.555265900987192*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel5", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"Integrate", "[", 
     RowBox[{"csIntJmenovatel4", ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "0", ",", "\[Infinity]"}], "}"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546017079018856*^9, 3.546017090969569*^9}, {
  3.546018190056803*^9, 3.546018190821094*^9}, {3.546059043677427*^9, 
  3.54605904460088*^9}, {3.546059403368323*^9, 3.546059411524818*^9}, {
  3.546059479614725*^9, 3.546059492483282*^9}, {3.546059617399394*^9, 
  3.546059617680817*^9}, {3.546059915271946*^9, 3.546059916341114*^9}, {
  3.546060024912348*^9, 3.546060025553251*^9}, {3.546061569414866*^9, 
  3.546061603372963*^9}, {3.54606187218996*^9, 3.546061873288195*^9}, {
  3.546230234851797*^9, 3.546230235704077*^9}, {3.54623031496448*^9, 
  3.546230316811469*^9}, {3.546230894174747*^9, 3.54623093187054*^9}, {
  3.546231021434708*^9, 3.546231058033388*^9}, {3.546231204938011*^9, 
  3.546231254795637*^9}, {3.54623130518147*^9, 3.546231317577529*^9}, {
  3.555265908708013*^9, 3.555265932157354*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}]}]], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      FractionBox["k", "\[Lambda]"], ")"}], "\[Alpha]"], " ", 
    RowBox[{"Gamma", "[", 
     RowBox[{"1", "+", "\[Alpha]", "-", 
      FractionBox["\[Alpha]", "k"]}], "]"}]}], ",", 
   RowBox[{"\[Alpha]", "<", 
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.546230539424707*^9, 3.546230928296439*^9, 3.546231130736478*^9, 
   3.546231217042055*^9, {3.546231310240832*^9, 3.546231332557165*^9}, 
   3.546231408953687*^9, 3.546231758805175*^9, 3.546231931318572*^9, 
   3.546233612404448*^9, 3.554125296803525*^9, 3.554126327511372*^9, {
   3.555265922105688*^9, 3.555265947353514*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cs", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"csIntCitatel5", "/", "csIntJmenovatel5"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546017159619789*^9, 3.546017171553549*^9}, {
   3.546018198699244*^9, 3.54601820322215*^9}, 3.546061584597621*^9, {
   3.546061615263666*^9, 3.546061627686996*^9}, {3.546232301287677*^9, 
   3.546232306940481*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{"-", 
    FractionBox["\[Alpha]", 
     RowBox[{"\[Lambda]", "+", 
      RowBox[{"\[Alpha]", " ", "\[Lambda]"}]}]]}], ",", 
   RowBox[{"\[Alpha]", "<", 
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232321705469*^9, 3.546233615617531*^9, 
  3.554125296923675*^9, 3.554126327657774*^9, 3.555265955232685*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"cs", "'"}], " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"D", "[", 
    RowBox[{"cs", ",", "\[Theta]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546017177523059*^9, 3.546017189050696*^9}, {
  3.546018219369372*^9, 3.546018251272656*^9}, {3.546137392518803*^9, 
  3.546137393253288*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox["\[Alpha]", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
     SuperscriptBox["\[Lambda]", "2"]}]], ",", 
   RowBox[{"\[Alpha]", "<", 
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232329374177*^9, 3.546233619140492*^9, 
  3.55412529702795*^9, 3.554126327786307*^9, 3.555265969592873*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia", " ", "=", 
  RowBox[{"FullSimplify", "[", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"ss", "'"}], " ", "-", " ", 
      RowBox[{"cs", "'"}], "-", 
      RowBox[{"\[Alpha]", 
       RowBox[{"(", 
        RowBox[{"ss", "-", "cs"}], ")"}], 
       RowBox[{"(", 
        RowBox[{"cs", "-", "ss"}], ")"}]}]}], ")"}], "*", 
    RowBox[{"p", "^", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016927559429*^9, 3.546016927697169*^9}, {
   3.546017069821145*^9, 3.546017085073989*^9}, 3.546017230368702*^9, {
   3.546017453638702*^9, 3.546017454633499*^9}, {3.546017487540381*^9, 
   3.546017511750122*^9}, 3.546060275246113*^9, {3.546060594894228*^9, 
   3.546060607304117*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k", "+", 
       FractionBox["1", 
        RowBox[{"1", "+", "\[Alpha]"}]], "+", 
       FractionBox[
        RowBox[{"\[Alpha]", " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"\[Alpha]", "+", 
            RowBox[{"k", " ", 
             RowBox[{"(", 
              RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "1"}], "+", 
               SuperscriptBox[
                RowBox[{"(", 
                 FractionBox[
                  RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], 
              ")"}]}]}], ")"}], "2"]}], 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"]], "-", 
       RowBox[{"k", " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "k"}], ")"}], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          FractionBox[
           RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]}], ")"}], 
     " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           SuperscriptBox[
            RowBox[{"(", 
             FractionBox[
              RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", 
         "k", " ", 
         SuperscriptBox[
          RowBox[{"(", 
           FractionBox[
            RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
      RowBox[{"1", "+", "\[Alpha]"}]]}], 
    SuperscriptBox["\[Lambda]", "2"]], ",", 
   RowBox[{"\[Alpha]", "<", 
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232363544007*^9, 3.546233625680107*^9, 
  3.554125300701211*^9, 3.554126331412296*^9, 3.555265975849912*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"Ia", "/.", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], "\[Rule]", 
     RowBox[{"y", "*", "\[Lambda]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016832069324*^9, 3.54601683491256*^9}, {
  3.546016912126374*^9, 3.546016916727737*^9}, {3.546017322178493*^9, 
  3.546017372508301*^9}, {3.546017463020216*^9, 3.54601752428375*^9}, {
  3.546232394685446*^9, 3.546232395694052*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k", "-", 
       RowBox[{"k", " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "k"}], ")"}], " ", 
        SuperscriptBox["y", "k"]}], "+", 
       FractionBox["1", 
        RowBox[{"1", "+", "\[Alpha]"}]], "+", 
       FractionBox[
        RowBox[{"\[Alpha]", " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"\[Alpha]", "+", 
            RowBox[{"k", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "1"}], "+", 
               SuperscriptBox["y", "k"]}], ")"}], " ", 
             RowBox[{"(", 
              RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]}], ")"}], "2"]}], 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"]]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           SuperscriptBox["y", "k"]}]], " ", "k", " ", 
         SuperscriptBox["y", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
      RowBox[{"1", "+", "\[Alpha]"}]]}], 
    SuperscriptBox["\[Lambda]", "2"]], ",", 
   RowBox[{"\[Alpha]", "<", 
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{{3.546232392215838*^9, 3.546232413442848*^9}, 
   3.546233631780497*^9, 3.554125302490947*^9, 3.554126333207039*^9, 
   3.555265993609369*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"Ia1", "*", "\[Lambda]"}], "/.", 
    RowBox[{"y", "\[Rule]", " ", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{"1", "/", "k"}], ")"}]}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232427015182*^9, 3.546232435156028*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k", "-", 
       RowBox[{"k", " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "k"}], ")"}], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          SuperscriptBox["t", 
           FractionBox["1", "k"]], ")"}], "k"]}], "+", 
       FractionBox["1", 
        RowBox[{"1", "+", "\[Alpha]"}]], "+", 
       FractionBox[
        RowBox[{"\[Alpha]", " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"\[Alpha]", "+", 
            RowBox[{"k", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", "1"}], "+", 
               SuperscriptBox[
                RowBox[{"(", 
                 SuperscriptBox["t", 
                  FractionBox["1", "k"]], ")"}], "k"]}], ")"}], " ", 
             RowBox[{"(", 
              RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]}], ")"}], "2"]}], 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"]]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           SuperscriptBox[
            RowBox[{"(", 
             SuperscriptBox["t", 
              FractionBox["1", "k"]], ")"}], "k"]}]], " ", "k", " ", 
         SuperscriptBox[
          RowBox[{"(", 
           SuperscriptBox["t", 
            FractionBox["1", "k"]], ")"}], 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
      RowBox[{"1", "+", "\[Alpha]"}]]}], "\[Lambda]"], ",", 
   RowBox[{"\[Alpha]", "<", 
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232478566571*^9, 3.546233638036752*^9, 
  3.554125304653095*^9, 3.554126335537692*^9, 3.555265999090593*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia3", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Ia2", "/", "k"}], "*", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "k"}], ")"}], "/", "k"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.54623247327657*^9, 3.546232478732023*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"-", "t"}], " ", 
      RowBox[{"(", 
       RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", 
    SuperscriptBox["k", "\[Alpha]"], " ", 
    SuperscriptBox["t", 
     FractionBox[
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}], "k"]], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", "k", "-", 
      RowBox[{"k", " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", "k"}], ")"}], " ", "t"}], "+", 
      FractionBox["1", 
       RowBox[{"1", "+", "\[Alpha]"}]], "+", 
      FractionBox[
       RowBox[{"\[Alpha]", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"\[Alpha]", "+", 
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "t"}], ")"}], " ", 
            RowBox[{"(", 
             RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]}], ")"}], "2"]}], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}], "2"]]}], ")"}], " ", 
    SuperscriptBox["\[Lambda]", 
     RowBox[{
      RowBox[{"-", "2"}], "-", "\[Alpha]"}]]}], ",", 
   RowBox[{"\[Alpha]", "<", 
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232498458661*^9, 3.546233646492959*^9, 
  3.554125306140801*^9, 3.554126337193742*^9, 3.555266003102359*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia4", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"Integrate", "[", 
    RowBox[{"Ia3", ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "\[Infinity]"}], "}"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.546017553376211*^9, 3.546017578186591*^9}, {
  3.546060190028669*^9, 3.546060215541151*^9}, {3.546232494373554*^9, 
  3.546232519267088*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"-", 
     SuperscriptBox["k", 
      RowBox[{"2", "+", "\[Alpha]"}]]}], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
     RowBox[{
      RowBox[{"-", "3"}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}]}]], " ", 
    SuperscriptBox["\[Lambda]", 
     RowBox[{
      RowBox[{"-", "2"}], "-", "\[Alpha]"}]], " ", 
    RowBox[{"Gamma", "[", 
     RowBox[{"2", "+", "\[Alpha]", "-", 
      FractionBox["\[Alpha]", "k"]}], "]"}]}], ",", 
   RowBox[{
    RowBox[{"\[Alpha]", "<", 
     RowBox[{"k", "+", 
      RowBox[{"k", " ", "\[Alpha]"}]}]}], "&&", 
    RowBox[{"\[Alpha]", ">", 
     RowBox[{"-", "1"}]}], "&&", 
    RowBox[{"k", ">", "0"}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232723877207*^9, 3.546233680133625*^9, 
  3.554125331121136*^9, 3.554126362141245*^9, 3.555266032375804*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IFa", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Ia4", "^", 
       RowBox[{"(", 
        RowBox[{"-", "1"}], ")"}]}]}], " ", "*", " ", 
     RowBox[{"(", 
      RowBox[{"p", "^", "\[Alpha]"}], ")"}], "*", 
     RowBox[{"(", 
      RowBox[{"ss", "-", "cs"}], ")"}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546018347393014*^9, 3.546018403066614*^9}, {
   3.546018436099692*^9, 3.546018441274599*^9}, 3.546019614310392*^9, {
   3.546019656617135*^9, 3.546019704529838*^9}, {3.546057935083661*^9, 
   3.546057940051575*^9}, {3.546060690488888*^9, 3.546060692698881*^9}, {
   3.546136907926816*^9, 3.54613692580183*^9}, {3.546232739391533*^9, 
   3.546232740164084*^9}, 3.554125738215772*^9, {3.555266064276668*^9, 
   3.55526606479834*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
      RowBox[{"2", "+", "\[Alpha]", "-", 
       FractionBox["\[Alpha]", "k"]}]], " ", "\[Lambda]", " ", 
     RowBox[{"(", 
      RowBox[{"\[Alpha]", "+", 
       RowBox[{"k", " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          SuperscriptBox[
           RowBox[{"(", 
            FractionBox[
             RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], 
         ")"}]}]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"-", 
          SuperscriptBox[
           RowBox[{"(", 
            FractionBox[
             RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          FractionBox[
           RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}]]}], ")"}], "\[Alpha]"]}], 
    RowBox[{
     SuperscriptBox["k", "2"], " ", 
     RowBox[{"Gamma", "[", 
      RowBox[{"2", "+", "\[Alpha]", "-", 
       FractionBox["\[Alpha]", "k"]}], "]"}]}]], ",", 
   RowBox[{
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}], ">", "\[Alpha]"}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.546232757750575*^9, 3.546233688982581*^9, 3.554125334056447*^9, 
   3.554125744337598*^9, 3.55412636507671*^9, {3.555266056124345*^9, 
   3.555266068288385*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IF1a", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"IFa", "/.", 
    RowBox[{"\[Mu]", "->", "0"}]}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.546017428290329*^9, {3.546018467395976*^9, 3.546018491191415*^9}, {
   3.546018587031472*^9, 3.546018597806486*^9}, 3.546157241026402*^9, {
   3.554125747652855*^9, 3.554125750096702*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
      RowBox[{"2", "+", "\[Alpha]", "-", 
       FractionBox["\[Alpha]", "k"]}]], " ", 
     RowBox[{"(", 
      RowBox[{"\[Alpha]", "+", 
       RowBox[{"k", " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          SuperscriptBox[
           RowBox[{"(", 
            FractionBox["x", "\[Lambda]"], ")"}], "k"]}], ")"}]}]}], ")"}], 
     " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"-", 
          SuperscriptBox[
           RowBox[{"(", 
            FractionBox["x", "\[Lambda]"], ")"}], "k"]}]], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          FractionBox["x", "\[Lambda]"], ")"}], 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}]]}], ")"}], "\[Alpha]"], " ", 
     "\[Lambda]"}], 
    RowBox[{
     SuperscriptBox["k", "2"], " ", 
     RowBox[{"Gamma", "[", 
      RowBox[{"2", "+", "\[Alpha]", "-", 
       FractionBox["\[Alpha]", "k"]}], "]"}]}]], ",", 
   RowBox[{
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}], ">", "\[Alpha]"}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232774650792*^9, 3.546233699094437*^9, 
  3.554125335504818*^9, 3.554126366594064*^9, 3.555266073534437*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IF2a", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"IF1a", "/.", 
     RowBox[{"k", "\[Rule]", "2"}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232789850054*^9, 3.546232814587751*^9}, {
   3.546232870367111*^9, 3.546232891695176*^9}, 3.546233703305696*^9, {
   3.554125752180985*^9, 3.554125753799993*^9}, {3.554125831296257*^9, 
   3.554125832186967*^9}, {3.554140396163627*^9, 3.554140397253515*^9}, {
   3.555266109771585*^9, 3.555266110206182*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
    RowBox[{"2", "+", 
     FractionBox["\[Alpha]", "2"]}]], " ", 
   RowBox[{"(", 
    RowBox[{"\[Alpha]", "+", 
     RowBox[{"2", " ", 
      RowBox[{"(", 
       RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        FractionBox[
         SuperscriptBox["x", "2"], 
         SuperscriptBox["\[Lambda]", "2"]]}], ")"}]}]}], ")"}], " ", 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", 
         FractionBox[
          SuperscriptBox["x", "2"], 
          SuperscriptBox["\[Lambda]", "2"]]}]], " ", "x"}], "\[Lambda]"], 
     ")"}], "\[Alpha]"], " ", "\[Lambda]"}], 
  RowBox[{"4", " ", 
   RowBox[{"Gamma", "[", 
    RowBox[{"2", "+", 
     FractionBox["\[Alpha]", "2"]}], "]"}]}]]], "Output",
 CellChangeTimes->{3.546233010925664*^9, 3.546233716615459*^9, 
  3.554125335761174*^9, 3.554126367373922*^9, 3.554140399483854*^9, 
  3.554141697275686*^9, 3.5552660762352*^9, 3.555266111555545*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IFun", " ", "=", " ", 
  RowBox[{"Function", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\[Lambda]", ",", "\[Alpha]"}], "}"}], " ", ",", 
    FractionBox[
     RowBox[{
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
       RowBox[{"2", "+", 
        FractionBox["\[Alpha]", "2"]}]], " ", 
      RowBox[{"(", 
       RowBox[{"\[Alpha]", "+", 
        RowBox[{"2", " ", 
         RowBox[{"(", 
          RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", 
           FractionBox[
            SuperscriptBox["x", "2"], 
            SuperscriptBox["\[Lambda]", "2"]]}], ")"}]}]}], ")"}], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        FractionBox[
         RowBox[{
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"-", 
            FractionBox[
             SuperscriptBox["x", "2"], 
             SuperscriptBox["\[Lambda]", "2"]]}]], " ", "x"}], "\[Lambda]"], 
        ")"}], "\[Alpha]"], " ", "\[Lambda]"}], 
     RowBox[{"4", " ", 
      RowBox[{"Gamma", "[", 
       RowBox[{"2", "+", 
        FractionBox["\[Alpha]", "2"]}], "]"}]}]]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.54608073954952*^9, 3.546080787340927*^9}, {
   3.546080827508503*^9, 3.546080832763547*^9}, {3.546080881724667*^9, 
   3.54608089839569*^9}, {3.546136031913543*^9, 3.546136106756538*^9}, {
   3.546136264957334*^9, 3.546136269166274*^9}, {3.546136300237964*^9, 
   3.546136302873075*^9}, 3.546136404353272*^9, {3.546136877306471*^9, 
   3.546136878124014*^9}, {3.546136974390393*^9, 3.546136995325726*^9}, {
   3.546137115334749*^9, 3.546137121892679*^9}, {3.546233026432763*^9, 
   3.546233039064002*^9}, {3.546233731274747*^9, 3.546233735724144*^9}, {
   3.554125757864723*^9, 3.554125770650248*^9}, 3.554126551395401*^9, {
   3.555266142168176*^9, 3.555266171955638*^9}}],

Cell[BoxData[
 RowBox[{"Function", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\[Lambda]", ",", "\[Alpha]"}], "}"}], ",", 
   FractionBox[
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
      RowBox[{"2", "+", 
       FractionBox["\[Alpha]", "2"]}]], " ", 
     RowBox[{"(", 
      RowBox[{"\[Alpha]", "+", 
       RowBox[{"2", " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          FractionBox[
           SuperscriptBox["x", "2"], 
           SuperscriptBox["\[Lambda]", "2"]]}], ")"}]}]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           FractionBox[
            SuperscriptBox["x", "2"], 
            SuperscriptBox["\[Lambda]", "2"]]}]], " ", "x"}], "\[Lambda]"], 
       ")"}], "\[Alpha]"], " ", "\[Lambda]"}], 
    RowBox[{"4", " ", 
     RowBox[{"Gamma", "[", 
      RowBox[{"2", "+", 
       FractionBox["\[Alpha]", "2"]}], "]"}]}]]}], "]"}]], "Output",
 CellChangeTimes->{{3.555266150871585*^9, 3.55526617355399*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<PlotLegends`\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.546078399638204*^9, 3.546078434270568*^9}, {
  3.546078523483738*^9, 3.546078526611331*^9}, {3.546078631725602*^9, 
  3.546078677869414*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"IFun", "[", 
      RowBox[{"1", ",", "0.05"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"1", ",", "0.1"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"1", ",", "0.3"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"1", ",", "0.5"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"1", ",", "1"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "6"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotLegend", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<\[Alpha] = 0.05\>\"", ",", "\"\<\[Alpha] = 0.1\>\"", ",", 
      "\"\<\[Alpha] = 0.3\>\"", ",", "\"\<\[Alpha] = 0.5\>\"", ",", 
      "\"\<\[Alpha] = 1\>\"", ",", "\"\<\[Alpha] = 2\>\""}], "}"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"LegendPosition", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"-", "0.4"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Dashed", ",", " ", "Thick", ",", "Thin", ",", " ", "Dotted", ",", " ", 
      "Yellow", ",", " ", "Blue"}], "}"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.546071566443362*^9, 3.546071604772914*^9}, {
   3.546071664304524*^9, 3.546071734557583*^9}, {3.546071769565434*^9, 
   3.546071781503191*^9}, {3.546077877666447*^9, 3.546077878779971*^9}, {
   3.546078077257591*^9, 3.546078094273397*^9}, {3.546078128979278*^9, 
   3.546078131508565*^9}, {3.546078195525481*^9, 3.546078246143438*^9}, {
   3.54607831567725*^9, 3.546078368785814*^9}, {3.546078441904356*^9, 
   3.546078501052553*^9}, 3.546078697301196*^9, {3.546078795298968*^9, 
   3.546078819926423*^9}, {3.546078851304196*^9, 3.54607891370029*^9}, {
   3.546079894604615*^9, 3.546079946211399*^9}, {3.546136122778719*^9, 
   3.546136164810206*^9}, 3.546136449027762*^9, 3.54623312566578*^9, {
   3.54623315837957*^9, 3.546233172933139*^9}}],

Cell[BoxData[
 GraphicsBox[{InsetBox[
    GraphicsBox[{{}, {}, 
      {Hue[0.67, 0.6, 0.6], Dashing[{Small, Small}], LineBox[CompressedData["
1:eJwV1nlcDV8UAPAkJF69mVc9ktBGlp8Ske2eFpEiJSFpU4QkFCkt0kIbSqmk
xRoplZQl3Rbt2mnvDe0llWih7Xf99T7fz8ybuefMueeeZZZnDaz5+fj4rs3g
4/v3O6Zjd3/fWY/tP5Lyh/0UKrGP1fIVFfKm6PUJGeQq24jL+ttPBcrbobOe
i31PsptwglhTbEPURdTfJ5u2OroJD77SCLCVd0NUjpyOrUAzllCofT9d54nG
ftyeG2/YjLc5+SkVR/mgs3fXNReGNWPzwu1Pgy38kJTdXK5IRTP2FP8laSIf
hJwtEhlhvhZcnbq/OHj4FmpYr7rp/KoWbNW4xmu0Lhj5rowPMDVowcMzBJHJ
uztoS+nj/U8cW7CPQuuf7KgwNG+J+PuO0BbM1c9Mk3MPRxJmJl0hr1pwvFPY
WT+LSJSwqKqWVdGCSwt3d+yXj0apT1sa3fh4OOkSvc9EIBZZccO/t4rz8CV/
98Sg4Vg0fTbRf2gVDwu+Omzzq+4BOuUz61S4AQ9XFhTkyxU/RIacmhgrKx6O
aFSWOfTuEcov3LVotyMPr+QX5mVGPUFpkS+4z+7w8JCYy5aBwKfoexGlovaQ
h98rdIcvc49HVjd1vBRTeFhXP3e/j8Vz9DJV2QlKefhs7MViPfkkVLO2jLv4
Dw9vSmuT9+S+RJZvq5XsZzKYz2qFurFAMlp+J0nbmMXg4kuhMQHDyYjh53Dn
LGVw0gzdcjm7FPRHMyi6egWDg/35J7M6U5BnsGOLlhKDjWPOGv+sS0XHth6O
2KjG4O0K8jf89r1CxdMRV97tYrD0q+YMmeJX6Fu4y+CQHoO/F2iLGb1LQ1dU
gqeCjjL4Sr9M5buodPSolBX+ypHB5k6NU/vFMtCDevODsi4M1uS/veZHYAb6
zLr/6IgHg1niU35L3N8g3+nkJbJ+DB6KSXv7ZvQNOuQaovgmiMG1Cqe79e3f
ogDnsvAFIQyO3la/w8viHYruTjbTuMdgz8Igh8WN71CsYvt8dgyDT+jveJhu
8B6tLqlITnzAYEXrVL4ejUy0b/2BRrNnDBYdsFnrmZmJFp/Yji6+YPCY0xLT
RRs+oMwQqSMWLxmcExDwfo98FtLXqp14k8bgrN6GT/OeZSFLJZvrhzMYnLlr
Oa94FUaLHu7rLHnL4LdPHAZ8kzBKNpz4zcpk8BF+C76HC7KRjrv6dZksks+U
OXP5jbNRBFf41PxsBh8yT6Is7mWjGMG/xsU5DDYSOSCR3ZyNvKK+0UfyGHwg
a1x6iVQOEpY+rpb7kcGGZx6scjPLQTNzTwVN5zPYQFJ7fUtsDkow9Y3kFDJY
v3Rg69bWHDSpdmF6inifc9iOezK5KFLHZl9uEYP3Kmzb+9cqF93b7i5hWszg
PfVtRoef5CJzPKujmljX18/sTVcu6vQqV1pWwuDdKko2XIU89Ej5iqs28a6O
OvuLp/KQyt5CpEu8847b5S8Jeej6ffxdgVhLQ85z/Y88dP/k3MFW8jzNoVK/
kP8+It/P4hmXiNXjzocMnf2IjOKOPu0m61HbtzBKP+UjGnp+Q0aFGKbxo+Sh
j2h81ws/c7L+7UnHE0XW5yO6yWaTTQGDtx5lpds55qPRJCnvPST+LfPTssrS
81GrPbuATfKz+b1x4eqxfIQMbuxJzWXwplMzKv1VC1CNMN/pdSS/GxfG1/c6
F6Dm4Y2nb2MGqxTt/aadWYCyFpiHV3xgsLJ81NAcVIgS0ZywXvI9131RHz/u
UYg+7eMbKCTfW9GrZ2ZBTiHaMMr28X7N4P9aVcS8NIvQVA9t8yCZwatvtyxu
8y5Cd8eHV/InMXgVeMmrFxahFZcnF2kkMHhFdNVGvt3FKOBeitXJxwyW3+ME
Zv7FKGynmbweqU+5CSntrE/FaA//gV5xUr/SxrbGV/RKSL3Zbt0TzmBJ8Tmu
Y4alKP+lpKjxDQZL5Cd6HwwrRYs8PSYNvRm80MEwKL2uFNXY1e5Rvspg8eq4
GAfjT+hqohqOdGIwO2hr7qBZGSocZw0uOM5g4W1tJXpxZYjqzZdRtiD7r+9G
TVJrGTLmLm5RMmGw0O66dlvrclQXrWvWos/gWbPPz+k5VYHuvXn9Y2ALg7u1
3UV+Pa1A/teWt4aoMLgkMIA72V6BtBKsXiwl/aPQrybk+tpK9CX2BndYjsH+
dP/DqGeVyEc/2stfmOw/aZmPH+9XIVPRkJ3uTTw866NCkXZmFbpbl/v+7Wce
HrFW/FTeWIVuGCWu5pXxcP2zbZ/rudXoYqqLegfm4ftKh9r7blej9bdreD8e
8LC8WqCAmE8N+hJmN3eY9FtuW4hg5KMaZGOdMf7FhPRn78j5S/JqUE3MlY9x
hjzcW/RUVIHvM7qsqyr4V4OHX+7Lld3m/BklOFmEJi0j/dR8VNPa7gvqXnFg
iVJDC9Z2t/B+bVSHPjxaKcxsasHrbuZoxTnUodt9Zw5a/deCJWOWCQYG16Gh
6TWna2Va8GDWNz+rcnL/DzPhq8ItOGzK4hZHqx69Uf0g8LO1Gbe7Wt47t6EB
ddvxuapdb8YeV46lrBFtQndMVt+p+NiETwXknV+4rgmlSy70/5vRhA2jZNbP
2teEZIqthDkJTXh5Zlt6s38Tmv+0tnz+7SZcPn4s039mM6qKWlQgY9KEJV2s
CnuGmpHaidTOtv5GnHHZuuVxFQ8t9uROls1uxE+2n66TGOKhBCkjy9MjDThs
5rmqmzSD5l4azfnV0YAvBl7Jv7yfQToFM3zyPzZglbiQxD1fGJR2TiDjzNUG
fKT9a5az7VdkF5V24MtIPW6cJ3JT2v4bKnrwUkauug43GJ9ee/5SGxoKKFle
q/MF+7XutL3r04aaH/atLd74BW8+JfssM7QNKXLSR57LfMFRl1uk56S1ob8l
v8o3j3/G5uF64lGDbShEp40d8Owz7vqiPJl/sh2ZapQJj/F/xsP7JkoWmnSg
mE8abiLPqjG1M/B4DnShKvPdDmyfCqz5LBOt0u9CQhK5um76FdhpXt+CUIsu
tLA2JC9fsgJ/rdhdauPZhT7s6kz5llqOkw8JKrI/dqEH9yQi9raU4X2nrv0x
3dmNBO7J1Ams+oRvBV4OmNjTg2I3nEyTe16E2Z+tUzce+Y5Mr65NMVLNwTJL
bZ95Ww4gh/upq5w63fGmljOlasE/Ed+VlPluPRjl/PXQ/XzvF3rjMOAlI1qN
bHBRUZbnMLKR9Bvt3tmMIo49lRAzH0VFXV151y+2oTWHvo1MWf9BJvHSsYKB
PYj3S68ctMdRRKwkO8h5AA0xCxXFD0yiiASXbHORX+hWgvOJgwen0c07gpc+
HR9B8iKCe5zu8YHyQMlA5a0/KN3eIyEoZgZcO15cmD9rEn2WC5mjH8wPT0Uk
Qt4s4QPZazUrjkbMhL/XCqstmmaA6j5mfcw9AQj4s7a+yncmtNh7bw8MmAUa
WXkKSsKzIFX1MCv/9mzI4Ks02BY/G8SNChvivefA65m8Y+wFgoBa+W7nOghC
pPkGR137uRAhbsOSd5oLNyIhXbRKCDyjT/puOCUE1R6deX0C8+F+eXhBkP08
8FqTGbJXlQWudiGDi8/PB4t1ggrFusLw3WLFgsOWLOjW3L504XoR8J/sFeAd
FwaJO6xjA4JseNe3c0DYWAQ6mf4DNpZsUAmK8is6KgLX0irLE46xIXXtTzlP
CxEYfy19od+KDc/OR5oM24jAs5iebedOsCF8rK+46ZIIRFwubrS1ZcNFgeBH
8aEiUHz8yIqtF9mgLNl8WL1KBOJrr37afIMNtXKbWjfLsqEnL8sk/QUb2qts
NUCeDeJOMYebEtkw5Br3aMcKNrxfXH54OokNIrVCJ/atZsMim4ljmils2OXT
8t16PRukBkeic1+T9Xd6Dt/SZIOcRvzzm1lsiHlaJthF1in8wurv6Qo2JO3n
P9V3nA0n5907eK6SDZnTKqU/bdiwVCsqw7GKDfUHYwMnyLoDpMfcXWrYQAte
oGlHNvT39yq51LHBy2aB5DZvEtdk40Idhg02CsfWhjxmQ7zM8J/V/WQdQiHd
jk/ZMMB1Npw5wIaa3ty4Q8/YsD4msrqeePsLaVEpEpdlSLrq1Z9s4KxtHYtP
Y8PU7/BXhb/ZkLXeIjcrjw0hjvsPrRpngyiYHej9xgYjQ03XPXMoKFl6U7is
jQ0Ccgv0BQUpcJ+BC192sOHD8J9ducS9uVKbHXvY8CR44pGyEAV4B0+Kj7zn
zLIw4fksCk7pHO0W46OgzU8xMYSmIMfoiIuaFAVHntftmJKkoCBYrEh3KQUD
KVIzExZT8Km8QvSQNAWrjHuzjMh99VqaSXbyFMRrbF6XsISCQZU13+79R0H/
937BXeQ+Ke601sh2Ci4YJHnoL6fAue4BnWBGQZKR1+BDRQo8OEfN0i0o0D4e
FKqoRIGPHvdFzjEK+Oa/2pxJfLvQf0f9CQqCg329K9eR92Q4OM2yp+CV8Kwl
P9ZTUHtXi2fmQUGs/x+7kU0UKB/qfSYaR8HvtvQRbaDga1HM3skHFHQndtx+
SRygeuBXxyMKtGKL9ETVKOiUyN6aEU/ivNWt3EQc2RJacTiZAuqHZoypBgX8
x9SGozEFmkIW7K1aFLysGYnwzaHg86UtvBBiE80X2+3zSNxqpRW9xOly3Otq
hRR0ue2VCttJwcnuPon2cgoqPuecat1FQeWZcFDgUbDJ9l6lvg4Frrw9HdRX
Cu4OdX27R7xSb6bf328UyDfxL+gg9lK0qyntIHnT+THkoEvBxl8ax+1+UODG
jrL220NBtNOA/6sJClpSuvcG6FGg0/NIMWqKAs8XXa+LiMcOG3/x4qNh7HyH
usA+Cgy25EsZCdBQ8nh1hRPxrKnIlLF5NBy4uPDVQX0KbK9p1W1bRMPaDSrv
+gzI//2quiQX00Bn5cZJ7KfAO9hkbFyKhszeqTc7iaPjzi98J03DVZXaizHE
lTj6iMpKGrbu37BuhyHJT6GCrdhqGqZkLkTYEveUp135vYYG7Rx+pRBifl7J
/VQlGhZMnfzZQqw8McL8p0pDgVbM25MHKMie6TnI2kIDTkl57EesO48148dW
GiI3fsh9TmwlISOdADTYY9Fb3cSDy5LW+anTwO/nD7ONSH4VVDVOatJwh09f
WoY4bJOe1fJdNMhYSjkbE0tDo8Ps3TT0ZOgPOhC/3Gnt3aFDg8rNleFBxEVG
Lk8e6tEgdFHWFRP/dXjaveQgDREOD6O5B0m9Xln3Z+oQDdsibB+tIuZ4fZjL
M6ZhIDmgeTvx6pCalVGmNNzuX9VuSfwm0nSLizkNNeb1ry4Q73jQo2NsSUOu
qUr6NWLTlGnbBcdp+GZvuT+OuPeNn+voCRpU7U37k4gvZYsF1Z6kwa3qROZ7
YoGi2OjXp2l4+T70QyHxrYpVL++coeHayemf1cSSden4wlkazBUyD7cQx/PU
Kg3O0XDoaNvvTuL1nZ++Kl2gQdolIG+AOOfHwZ9sRxqE51fkjxLvHW6dMXiR
BoHE3PEp4saJM3SFEw2Xhd2tZx2i4LjAH+kkZxpsfy+aOY94aJ6XcuAVGoxV
Uj6LELtxRDRt3Uh+sFEjh3jeokhDHQ8a3ANlRbnE4dJy1is9afiTus5zIbHs
ymTHuV40dBtGyC4iTlba4tPtTUNngv34P29TLQgr9KWhfWbVbEniEtB/+uQG
Dcszq7X+XTfa1Zzh7U/ytTPo/b/nteqdKLIKpKF3paT1v/edPThUr3GTBjW+
UA1R4glT1x7p22Q9F6iDbOLrxwX/zggh8Ws+j/kXj3Xx4ui5oTScZmdE/YtX
fbWyOnWXhjNLdif8y4fUzV2dCyJoKDe4VjpCPP7zqN/Se+R7PPGc/EFcb3jh
vxX3aQhQslFrJ07LuF69NoaG1bKGdxuI7VxfSaCHNEj5Zl/OIdb5WpSl9Zhc
b746O414hQbPcu9TGkwtSx8/Jm4VnJtwNIHU9/fLkj7E+LSUnnUiDZMPlv52
II4qV/5l+5IGsdFq3r96O3DHdMuVVzRsmeD92EK8bvQCc+012X/rXOjlxMLG
N675Z9BgJhy/myIuWpJWGvmeBhOe6kgrqffHnsVnH3yg4YRc68kSYs8OHuc5
puH5m7ifycRbE+aavM2jgc+rf5sL8ULhJXw5+aRemjG/GfGI/fpHRYU0zMpW
bFb7t79UzPrqSmn4fc25TODf/stNuzJSQ/pNv0OiO9m/07IlS6e+0PC4U3CR
CXGzL/NxVj0NiS/0ozcSh+0RYok1k/6zNKjzO+kXcxvM7iu302AVdfOqNnHn
Fke1LZ00TGg+iZUizo3261DvpiFZPbB2iPSnK1av1xj0kf7UcMQ3nHhwQCjL
/jcNnEX9fA2k35UZLLV0GqFh6YnLjU+In7/eMNtjjIYZ2SOlF4iPuZjvvTlB
Q9oO41Eh4trZ6bxEAQ4IpXy68B/pnx8WW0z3inKgtqNfZjfpv/D63HiFOAe+
rahtYxF/1PUcTVvAgSDvuKbKveQ8dXk44CbJgbqH5hcMiZsbOhhalgN2gj1a
BqS/T4Seyt6szAHX+3ERK8h54LHGJXPJBg6c2+Hcyewm+z/f/43ARg7Mcl57
Jox4/u8XyeWbOfBBJHnFDGJJg4FYS3UOpNjePlJGzp8twg5X/fQ50FWuXQbk
vMp67OV6dj8HXk5IFX7fQep7W+hlwwMcWJ7QOBFKvNs2/ZzUYQ48N/OT7Nak
wLhkzCLVnAPiqfaK18j56Ozjqt54lgPXwzML75Dz9e2Uz8yVQRwo2Fz/QH4z
BUE/l4VsvMUBnU35a5JVKbBsz5TeEcwB6axzdZuIhUqG1MzDOLB7ONN3Jzm/
TUJNPcKiOdD0da6FsQoFU6tUJvlfcmD9K2UpI3L+ax7uGGmq4IDDg68CTxUo
WKDr4dNTxQGP+wbZosR92xeJj9ZwwOqdduzVFRSEyupvoOs5YBPgXX6IzB+d
A5kXdn0l8Z8+3TMhS8ENnzuDaYMc+HXmp7okmXPKX2n0BlKiwO82t+GNGKn3
bWkdtzmiIDZ2PFGYWKVQ9luomChoXBZLOyZKzr/GWfX3F4pCKE/68DwOBWdm
FOUnLhOFJysV5+izyffQ040rUxIFNd8vkulk/trda3iIZSAKHX9r3Lun2JC/
9HhBQLAoJDhD11g7mTuZqoV2d0RhnmTs/VXEzve3ndELE4X2vVkJR8mcpygh
JkpHikLe6pYKTObAKM5Hi7txopAUrLL1Co8NDrOlJ+OSRaHITajkC5lPZfta
lDPKRSGYPbN1fgmZVzMOxH0TEoOncvXH7pD52kS62fRIoBjc/cJyMCBz8Xj6
2kWr5oiD44PSeeu5bLgys+dTqJs4OETwbkb4iIC4rKqFHB8X8lrT/iZiYbhk
Z/Rb6DIXmqNYfq2jLJBUsSqSd+HCt/7oCu3fLMiePBel7soFo+f9ssmDLBAK
DNR0vsqFhyZ/+Jx7WBCd8PFOzw0uvNSeF8TfxIKC7nUbiiK5MBV292LXBxaI
HhO56J3JhX2lboYC11jwduXi3XFZXKio/Bm7150FpkMrpT5kc6HaJlo43IUF
8Ve1Cn5/5ML+T9V6KxxYsCXWVdyqjAvF+X1O261ZYNnyPV2dx4XPBWOM2k4W
zHn8x8/0Kxd+Rp656qbBghe2c8ycW7nw622N7jvEgpFx6TmpnVzQnBd3bO0m
FvhJGB9cNsCFc2yXWBEFFqxtPbFq208utDm9jt0hx4LPzxynD/3igu7vzRXO
y1ggpXr76a1RLjTc2v+2dSEL8vhiXF784cJg3YSjmDgLbIpe6BWNcyHXdfGx
nTQL5t96J9M+yQUnL7jqJMyClINFo9PTXNDvGqyMF2LB/1GQJ+A=
        "]]}, 
      {Hue[0.9060679774997897, 0.6, 0.6], Thickness[Large], 
       LineBox[CompressedData["
1:eJwV13k8VF0fAPAxl4yZQYSRLXuRQpbQcn5pkVYtVFpEisqTHtlTSig7FQkl
SdbsyZZr30JEdmZCQnqEKNne8/41n+9n5s499/y2c+Ws7I9epFIolDAuCuX/
n3/2X3tmYn9n+4mUraWye0pJX+u16z4qn0NBa/ZYzhl/Jhv/G7oSpHwNFebl
tjFb2slU0Z4XXTHOyMgj/MSL8g7yZ87OQDvl24jpRf3+90YnKaHSXrTc4YXY
ja+WqVxd5DZXf826GF8UoWUTcde5izxfsz3xoaU/yjIhM671dJFeYtNSZ5SD
UdXXdZQV2t3kp+xjdQ9nQhHFRGGKea+btO7e4P274yHacXxR4Vp9NznDRUNn
Ch8jpfeltwIYPaSvysBcaUwEevNu9YydUQ/JOlKcq+QZifak6bT13u4hk1wj
7P0to9CWYZdkt+we8kPNvq/HlJ8jnZ7zhPTKXjLdRdjkDPcLpOQXxcM26CVd
AjzfBM+8QAeT0nIOXeglaTmnbKc7XiKNMM0FyfResrm6ukqpLh6BSt2DjuZe
8mm3lsLJwlfIoCfn9fJkL6lKFegvjnmNmpNfy4lo9JFToje3TAQlouyp3v26
B/vIIpWRSDnPJCTBKm/QvNxHHjhSfszXMgX9nunUoD7vI+1fONcdVk5HT1xW
yZILfaRe7qCyFysDJfZ1b3YU7icp1usMzbkzkV2cxOSNtf1knUt4bOBMJkqt
+ezgfLifNI+1N5/syEa0Y7lFJyP7ye0qyn7+JjnIQv7KqH5yPymf0/tOoS4H
GcruTI0p6Ce/VxuLmhXmotAJ4ba5zn7S4z+F5sKYPPTM9JavrzCbPO/avXRM
9B264ur1dmwNm9xFDdvwI+gdqmjdvn9CjU3yiy35r/HMRwE7Y5eHdrPJ59s6
d3tbFiJJsu183Q026VUT7CjdXYh2fVoccL3NJm2O7I7PO1qEDrpYt/Y8YJMa
F7MpozuL0dBR8aMVMWyyLDCw6KByCTo3Y2loVMYmS8a6GhjJJej8Nj2qUz2b
LN67tr9uPYkmbVPSTrSyydNUS0q8eCkyXO0rbjjEJs2zePmo5qUobNi//cA4
mzx5Pl3IMroUSc+mugv/YpOmJfPya2TKkOBIQ89lLg55/J+X629blKEvoo7D
I9wc8qiUsXbfizJU+a/XFyMahzRxj9gdrVCOmOuv9yUKcMh9upq2LJUKtDV+
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
2JEzJP0cYoDLa7tbgzheJ7OL7V124vuZ3bWqwF5tX9AWasSAiotO/HHYUSPZ
zysOM+Dd+FSeKbZ5QgbRd4wB27a55alhS1ql2c6eYMDfmM5bXNgxPQmbVM4z
INJF7tIrnF9nIl8+MbRmwM5IxgMHbCnT2IXTtgyQXtV8Yzv2s6bI6uDrDHgZ
9l/KR5zPUgVAhDsyIHg6WyACOyZ+BEW7MoCvufSoOXa0q15B4h0GbA1PudWL
6+WpfGdqaSgDGjMu29XgehPnvzNS/ZgBoVtVOR7Ykb/XKjVGMqA/Xl5PA/tJ
g8vzrhcM+GhcGBGK6zfcmRU2lcmAJs8nUnrvcPwsycY/uQwYcFQu7cX94PF+
G/pyPgPWkLP7PbEfyb67xyhjwLkFG5kS3E/C6s2cFVsYINCyUCyfS0CQTMRp
s0kG2HRXmj7A/YzJtz3yzAwDiiglRQzswOmvbVZzDMh2MBcOwv0voFbnkD0X
E5Jr4h/54f7o5/AZHggx4bpKzMxl3E99qkWUCzWZ0G0WkFWbiPtVVrFVqQ4T
nm/lv7Ae2zvaOrZanwlNXXP8ga8JuHc9V7x1BxPK7x49aoT7+V2J44zxI0xw
9W55lYD7/a1rj35KOzDBIbnkJ9czXO/lmn39Tky4vGvVgSMxeP/Emuti3Zgw
maY+/jwaz5P3zHi5u0x4lpqwoI3nzRjT11QplAk1w31XD+B5dDLVtVAtnQnb
vKUm1oXheT9y1nvLGBOMHHyno+8RQN26cH3hBxMCj8h35nrheg6JOvt+kgkC
9tpCDXcJuLq5QxfNMcFbr9xrxpOAl74mo4Y0fljpVvavNp6fK5V2HtqnzA+t
3DxTVnj+frdcJ37Kih8Ux/OlfS/gfLTrWX/1Ej9kB9QGHMXzvdY5GN26wg/3
U7LEpC0JSAj4dSnOgR/aVjX4pJ0jwOJt6dtRL34oVT7em3sKz0faqWPu8fxw
qHg7jx0+XxRl+AVHD/HD2i8Cqm76BKgWbn35ZoQferuLAuh6OJ8qJ96S4/xg
mpsmG6VLgFOXad/gL34IqNH/lqNFgDohr6bGIwA/926cb9lAQLxZYV2xkgAE
NZRw8uVwvBfHuPsvCcDXMfcyXRru5/8+rk25IgAr9j6XS1uB4/t1W6DLNWzO
G25ZHnwubwhdJeQsAE0nuMwIKgHXo3Xld/kIAOV7iG7+PD5f6nuhlHgBsFX3
d+35jwryTqvdnTkC8NFu91FmGxUKx40mBMwFwWKtpp1BFBV0g2P8a88KQsXR
2wvnIvF5WH1SyctSEFxdlHd7RVAh2SHqzIytIJwRn+Gqwu8JkX/G63pcBOGo
S4jBlgAqOHM/fJUULgg6b9ZrfL9JBS2p3lOGLYJwbyDF6ewZKrQr6Q0YKK6E
en2NP29WU8FW5YL6o4SVUC1mXNbrxgVlZqdv7pARgnBp1bXX8fuF1smxZJE4
IeBqZzs5CFPA7t6ejm2SwiDMUrQlXy2hB5dof7keCYPNlOrbD1KL6L205fKY
yCqwi62dmLOZRwVLvoRqMDYlyn5D/Rxqytk5FiQkAjoL1W/kaH9Qleyl6sCH
IiAqiMQNj8wi73emcV/ooqDom92qUfILnZHvPXc6SBRmd4RoB6yaRvN56pLr
ecXAIvCvdVnYJPIgRhvCb4uBbgL7oJPSTySmqG+pRGFBwZmnmzxO/EAu18x+
0d1YIOyRffRY4RiS0rWuVb7JAj3qD/W59DFUuvhvjOEtFthcO/EtLn4M0YOC
drnfZUHMwszwfOAYep5a+XjUjwW7Jd7p4VmDqkc26dRGsUAsivOMtmIMiVwQ
dPYpZsHo0bHZ2OOjqEBVel9cCQvcWnUkXxqPonNTqjLvS1mgyh2pkrh9FCXd
3VP9q5IFVdtOryhcN4q2vLglZt3IAr4L5R+oiyPIqu97nmE/C25Iiw3Ivh5B
vAlz/uc4LIhLzOo6Ej2C0ux4LdwHWJAfzC7zCR1Bs/PyvNnDLIhmXL846z6C
/CXMT8hNsICi85yYPzyC1Ads1m+bZMHJQn7/nbtHUFuy0/LJaRYcsJwiQgxG
kIx+WGLobxY8zXFv3ag0gioosTfT5lgg1ftB5Z7ECLKtTTtcO88CJ7kfjt2C
I4gZWqgwtMiC+MlNb7V5RlDWidrfy8ss2Nj0cyzs7zf0P2tupSg=
        "]]}, 
      {Hue[0.14213595499957954`, 0.6, 0.6], Thickness[Tiny], 
       LineBox[CompressedData["
1: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
        "]]}, 
      {Hue[0.37820393249936934`, 0.6, 0.6], Dashing[{0, Small}], 
       LineBox[CompressedData["
1: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
ISIB30LJWuFy0v8AZSHRng==
        "]]}, 
      {RGBColor[1, 1, 0], LineBox[CompressedData["
1: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
        "]]}, 
      {RGBColor[0, 0, 1], LineBox[CompressedData["
1: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
gHJNh4VasUnrn/19ARi11a1I+991tf8BAnuASg==
        "]]}},
     AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
     Axes->True,
     AxesOrigin->{0, 0},
     DisplayFunction:>$DisplayFunction,
     FormatType->TraditionalForm,
     PlotRange->{{0, 6}, {-1.283973802615764, 4.33604441309669}},
     PlotRangeClipping->True,
     PlotRangePadding->{
       Scaled[0.02], 
       Scaled[0.02]}], {-1, -0.6180339887498948}, {
    Left, Bottom}, {2, 1.2360679774997896`}], GraphicsGroupBox[{
     {GrayLevel[0], 
      RectangleBox[{1.05, -0.45}, {1.425418994413408, 0.3499999999999999}]}, 
     {GrayLevel[1], EdgeForm[{GrayLevel[0], Thickness[0.001]}], 
      GraphicsGroupBox[{
        RectangleBox[{1, -0.4}, {1.3754189944134079`, 0.3999999999999999}], 
        InsetBox[
         GraphicsBox[{{{InsetBox[
              GraphicsBox[
               {RGBColor[0, 0, 1], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 0.08}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 2\"\>", {1.2100000000000002`, 0.58}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {RGBColor[1, 1, 0], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 1.24}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 1\"\>", {1.2100000000000002`, 1.74}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.37820393249936846`, 0.6, 0.6], Dashing[{0., Small}], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 2.4}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.5\"\>", {1.2100000000000002`, 2.9}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.1421359549995791, 0.6, 0.6], Thickness[Tiny], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 3.56}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.3\"\>", \
{1.2100000000000002`, 4.0600000000000005`}, {-1, 0}, Automatic, {1, 0}]}, {
             InsetBox[
              GraphicsBox[
               {Hue[0.9060679774997897, 0.6, 0.6], Thickness[Large], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 4.72}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.1\"\>", {1.2100000000000002`, 5.22}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.67, 0.6, 0.6], Dashing[{Small, Small}], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 5.88}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.05\"\>", {1.2100000000000002`, 6.38}, \
{-1, 0}, Automatic, {1, 0}]}}, {}},
          AspectRatio->2.1309523809523805`,
          FormatType->TraditionalForm,
          PlotRange->{{-0.1, 3.26}, {-0.1, 7.059999999999999}}], {1, -0.4}, {
         Left, Bottom}, {0.37541899441340787`, 0.7999999999999999}]}]}}]},
  AspectRatio->Automatic,
  Background->None,
  ColorOutput->Automatic,
  ImageSize->{Automatic, 288.133129186058},
  PlotRange->All]], "Output",
 CellChangeTimes->{
  3.54623313329417*^9, {3.54623316422757*^9, 3.546233175420794*^9}, 
   3.546233754573585*^9, 3.554125338343712*^9, 3.554126369887006*^9, 
   3.554126563638233*^9, {3.5552661658978*^9, 3.555266180260425*^9}},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzVfQdck1fUd2oSwFnbOmpbWzvstLa1y9Y6urSuWq3WWXGPuhEnioq490IR
QUAFHIAoDoyKiIriREAExcnee8P58r8jCZZohL7v9339NcHc5LnPueeee/Y5
T8/h1uNGTxpuPX7k8BZdrIZPHTd+5PQWnadYaYeULygUtb5RKF5o0UKBf5NC
Id9I+z9/a4s3DP9/O/Am/qj42uRXTQy+UigVfM3EX7ofNf1/5kdvsHezWuXl
NGTXLvLu04dCv/6aXC0tqf3Zs/xHecYvf529137j8WO6+O23dKZjRxrg6Unf
XrxIEzdtoth33iHHMWPIrLhYwJNjfK7X2LvqzYcP6d7bb9OMlSvphYoKUvLh
+jk55PvHH+ylLCvj12Qbn60ZH8NlkR9/zKBRmPExdUkJ+XfvTuumThVQGc7D
9vNV/ku3oUPJZfhwPqM5H3spI4PB193fX1ydZRwKMc8fvr4U07Il1cnP12KL
j3U8c4YevPUW1c3LE/NkGp+H76CyXm4uPWrenDoEBZGiLh/bNWQILZk712DP
M545z4KFC2n34MF8TMzzWnw8pTZqRPj7zHk4lStfTUykjJdeorcePCBFfT62
ytqaNkyebABP+jPnWTttGm2cNImPiXmaJSRQZsOG1Cg1tfI8TQTJUnnur1En
XG/M+exlrzf6r/3e+3yaopSoVhW3aczHmiYlUfrLLxPAVrzIx5xGjSKgQw9u
Gr8NR5VK+567K3TI+8O/dXmM6ZXGp7e3saFNEyfyMTH9R7duUUrjxmReVFR5
erHKdwvvbto+bfTIHSNHjlTUYu/KrSPH2bx6MLGE/aKW6WA00hMJNrLF/fuk
eImPHe3alf52dzdYZeqzV6nG5C/zCSZt3MiYA/skJu156BCda9fu+SZ9AuZX
+BgO+p333qNOgYEkb6kqLaX4116jD6OijE2f43lxQMvh3zxz+i7Hj9O1L76o
NLZs9mxaMXOmAfQphvSlBn39Eem70WX28MFdJh1PUZSx2Y3e41DPnjTcxaXS
GECPe/11AnutdI+qzoJYNngpzhTjFYKyADv4hR7W5GfOs3DBAv05FPPMXLGC
HMaPN20escuA/eGbb9KnN29qscJx87L2MH5LdPEXIs3XRKEvggnW478HL0hu
0oSwfabe49cTJ+jKl1+SAcXXxT1mES2/QfRZDlH9i0Tfaoh+CSX6Oo+o7mWi
r6YQra8LAVWHz3P++++pc0CAwfqSnnXv2nsGDaIJmzezMRVR6VSidSlEjV2J
LDsQBdUiKhf7bqYkKutEFOhF1D+R6NVxRFvxvYX+kOjExb9uzwQLZwvmL2Zl
Meb2cno6vU4UF0z0w2miHz8kihICQvUp0c3zRN8HEXVoqp3KXM8Xcbz1+H3K
GhtyuMdu20Z7//qLviK6HEf0OvD6AlEFZ/0qLMGWaNEjoubYTnM9NnFy9MtJ
fNadVBe++45mHDkSkaTVOnoSHRJssBfRwVSiRj8RnZJi2HrVqieI8SnT83lU
7925Q+lNm5Ykl5a+hrkE/WBPsGf4K2hU2TImhtEtWIuJ0ys32dqm50+Zsr0H
0WF5hn8kOp1A1AzbIee+++671ObqVQPQE4zP3YCPNayoyCp5++3HS65f3yfP
459EB4D014jiGUPTjuHMzreze665g4KD56Z9+mk8+yRk6lyiJSFaVdWMqFjy
rV80GqbemTS3kFD/EG1JGznSd/bKlWVynm8jk+9sXH/eZZDmTrA4r8rOoY/D
1m664PbT1fhwyQtAY/uJ+m4h+kdeC+0L/K1JcvKzYeDzqFsRhacWFDTPfuml
sq5nw+/9dTr2grzv11Epdyd6RxxrE516T4599CAzztoz7FCXS49vyLHuFx5e
/e3io+vK8opyhTiwDbVK1z2it0GeEj4omIN37zbAUbxx+PgBMlMTlYBPbfP0
DDzf4eeCOwM8J4/wv31aoKFvYGxIyDhfmz/P3Lso1b9viC6BhbwKuhQgjnJy
IrCjqm/N+AdndOo1ecUz/csrehzp1o0G7dmjFTAVFZKZvlBBFQNO3j2vKisv
E2fNfAHRQj+i3yXgULKhCekF0xK89cUt6hlfLr97w4nX4r3KMwtrDzsXeSHz
pYYV7R7dj2mTmhT9dUpi1FcpSVH4+2Vq0u1vkxMi8feL1OQYjOPfDYuLcgV/
eTm7KPfEtCP2p6YcttPp5lpMgrMPJ3KRaLn56afMotCjxd4UYDmi1WBuUbmF
rZ3vJU1fa2+X6DNwYL7YN/U72VnxEki8LMpKi+UZfz0lL103Fx8zY3SoZWOv
CmYCXddu/nwyHYN8oheVFeXl72c9SvnzbnCYfaiX9+mYs6OScpLfW35p26Gk
D5pneW6eGjL/qmvAtJt7zwy8o7naKf7anea5yZm4ThCvqlZFRXnr9JS73yQn
3vo0PTVWrd/+rauDnVrdS38keIp6HdFUV608w6cfT59mttpzbDvfh3rvZMen
zbm+6+R1z+FrSxx/tCaHLhOov/0gmj/JkvLT6pLvmIFk22YlvWSeSdvaW6nJ
sf00hVnRjp9m3NxvudLj1KJdM254nMZa6pQWFvMdV9UtLSkEwbRNTogwKy8r
EcfQ8lj0mfCh+6czKhbit4HWUosneq0d0TmwEWkePI0mzORKPrt7J81nzdzD
N10t15Vv72hVi0HXgBx7jslbMXxS1nC7f+IiT/16N+5mx1nXd58Ksuz+MKJP
+6iIlUO3Prbrsz53budlZfM6LoxxHbji8e4+i/ji1CVOP1qf8/tno93lHcfa
Jd68py4vLRNYZxuElX2fFB+OlQlyZiuSqOUrUw8i2nOd6HMoGFAkB3p4PJ3U
G2LEaq9XWM7ULqvLHTtaAZwC519mugcu2T3n2lHfN3PTmKXxHtGdDKKXIGKg
MiQ0a0YwSviNa9ctLCytV1DAbI262k3Z4rZGkzOxy7p8m1+XZm7uukA79XSF
kq1VlbXztzl7tJv4x/2zN2uXFomdUoHJ4/CAA+DffJm1wWfnuV31rp9fUoAR
fBVI1GkiaY0krTXuPGLE05f4IkaypnZdi7tXOHaw2nxurXeTgszcXx8/uNwm
JvUeKB2/PED052yiZfg3bBLoLYJVmbVITMwZpNHccVq3InB8qO+ldRc2+kbt
HbxMLCnP+ddZboFL9vwSdzm6VkW5gN1cVV5ehp17OyeLCSesxXn5ma3Hpx9Z
Ii2yT4gioHO0jY5Of/zGG08lQraUku0/WmMZw6KPhmK08+P7oVhGUi/30a+l
5mf8QBT8UMuaLYgK8T0E0QhnZ6laKQ8tm+VXOPnnldkbflsgtkT5cE9fO9ur
OwNezU/PEYCpGxcWZLZLjLv5YnER89w0T85NE3SmWk003YVoOBwPME4Y0Iur
BJqJG0Vd7CyO6C+X4272Ox0bgq/OEbUbSuSGf0tzhbkxuARS1y4qKv393LkH
vsvm+qfN6b7mrmd/ewU/b0pwA2C8TWr0YwFxHXAxcDB5KoDuV9PzM+tpDcjH
2lv4jRyZApJ5CrQKZqziFj9q2UvTgvz0d7Mz4yTjgCYaSfQxjhdGwLO3/PMP
NRYioly789rdBxWc9J7qWO7YYbqAt17QoYmb+9wLCsP3LxUV5nRMeHy9jhYf
UCXu9/OY8G5cdpIlkettLy9bnFwG42y8WRrA2FzP9iWc9UoKijokPL7RIK+4
QFIyzgjYwO9EfvgMJocD2yo8XPqSVE0z0gtWu24JzpnbZXmpQ6cZHM66EfuG
ruh/99R1wAnShWgb43dL811EUjRE4K3U1PZ5DRuWYEp+7GZVwel7Mz7wL8Ab
vJafmo3R7B2/zcXMQLCPTcDq4UduB7L9INp/iegbLACf++3bR0EdOhD3D6qU
WgQPDjxxO3rxoK0pzj1tOcwqSIXe94NuYqvA/qWmRuRf2KZN5A/nz5c/N6h1
3sxNysBoqktP2++S4iNeyinKCx3tM8eiWMuBtYi4SfRpF6Lj4maBnToxlyX7
1FwoIVomPuK2/8UH2tMl6MA8xHfc+i6Prkb+EvfgMvbfxu2ad/x06z0+dnbX
nhtIlR7IXvNA/ZxOzfsTeZ0lai+v/zgykhK1KiLzn7bg89cvKigO2G61u3xj
h5kCODOfABuXv2JvBC93vrj70bAVqwo7drxoTlTEJplZDbgynAdaQXwJJAFv
OD+dYF+Jse2jR9O8xYv5fO9wnt88PTknyHGiS8WWDtMBWalTp+k7Aze6DLp4
/WJpvXqF1gUFm6XObMx/15GjQvuet/nahPfCG7X6/kzHjh21rx9Cv/p6WIML
2aTQ/6akd4KP9f4/+1r9s2LLOsf5Y/oPtPK4ryjSfvsjP9tKKsu0DHWdk9Sp
aZOFHRb4qZO09N9Bd31Fq7zwLYdH9hgxaf5Gxw2rJ4/obB+QAjAUnTiYKipN
nX/Cbqj1lFXbZzsuGz9x/KartXLKydx0rFpA08Nokusw6yEBMWc/fKhlTdpv
BhB5QiQKjMKyBytlHs+W/NJPEu+l7DtiuwuYBEaT3f+andCmVXz6iRP96xPl
CAte8YSrjS/erFFZ6nGnuaMc69zKZ8eyYWlmZJ2H+eV6/BX1fuTj+GoAdza+
V3xn5cPWb3ZreDqTFD9xoMyoOPbS2m++fN8+usgQ7/3i91l1mh+YrijX2k8l
9zZEf/m+Zf2LOTq8fZV7eUJQ6w7uyrgyqk0F4Tdmfvb1u6vuFj8P3j5Nj03A
6F2P8XMf99k9/oOHmfFg4Vq59SGsf4E3ePJ0ftcP+O0/S7sTf+HguA3AGfV4
+1jJiBHbr1y428sIvsRim5UkHHKcM2ZFozOppYpfdD+t6Jh5ZvjNlp9a17mZ
L+nzBarInn/ZboSt1aJlNsvsZzzq3vz1lZ1nrGvml1AscfdKRdrR+B9ea9Pc
6VGpAe6KZscs+8z5/RFXFHlaFk8lD65s/bJFu57nshXPgRylRA77rxZ7Z/wD
LiN5MSgJZh7MPcVHOsArbM67BZZYfbGV3nklljLzLTad3uvGZFPtqtHzMx9+
o/jx3qDRHQa12hyep6jQEq6QvETFveN9Nk7ZsH7OroFDljc9nVQij1+L4vu7
x83cesu8oEhPRoJEGpRnR7Q+HpapKKPyn9NPWka9++HUutfyDDhAof0tmw9D
G3+9pnZkQUXzkkfu939t8X2LLfdLngdT5hJT0V5jFkgpC2udeXkEDa2ePp1p
BOzTJxy+ZtmpeaW1zUrookc7urr3iys+41Z9knEv0eKpSNK+l/dN2t8+9I2v
t6kflgjSwnDhvKjFbZa2mROpKDDEXUnvOJ8FrbeHhV9aUxk/b5Q+3jt/sN3m
CY6bl6yfMcXug/2384F2PX7Khsa5tfVu2cdjhIfzahfr4aN6LTz4gHG/58BP
3dbpd+MxGrFv5FKMQFuCFiKF+dv37lHaK68Q+JPiU37z41260FrndRHlhdl1
yXWQZfHWHlPmXXU7YV5WUips+X856DvpuW77zLPjZvReGa0oJGqbE9I//O1W
i8xvFxly9orvs85PHzrG7aGihMoGJez5NrB5pyMvpFVIzq7ScuYk22OLbMLH
tGJo49MrX6b0MzNGrryFqRV8T8zeLr63/kKH79aY3S0m7WUpA4M8TqmSS5+H
iZv9kBh2j4nskSv/wQj80PDfCQLa168f2djb8zk4kizgbgdj2lZeOj4yKrQ7
dVs7gDb0+Cdm18DlkAnCOq8y0iA4+EtlGed2rBg5YpLNxq07lw77s7u1f7Ie
l2avlKWddFs0dMx4O4cNB2b9OeTLlVdyQCKCAWn5v3+MZcvPDKmqPuVcjBr4
Yetz37Zrd65dux/Wd51y/oXMCjmjlj0U/hW719bKes0OGyf74Zt7TNivTih5
HlTVaZsc8QCjmQM2jO5MFADVgbnRtd/2OHyYRXoQEGvNtYYvr1yhiE8+IZio
yURNvBxPrMpeNGkCOXaeULLtxxnjbh68wFWsyaYAwe0BC4zAJ3hGe2AGE+3G
6CtpaSyk9ENwMH3GiR8eMLBIEPdaomkrtApTg+K8wgD/BevJscsECJDjvtOd
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
/R8cULzwfwCEA8xF\
\>"]]
}, Open  ]],

Cell["", "Text",
 Editable->False,
 Selectable->False,
 CellFrame->{{0, 0}, {0, 3}},
 ShowCellBracket->False,
 CellMargins->{{0, 0}, {1, 1}},
 CellElementSpacings->{"CellMinHeight"->1},
 CellFrameMargins->0,
 CellFrameColor->RGBColor[0, 0, 1],
 CellSize->{Inherited, 5}],

Cell[BoxData[
 RowBox[{"Weibull", ":"}]], "Input",
 CellChangeTimes->{{3.543684992882703*^9, 3.543684994655665*^9}, {
  3.544320894879453*^9, 3.544320906231942*^9}, {3.544321013728986*^9, 
  3.544321015677552*^9}, {3.546149536487394*^9, 3.546149537999375*^9}},
 EmphasizeSyntaxErrors->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"ClearAll", "[", 
   RowBox[{
   "\[Alpha]", ",", "\[Sigma]", ",", "\[Mu]", ",", "x", ",", "k", ",", 
    "\[Lambda]"}], "]"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.54613653746201*^9, 3.546136542655197*^9}, {
  3.546136596080742*^9, 3.546136617338891*^9}, {3.546139146090529*^9, 
  3.546139146249962*^9}, {3.555266252063499*^9, 3.555266254282837*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p", " ", "=", " ", 
  RowBox[{
   FractionBox["k", "\[Lambda]"], 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
    RowBox[{"k", "-", "1"}]]}]}]], "Input",
 CellChangeTimes->{{3.543684783475436*^9, 3.543684946824956*^9}, 
   3.543685129663494*^9, {3.544295734613175*^9, 3.54429574288267*^9}, {
   3.54429580082901*^9, 3.54429582329368*^9}, {3.544320780873962*^9, 
   3.544320785346142*^9}, 3.544320837287442*^9, {3.544320881922005*^9, 
   3.54432088239278*^9}, {3.54432100764836*^9, 3.544321019573801*^9}, 
   3.546149541553032*^9}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"-", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", "k", 
   " ", 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
    RowBox[{
     RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"]], "Output",
 CellChangeTimes->{
  3.544320837880473*^9, {3.544320883580563*^9, 3.544320911227469*^9}, 
   3.545309803843712*^9, 3.546016483142384*^9, 3.546017657044242*^9, 
   3.546060076762132*^9, 3.546060141670154*^9, 3.546060377463162*^9, 
   3.546061431182232*^9, 3.54606188717779*^9, 3.546071462150901*^9, 
   3.546136812639187*^9, 3.546138975120109*^9, 3.546148046460689*^9, 
   3.546149544392845*^9, 3.546151403683482*^9, {3.54623018096315*^9, 
   3.546230186401331*^9}, 3.546233513423806*^9, 3.546233791803171*^9, 
   3.554125338482346*^9, 3.554126370079164*^9, 3.555266369233603*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Theta]", " ", "=", " ", "\[Mu]"}], ";"}]], "Input",
 CellChangeTimes->{{3.546137329720142*^9, 3.546137340576589*^9}, {
  3.546149548558869*^9, 3.546149554463107*^9}, {3.546233499084344*^9, 
  3.546233500287852*^9}, {3.546233793898834*^9, 3.546233794633646*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"ss", " ", "=", " ", 
   RowBox[{"FullSimplify", "[", 
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{"Log", "[", "p", "]"}], ",", "\[Theta]"}], "]"}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.543684996758039*^9, 3.543685116992625*^9}, {
   3.543685161495624*^9, 3.543685164824434*^9}, {3.543685617602922*^9, 
   3.543685622261405*^9}, {3.544295746546906*^9, 3.544295827428027*^9}, {
   3.544295874222879*^9, 3.544295884036298*^9}, 3.546016486016091*^9, {
   3.54601942039296*^9, 3.546019421197285*^9}, {3.546137342783463*^9, 
   3.54613734607702*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"1", "+", 
   RowBox[{"k", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        FractionBox[
         RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], ")"}]}]}], 
  
  RowBox[{"x", "-", "\[Mu]"}]]], "Output",
 CellChangeTimes->{
  3.544295884678365*^9, 3.545309805435313*^9, 3.546016487855942*^9, 
   3.546017670089106*^9, 3.546019421888676*^9, 3.546059377336055*^9, 
   3.546060078214513*^9, {3.546060139149627*^9, 3.546060144271088*^9}, 
   3.546060382291988*^9, 3.546061435830015*^9, 3.546061887191896*^9, 
   3.546071462301595*^9, 3.546136812733527*^9, {3.546137347255125*^9, 
   3.546137353812429*^9}, 3.54613897527059*^9, 3.546148046689522*^9, 
   3.546149558534132*^9, 3.546232064476071*^9, {3.546233504193507*^9, 
   3.546233516686043*^9}, 3.546233797109957*^9, 3.554125338635385*^9, 
   3.554126370190418*^9, 3.555266369347945*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ss", "'"}], " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"D", "[", 
    RowBox[{"ss", ",", "\[Theta]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.543685180126496*^9, 3.543685298634426*^9}, {
   3.543685431540192*^9, 3.543685489527895*^9}, 3.543685534481716*^9, {
   3.543685624867701*^9, 3.543685665571384*^9}, {3.543688058809387*^9, 
   3.543688137132826*^9}, {3.54368832453227*^9, 3.543688330973921*^9}, {
   3.544295753339424*^9, 3.544295760783175*^9}, {3.544295853271568*^9, 
   3.544295889194162*^9}, {3.546016489095013*^9, 3.54601649563242*^9}, {
   3.546019427600456*^9, 3.546019428430676*^9}, {3.54613735651055*^9, 
   3.546137357241563*^9}}],

Cell[BoxData[
 RowBox[{"-", 
  FractionBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{"k", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         FractionBox[
          RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]}], ")"}]}], 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"x", "-", "\[Mu]"}], ")"}], "2"]]}]], "Output",
 CellChangeTimes->{{3.543685658802668*^9, 3.54368566906248*^9}, {
   3.54368807593941*^9, 3.543688142568622*^9}, 3.543688332640362*^9, {
   3.54429586658533*^9, 3.544295890282246*^9}, 3.545309806594238*^9, {
   3.54601648969558*^9, 3.546016496189694*^9}, 3.546017677241552*^9, 
   3.546019429586647*^9, 3.546059378810901*^9, 3.546060079358672*^9, 
   3.546060145605671*^9, 3.546060384883913*^9, 3.546061436928236*^9, 
   3.546061887206539*^9, 3.546071462474284*^9, 3.546136812904919*^9, 
   3.546137359182575*^9, 3.546138975369357*^9, 3.546148046818373*^9, 
   3.546149560252101*^9, 3.54623206886184*^9, 3.546233518378738*^9, 
   3.546233799107136*^9, 3.554125338722875*^9, 3.554126370282902*^9, 
   3.555266369480518*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"p", "^", 
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}]}], "*", "ss"}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.546016522942259*^9, 3.546016539967992*^9}, {
   3.546017704408171*^9, 3.546017705125968*^9}, 3.546019441035926*^9, {
   3.546019471091529*^9, 3.546019479505023*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{"(", 
    RowBox[{"1", "+", 
     RowBox[{"k", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SuperscriptBox[
         RowBox[{"(", 
          FractionBox[
           RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], 
       ")"}]}]}], ")"}], " ", 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", 
         SuperscriptBox[
          RowBox[{"(", 
           FractionBox[
            RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", 
       "k", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         FractionBox[
          RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
    RowBox[{"1", "+", "\[Alpha]"}]]}], 
  RowBox[{"x", "-", "\[Mu]"}]]], "Output",
 CellChangeTimes->{
  3.546016544655516*^9, {3.546017682666078*^9, 3.546017707524088*^9}, 
   3.546019442560441*^9, 3.546019480115117*^9, 3.546060081264836*^9, 
   3.546060146559043*^9, 3.546060400916709*^9, 3.546061439971061*^9, 
   3.546061887221677*^9, 3.546071464395533*^9, 3.546136814598201*^9, 
   3.546137368746807*^9, 3.546138977048079*^9, 3.54614804861861*^9, 
   3.546149564604638*^9, 3.546149648173352*^9, 3.546232072442872*^9, 
   3.546233524049641*^9, 3.546233801423466*^9, 3.554125339615348*^9, 
   3.554126371120186*^9, 3.555266370245603*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"csIntCitatel1", "/.", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], "\[Rule]", " ", 
     RowBox[{"y", "*", "\[Lambda]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016644463204*^9, 3.546016698494855*^9}, {
  3.546017718072268*^9, 3.546017718824221*^9}, {3.546019484592136*^9, 
  3.546019489873669*^9}, {3.5460588628943*^9, 3.546058863025369*^9}, {
  3.546058985559764*^9, 3.54605898695691*^9}, {3.546149570336845*^9, 
  3.546149571255931*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{"(", 
    RowBox[{"1", "+", 
     RowBox[{"k", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        SuperscriptBox["y", "k"]}], ")"}]}]}], ")"}], " ", 
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox[
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", 
         SuperscriptBox["y", "k"]}]], " ", "k", " ", 
       SuperscriptBox["y", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
    RowBox[{"1", "+", "\[Alpha]"}]]}], 
  RowBox[{"y", " ", "\[Lambda]"}]]], "Output",
 CellChangeTimes->{
  3.546016699867985*^9, {3.54601771087677*^9, 3.546017720075646*^9}, 
   3.546019451857504*^9, 3.54601949082593*^9, 3.546058865086693*^9, 
   3.546058991110302*^9, 3.546059305292639*^9, {3.546060081368136*^9, 
   3.546060082414614*^9}, 3.546060147815039*^9, 3.546060407046361*^9, 
   3.546061531311124*^9, 3.546061887295093*^9, 3.546071465443946*^9, 
   3.546136815322759*^9, 3.546137371159345*^9, 3.546138977799651*^9, 
   3.546148049399068*^9, 3.546149656219562*^9, 3.546232076199355*^9, 
   3.54623352857147*^9, 3.546233804112583*^9, 3.554125340081783*^9, 
   3.554126371593227*^9, 3.55526637076461*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel3", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"csIntCitatel2", "*", "\[Lambda]"}], "/.", 
    RowBox[{"y", "\[Rule]", " ", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{"1", "/", "k"}], ")"}]}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232088390435*^9, 3.546232095185625*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["t", 
   RowBox[{
    RowBox[{"-", "1"}], "/", "k"}]], " ", 
  RowBox[{"(", 
   RowBox[{"1", "+", 
    RowBox[{"k", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       SuperscriptBox[
        RowBox[{"(", 
         SuperscriptBox["t", 
          FractionBox["1", "k"]], ")"}], "k"]}], ")"}]}]}], ")"}], " ", 
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", 
        SuperscriptBox[
         RowBox[{"(", 
          SuperscriptBox["t", 
           FractionBox["1", "k"]], ")"}], "k"]}]], " ", "k", " ", 
      SuperscriptBox[
       RowBox[{"(", 
        SuperscriptBox["t", 
         FractionBox["1", "k"]], ")"}], 
       RowBox[{
        RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
   RowBox[{"1", "+", "\[Alpha]"}]]}]], "Output",
 CellChangeTimes->{3.546232100824901*^9, 3.546233537073972*^9, 
  3.546233805965809*^9, 3.554125340582462*^9, 3.554126372067845*^9, 
  3.555266371339286*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel4", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"csIntCitatel3", "/", "k"}], "*", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "k"}], ")"}], "/", "k"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232112593013*^9, 3.546232125917882*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{
    RowBox[{"-", "t"}], " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]], " ", 
  SuperscriptBox["k", "\[Alpha]"], " ", 
  RowBox[{"(", 
   RowBox[{"1", "+", 
    RowBox[{"k", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "t"}], ")"}]}]}], ")"}], " ", 
  SuperscriptBox["t", 
   FractionBox[
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], "k"]], 
  " ", 
  SuperscriptBox["\[Lambda]", 
   RowBox[{
    RowBox[{"-", "1"}], "-", "\[Alpha]"}]]}]], "Output",
 CellChangeTimes->{3.546232131595805*^9, 3.546233543221349*^9, 
  3.546233810282288*^9, 3.55412534178063*^9, 3.554126373155695*^9, 
  3.555266372612641*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntCitatel5", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"Integrate", "[", 
     RowBox[{"csIntCitatel4", ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "0", ",", "\[Infinity]"}], "}"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}], " "}]], "Input",
 CellChangeTimes->{{3.546016758763041*^9, 3.546016792970542*^9}, {
  3.546017733204061*^9, 3.546017740186443*^9}, {3.546017914630278*^9, 
  3.546017915139312*^9}, {3.54601813955664*^9, 3.546018141998787*^9}, {
  3.546019493851544*^9, 3.546019499184226*^9}, {3.546058803868124*^9, 
  3.546058826478995*^9}, {3.546058870461028*^9, 3.546058872003744*^9}, {
  3.546059018757644*^9, 3.546059019951728*^9}, {3.546059209756854*^9, 
  3.546059224271504*^9}, {3.546060118428053*^9, 3.546060118951836*^9}, {
  3.546060429719045*^9, 3.546060435859049*^9}, {3.54606155661684*^9, 
  3.546061556750753*^9}, {3.54606187684573*^9, 3.546061879156262*^9}, {
  3.546149679351288*^9, 3.546149686924944*^9}, {3.546232153175871*^9, 
  3.54623216243717*^9}, {3.55526626689906*^9, 3.555266276116812*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{"0", ",", 
   RowBox[{"k", ">", "1"}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.546016797608153*^9, 3.546017744115164*^9, {3.546017901155742*^9, 
   3.546017918255887*^9}, 3.54601814479272*^9, 3.5460194592406*^9, 
   3.546019501847466*^9, 3.546058816227488*^9, 3.546058858910903*^9, 
   3.546058988908802*^9, 3.546059027020108*^9, {3.546059207468971*^9, 
   3.546059213730049*^9}, 3.546059311153677*^9, 3.54606008545984*^9, {
   3.546060121584368*^9, 3.54606015090936*^9}, 3.546060482353594*^9, 
   3.546061561105924*^9, 3.546061888934606*^9, 3.546071469576597*^9, 
   3.546136819048198*^9, 3.546137375365945*^9, 3.546138981516168*^9, 
   3.546148053135883*^9, 3.546150578307016*^9, 3.5462322891228228`*^9, 
   3.546233568384461*^9, 3.546233827611574*^9, 3.554125354185252*^9, 
   3.554126385760187*^9, 3.555266385701792*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"p", "^", 
    RowBox[{"(", 
     RowBox[{"1", "+", "\[Alpha]"}], ")"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016812881654*^9, 3.546016818147665*^9}, {
  3.546016886250683*^9, 3.546016904857094*^9}, {3.546018151081055*^9, 
  3.546018151902321*^9}, {3.546019505441384*^9, 3.546019506907304*^9}, {
  3.546059876912032*^9, 3.546059883931349*^9}, {3.546060057180457*^9, 
  3.546060062381365*^9}}],

Cell[BoxData[
 SuperscriptBox[
  RowBox[{"(", 
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       SuperscriptBox[
        RowBox[{"(", 
         FractionBox[
          RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", "k",
      " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
  RowBox[{"1", "+", "\[Alpha]"}]]], "Output",
 CellChangeTimes->{
  3.546230203148988*^9, {3.546233577473427*^9, 3.54623358052292*^9}, 
   3.546233833105397*^9, 3.554125354256655*^9, 3.554126385863041*^9, 
   3.555266385825511*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"csIntJmenovatel1", "/.", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], "\[Rule]", " ", 
     RowBox[{"y", "*", "\[Lambda]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016918820028*^9, 3.546016933459735*^9}, {
  3.546018162034847*^9, 3.546018162802109*^9}, {3.546019511970786*^9, 
  3.546019518337126*^9}, {3.546059893179542*^9, 3.546059893847781*^9}, {
  3.546060047266137*^9, 3.546060052681203*^9}, {3.546230217034243*^9, 
  3.546230217998498*^9}}],

Cell[BoxData[
 SuperscriptBox[
  RowBox[{"(", 
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", 
       SuperscriptBox["y", "k"]}]], " ", "k", " ", 
     SuperscriptBox["y", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
  RowBox[{"1", "+", "\[Alpha]"}]]], "Output",
 CellChangeTimes->{{3.546230207442299*^9, 3.546230219675734*^9}, 
   3.546233583258629*^9, 3.55412535426552*^9, 3.554126385872124*^9, 
   3.555266385841626*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel3", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"csIntJmenovatel2", "*", "\[Lambda]"}], "/.", 
    RowBox[{"y", "\[Rule]", " ", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{"1", "/", "k"}], ")"}]}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.54623072884787*^9, 3.546230785760333*^9}, {
  3.546231604373572*^9, 3.546231605426678*^9}, {3.546231716620151*^9, 
  3.546231717085787*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", 
        SuperscriptBox[
         RowBox[{"(", 
          SuperscriptBox["t", 
           FractionBox["1", "k"]], ")"}], "k"]}]], " ", "k", " ", 
      SuperscriptBox[
       RowBox[{"(", 
        SuperscriptBox["t", 
         FractionBox["1", "k"]], ")"}], 
       RowBox[{
        RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
   RowBox[{"1", "+", "\[Alpha]"}]], " ", "\[Lambda]"}]], "Output",
 CellChangeTimes->{{3.546230757338739*^9, 3.546230786864854*^9}, 
   3.54623122497391*^9, 3.546231390679448*^9, 3.546231620590633*^9, 
   3.546231718726483*^9, 3.546231912776218*^9, 3.546233587684638*^9, 
   3.554125354377819*^9, 3.554126385978791*^9, 3.55526638598796*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel4", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"csIntJmenovatel3", "/", "k"}], "*", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "k"}], ")"}], "/", "k"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546231135452288*^9, 3.546231187522384*^9}, 
   3.546231380041735*^9, {3.546231608893195*^9, 3.546231609558657*^9}, {
   3.546231727310628*^9, 3.546231732399831*^9}, {3.546231878599405*^9, 
   3.546231893664122*^9}}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"-", "t"}]], " ", 
  SuperscriptBox[
   RowBox[{"(", 
    FractionBox[
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", "t"}]], " ", "k", " ", 
      SuperscriptBox["t", 
       FractionBox[
        RowBox[{
         RowBox[{"-", "1"}], "+", "k"}], "k"]]}], "\[Lambda]"], ")"}], 
   "\[Alpha]"]}]], "Output",
 CellChangeTimes->{
  3.5462311903916*^9, 3.54623123012743*^9, 3.546231393222635*^9, 
   3.546231736337671*^9, {3.546231899759423*^9, 3.546231920689016*^9}, 
   3.546233592071807*^9, 3.554125354653946*^9, 3.554126386219087*^9, 
   3.555266386164778*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"csIntJmenovatel5", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"Integrate", "[", 
     RowBox[{"csIntJmenovatel4", ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "0", ",", "\[Infinity]"}], "}"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546017079018856*^9, 3.546017090969569*^9}, {
  3.546018190056803*^9, 3.546018190821094*^9}, {3.546059043677427*^9, 
  3.54605904460088*^9}, {3.546059403368323*^9, 3.546059411524818*^9}, {
  3.546059479614725*^9, 3.546059492483282*^9}, {3.546059617399394*^9, 
  3.546059617680817*^9}, {3.546059915271946*^9, 3.546059916341114*^9}, {
  3.546060024912348*^9, 3.546060025553251*^9}, {3.546061569414866*^9, 
  3.546061603372963*^9}, {3.54606187218996*^9, 3.546061873288195*^9}, {
  3.546230234851797*^9, 3.546230235704077*^9}, {3.54623031496448*^9, 
  3.546230316811469*^9}, {3.546230894174747*^9, 3.54623093187054*^9}, {
  3.546231021434708*^9, 3.546231058033388*^9}, {3.546231204938011*^9, 
  3.546231254795637*^9}, {3.54623130518147*^9, 3.546231317577529*^9}, {
  3.555266281673683*^9, 3.555266282155685*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         FractionBox["1", "k"]}], ")"}], " ", "\[Alpha]"}]}]], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      FractionBox["k", "\[Lambda]"], ")"}], "\[Alpha]"], " ", 
    RowBox[{"Gamma", "[", 
     RowBox[{"1", "+", "\[Alpha]", "-", 
      FractionBox["\[Alpha]", "k"]}], "]"}]}], ",", 
   RowBox[{"\[Alpha]", "<", 
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.546230539424707*^9, 3.546230928296439*^9, 3.546231130736478*^9, 
   3.546231217042055*^9, {3.546231310240832*^9, 3.546231332557165*^9}, 
   3.546231408953687*^9, 3.546231758805175*^9, 3.546231931318572*^9, 
   3.546233612404448*^9, 3.554125371926736*^9, 3.554126403394792*^9, 
   3.555266403711908*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cs", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"csIntCitatel5", "/", "csIntJmenovatel5"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546017159619789*^9, 3.546017171553549*^9}, {
   3.546018198699244*^9, 3.54601820322215*^9}, 3.546061584597621*^9, {
   3.546061615263666*^9, 3.546061627686996*^9}, {3.546232301287677*^9, 
   3.546232306940481*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{"0", ",", 
   RowBox[{
    RowBox[{"k", ">", "1"}], "&&", 
    RowBox[{"\[Alpha]", "<", 
     RowBox[{"k", "+", 
      RowBox[{"k", " ", "\[Alpha]"}]}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232321705469*^9, 3.546233615617531*^9, 
  3.546233839664305*^9, 3.554125372057463*^9, 3.554126403502606*^9, 
  3.555266403832018*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"cs", "'"}], " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"D", "[", 
    RowBox[{"cs", ",", "\[Theta]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546017177523059*^9, 3.546017189050696*^9}, {
  3.546018219369372*^9, 3.546018251272656*^9}, {3.546137392518803*^9, 
  3.546137393253288*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{"0", ",", 
   RowBox[{
    RowBox[{"k", ">", "1"}], "&&", 
    RowBox[{"\[Alpha]", "<", 
     RowBox[{"k", "+", 
      RowBox[{"k", " ", "\[Alpha]"}]}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232329374177*^9, 3.546233619140492*^9, 
  3.546233841542044*^9, 3.554125372161416*^9, 3.554126403598872*^9, 
  3.555266403916176*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia", " ", "=", 
  RowBox[{"FullSimplify", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"ss", "'"}], " ", "-", " ", 
       RowBox[{"cs", "'"}], "-", 
       RowBox[{"\[Alpha]", 
        RowBox[{"(", 
         RowBox[{"ss", "-", "cs"}], ")"}], 
        RowBox[{"(", 
         RowBox[{"cs", "-", "ss"}], ")"}]}]}], ")"}], "*", 
     RowBox[{"p", "^", 
      RowBox[{"(", 
       RowBox[{"1", "+", "\[Alpha]"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016927559429*^9, 3.546016927697169*^9}, {
   3.546017069821145*^9, 3.546017085073989*^9}, 3.546017230368702*^9, {
   3.546017453638702*^9, 3.546017454633499*^9}, {3.546017487540381*^9, 
   3.546017511750122*^9}, 3.546060275246113*^9, {3.546060594894228*^9, 
   3.546060607304117*^9}, {3.555266290535787*^9, 3.555266290760158*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"\[Alpha]", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", 
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                FractionBox[
                 RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], 
             ")"}]}]}], ")"}], "2"]}], "-", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"k", " ", 
           SuperscriptBox[
            RowBox[{"(", 
             FractionBox[
              RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]}], 
         ")"}]}]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"-", 
          SuperscriptBox[
           RowBox[{"(", 
            FractionBox[
             RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", 
        "k", " ", 
        SuperscriptBox["\[Lambda]", 
         RowBox[{"-", "k"}]], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"x", "-", "\[Mu]"}], ")"}], 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}]]}], ")"}], 
      RowBox[{"1", "+", "\[Alpha]"}]]}], 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], "2"]], ",", 
   RowBox[{
    RowBox[{"k", ">", "1"}], "&&", 
    RowBox[{"\[Alpha]", "<", 
     RowBox[{"k", "+", 
      RowBox[{"k", " ", "\[Alpha]"}]}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232363544007*^9, 3.546233625680107*^9, 
  3.546233846478155*^9, 3.554125375123291*^9, 3.554126406811117*^9, 
  3.555266407809738*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia1", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"Ia", "/.", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"x", "-", "\[Mu]"}], ")"}], "\[Rule]", 
      RowBox[{"y", "*", "\[Lambda]"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546016832069324*^9, 3.54601683491256*^9}, {
  3.546016912126374*^9, 3.546016916727737*^9}, {3.546017322178493*^9, 
  3.546017372508301*^9}, {3.546017463020216*^9, 3.54601752428375*^9}, {
  3.546232394685446*^9, 3.546232395694052*^9}, {3.554125779646662*^9, 
  3.554125791680512*^9}, {3.555266293920944*^9, 3.555266294159062*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}], ")"}]}], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"k", " ", 
           SuperscriptBox["y", "k"]}]}], ")"}]}], "+", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", 
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox["y", "k"]}], ")"}]}]}], ")"}], "2"], " ", 
        "\[Alpha]"}]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", 
           SuperscriptBox["y", "k"]}]], " ", "k", " ", 
         SuperscriptBox["y", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}]]}], "\[Lambda]"], ")"}], 
      RowBox[{"1", "+", "\[Alpha]"}]]}], 
    RowBox[{
     SuperscriptBox["y", "2"], " ", 
     SuperscriptBox["\[Lambda]", "2"]}]], ",", 
   RowBox[{
    RowBox[{"k", ">", "1"}], "&&", 
    RowBox[{"\[Alpha]", "<", 
     RowBox[{"k", "+", 
      RowBox[{"k", " ", "\[Alpha]"}]}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{{3.546232392215838*^9, 3.546232413442848*^9}, 
   3.546233631780497*^9, 3.546233853890843*^9, 3.554125376751765*^9, 
   3.554126408427743*^9, 3.555266409689015*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia2", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Ia1", "*", "\[Lambda]"}], "/.", 
     RowBox[{"y", "\[Rule]", " ", 
      RowBox[{"t", "^", 
       RowBox[{"(", 
        RowBox[{"1", "/", "k"}], ")"}]}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232427015182*^9, 3.546232435156028*^9}, {
  3.554125783733777*^9, 3.554125789018718*^9}, {3.55526629703335*^9, 
  3.555266297212229*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox["t", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"3", "+", "\[Alpha]"}], "k"]}]], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", "t"}]], " ", "k", " ", "t"}], ")"}], 
     RowBox[{"1", "+", "\[Alpha]"}]], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"-", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}], ")"}]}], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"k", " ", "t"}]}], ")"}]}], "+", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"k", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", "1"}], "+", "t"}], ")"}]}]}], ")"}], "2"], " ", 
       "\[Alpha]"}]}], ")"}], " ", 
    SuperscriptBox["\[Lambda]", 
     RowBox[{
      RowBox[{"-", "2"}], "-", "\[Alpha]"}]]}], ",", 
   RowBox[{
    RowBox[{"k", ">", "1"}], "&&", 
    RowBox[{"\[Alpha]", "<", 
     RowBox[{"k", "+", 
      RowBox[{"k", " ", "\[Alpha]"}]}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232478566571*^9, 3.546233638036752*^9, 
  3.546233857654396*^9, 3.554125378955357*^9, 3.554126410591141*^9, 
  3.555266413809737*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia3", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Ia2", "/", "k"}], "*", 
     RowBox[{"t", "^", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "k"}], ")"}], "/", "k"}], ")"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.54623247327657*^9, 3.546232478732023*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"-", "t"}]], " ", 
     SuperscriptBox["t", 
      RowBox[{"-", 
       FractionBox[
        RowBox[{"2", "+", "\[Alpha]"}], "k"]}]], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}], ")"}]}], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"k", " ", "t"}]}], ")"}]}], "+", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", 
           RowBox[{"k", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "t"}], ")"}]}]}], ")"}], "2"], " ", 
        "\[Alpha]"}]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"-", "t"}]], " ", "k", " ", "t"}], "\[Lambda]"], ")"}], 
      "\[Alpha]"]}], 
    SuperscriptBox["\[Lambda]", "2"]], ",", 
   RowBox[{
    RowBox[{"k", ">", "1"}], "&&", 
    RowBox[{"\[Alpha]", "<", 
     RowBox[{"k", "+", 
      RowBox[{"k", " ", "\[Alpha]"}]}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232498458661*^9, 3.546233646492959*^9, 
  3.546233865780492*^9, 3.554125380853339*^9, 3.554126412317779*^9, 
  3.555266414852165*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Ia4", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"Integrate", "[", 
     RowBox[{"Ia3", ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "0", ",", "\[Infinity]"}], "}"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546017553376211*^9, 3.546017578186591*^9}, {
  3.546060190028669*^9, 3.546060215541151*^9}, {3.546232494373554*^9, 
  3.546232519267088*^9}, {3.55526630482555*^9, 3.555266305011644*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"-", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}], ")"}]}], " ", 
    SuperscriptBox["k", "\[Alpha]"], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
     FractionBox[
      RowBox[{"2", "+", "\[Alpha]", "-", 
       RowBox[{"k", " ", 
        RowBox[{"(", 
         RowBox[{"3", "+", "\[Alpha]"}], ")"}]}]}], "k"]], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", "k", "+", 
      RowBox[{"k", " ", "\[Alpha]"}]}], ")"}], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      FractionBox["1", "\[Lambda]"], ")"}], 
     RowBox[{"2", "+", "\[Alpha]"}]], " ", 
    RowBox[{"Gamma", "[", 
     FractionBox[
      RowBox[{
       RowBox[{"-", "2"}], "+", "k", "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], "k"], 
     "]"}]}], ",", 
   RowBox[{
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}], ">", 
    RowBox[{"2", "+", "\[Alpha]"}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232723877207*^9, 3.546233680133625*^9, 
  3.546233880705698*^9, 3.554125390795675*^9, 3.554126422260917*^9, 
  3.555266425235761*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IFb", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"-", 
      RowBox[{"Ia4", "^", 
       RowBox[{"(", 
        RowBox[{"-", "1"}], ")"}]}]}], " ", "*", " ", 
     RowBox[{"(", 
      RowBox[{"p", "^", "\[Alpha]"}], ")"}], "*", 
     RowBox[{"(", 
      RowBox[{"ss", "-", "cs"}], ")"}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546018347393014*^9, 3.546018403066614*^9}, {
   3.546018436099692*^9, 3.546018441274599*^9}, 3.546019614310392*^9, {
   3.546019656617135*^9, 3.546019704529838*^9}, {3.546057935083661*^9, 
   3.546057940051575*^9}, {3.546060690488888*^9, 3.546060692698881*^9}, {
   3.546136907926816*^9, 3.54613692580183*^9}, {3.546232739391533*^9, 
   3.546232740164084*^9}, 3.554125795760592*^9, {3.555266308068176*^9, 
   3.555266308225182*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
      FractionBox[
       RowBox[{
        RowBox[{"-", "2"}], "-", "\[Alpha]", "+", 
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"3", "+", "\[Alpha]"}], ")"}]}]}], "k"]], " ", 
     SuperscriptBox["\[Lambda]", "2"], " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"k", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          SuperscriptBox[
           RowBox[{"(", 
            FractionBox[
             RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}], 
         ")"}]}]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"-", 
          SuperscriptBox[
           RowBox[{"(", 
            FractionBox[
             RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], "k"]}]], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          FractionBox[
           RowBox[{"x", "-", "\[Mu]"}], "\[Lambda]"], ")"}], 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}]]}], ")"}], "\[Alpha]"]}], 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k", "+", 
       RowBox[{"k", " ", "\[Alpha]"}]}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], " ", 
     RowBox[{"Gamma", "[", 
      FractionBox[
       RowBox[{
        RowBox[{"-", "2"}], "+", "k", "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], "k"], 
      "]"}]}]], ",", 
   RowBox[{
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}], ">", 
    RowBox[{"2", "+", "\[Alpha]"}]}]}], "]"}]], "Output",
 CellChangeTimes->{3.546232757750575*^9, 3.546233688982581*^9, 
  3.546233886496002*^9, 3.554125393983497*^9, 3.554126425204463*^9, 
  3.555266428102087*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IF1b", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{"IFb", "/.", 
    RowBox[{"\[Lambda]", "\[Rule]", "1"}]}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.546017428290329*^9, {3.546018467395976*^9, 3.546018491191415*^9}, {
   3.546018587031472*^9, 3.546018597806486*^9}, 3.546157241026402*^9, {
   3.54623389091695*^9, 3.546233914238473*^9}, {3.554125799167905*^9, 
   3.554125800628412*^9}, {3.554127083862557*^9, 3.554127096547584*^9}}],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
      FractionBox[
       RowBox[{
        RowBox[{"-", "2"}], "-", "\[Alpha]", "+", 
        RowBox[{"k", " ", 
         RowBox[{"(", 
          RowBox[{"3", "+", "\[Alpha]"}], ")"}]}]}], "k"]], " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"k", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{"x", "-", "\[Mu]"}], ")"}], "k"]}], ")"}]}]}], ")"}], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"-", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{"x", "-", "\[Mu]"}], ")"}], "k"]}]], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"x", "-", "\[Mu]"}], ")"}], 
         RowBox[{
          RowBox[{"-", "1"}], "+", "k"}]]}], ")"}], "\[Alpha]"]}], 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "k", "+", 
       RowBox[{"k", " ", "\[Alpha]"}]}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{"x", "-", "\[Mu]"}], ")"}], " ", 
     RowBox[{"Gamma", "[", 
      FractionBox[
       RowBox[{
        RowBox[{"-", "2"}], "+", "k", "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "k"}], ")"}], " ", "\[Alpha]"}]}], "k"], 
      "]"}]}]], ",", 
   RowBox[{
    RowBox[{"k", "+", 
     RowBox[{"k", " ", "\[Alpha]"}]}], ">", 
    RowBox[{"2", "+", "\[Alpha]"}]}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.546232774650792*^9, 3.546233699094437*^9, {3.546233894146207*^9, 
   3.546233916241534*^9}, 3.554125395189885*^9, 3.554126426376208*^9, {
   3.554127088333095*^9, 3.554127097942642*^9}, 3.555266429538438*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IF2b", " ", "=", " ", 
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{"IF1b", "/.", 
     RowBox[{"k", "\[Rule]", "2"}]}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"k", ">", "0"}], ",", 
      RowBox[{"t", ">", "0"}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{"\[Alpha]", ">", "0"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.546232789850054*^9, 3.546232814587751*^9}, {
   3.546232870367111*^9, 3.546232891695176*^9}, 3.546233703305696*^9, {
   3.54623393071251*^9, 3.546233930927549*^9}, {3.546234024310321*^9, 
   3.546234025513919*^9}, {3.554125802167871*^9, 3.554125812404414*^9}, {
   3.554126639642228*^9, 3.554126651141911*^9}, {3.554126780892053*^9, 
   3.55412678102218*^9}, {3.554126967786063*^9, 3.554126990908704*^9}, {
   3.554127052594279*^9, 3.554127101904885*^9}, 3.554140427746951*^9, {
   3.554143217057125*^9, 3.554143249698236*^9}, {3.555266619140339*^9, 
   3.555266620903616*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
    RowBox[{"2", "+", 
     FractionBox["\[Alpha]", "2"]}]], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     RowBox[{"2", " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"x", "-", "\[Mu]"}], ")"}], "2"]}]}], ")"}], " ", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"-", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"x", "-", "\[Mu]"}], ")"}], "2"]}]], " ", 
      RowBox[{"(", 
       RowBox[{"x", "-", "\[Mu]"}], ")"}]}], ")"}], "\[Alpha]"]}], 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"1", "+", 
     RowBox[{"2", " ", "\[Alpha]"}]}], ")"}], " ", 
   RowBox[{"(", 
    RowBox[{"x", "-", "\[Mu]"}], ")"}], " ", 
   RowBox[{"Gamma", "[", 
    FractionBox["\[Alpha]", "2"], "]"}]}]]], "Output",
 CellChangeTimes->{
  3.546233010925664*^9, 3.546233716615459*^9, 3.546233933348742*^9, 
   3.546234026816667*^9, 3.554125396010735*^9, 3.554126426578324*^9, {
   3.55412664162295*^9, 3.554126652847976*^9}, 3.554126784371428*^9, {
   3.554126971368585*^9, 3.55412699240759*^9}, 3.554127091847067*^9, 
   3.554140428514259*^9, {3.554143221144051*^9, 3.554143250118409*^9}, 
   3.555266430508938*^9, 3.555266622778609*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"IFun", " ", "=", " ", 
   RowBox[{"Function", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Mu]", ",", "\[Alpha]"}], "}"}], " ", ",", 
     FractionBox[
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", "\[Alpha]"}], ")"}], 
        RowBox[{"2", "+", 
         FractionBox["\[Alpha]", "2"]}]], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         RowBox[{"2", " ", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{"x", "-", "\[Mu]"}], ")"}], "2"]}]}], ")"}], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          SuperscriptBox["\[ExponentialE]", 
           RowBox[{"-", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"x", "-", "\[Mu]"}], ")"}], "2"]}]], " ", 
          RowBox[{"(", 
           RowBox[{"x", "-", "\[Mu]"}], ")"}]}], ")"}], "\[Alpha]"]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "\[Alpha]"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"x", "-", "\[Mu]"}], ")"}], " ", 
       RowBox[{"Gamma", "[", 
        FractionBox["\[Alpha]", "2"], "]"}]}]]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.54608073954952*^9, 3.546080787340927*^9}, {
   3.546080827508503*^9, 3.546080832763547*^9}, {3.546080881724667*^9, 
   3.54608089839569*^9}, {3.546136031913543*^9, 3.546136106756538*^9}, {
   3.546136264957334*^9, 3.546136269166274*^9}, {3.546136300237964*^9, 
   3.546136302873075*^9}, 3.546136404353272*^9, {3.546136877306471*^9, 
   3.546136878124014*^9}, {3.546136974390393*^9, 3.546136995325726*^9}, {
   3.546137115334749*^9, 3.546137121892679*^9}, {3.546233026432763*^9, 
   3.546233039064002*^9}, {3.546233731274747*^9, 3.546233735724144*^9}, {
   3.546233948572817*^9, 3.546233952794951*^9}, 3.546234044136561*^9}],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<PlotLegends`\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.546078399638204*^9, 3.546078434270568*^9}, {
  3.546078523483738*^9, 3.546078526611331*^9}, {3.546078631725602*^9, 
  3.546078677869414*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"IFun", "[", 
      RowBox[{"0", ",", "0.05"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"0", ",", "0.1"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"0", ",", "0.3"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"0", ",", "0.5"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"0", ",", "1"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"IFun", "[", 
      RowBox[{"0", ",", "2"}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "6"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotLegend", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<\[Alpha] = 0.05\>\"", ",", "\"\<\[Alpha] = 0.1\>\"", ",", 
      "\"\<\[Alpha] = 0.3\>\"", ",", "\"\<\[Alpha] = 0.5\>\"", ",", 
      "\"\<\[Alpha] = 1\>\"", ",", "\"\<\[Alpha] = 2\>\""}], "}"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"LegendPosition", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"-", "0.4"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Dashed", ",", " ", "Thick", ",", "Thin", ",", " ", "Dotted", ",", " ", 
      "Yellow", ",", " ", "Blue"}], "}"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.546071566443362*^9, 3.546071604772914*^9}, {
   3.546071664304524*^9, 3.546071734557583*^9}, {3.546071769565434*^9, 
   3.546071781503191*^9}, {3.546077877666447*^9, 3.546077878779971*^9}, {
   3.546078077257591*^9, 3.546078094273397*^9}, {3.546078128979278*^9, 
   3.546078131508565*^9}, {3.546078195525481*^9, 3.546078246143438*^9}, {
   3.54607831567725*^9, 3.546078368785814*^9}, {3.546078441904356*^9, 
   3.546078501052553*^9}, 3.546078697301196*^9, {3.546078795298968*^9, 
   3.546078819926423*^9}, {3.546078851304196*^9, 3.54607891370029*^9}, {
   3.546079894604615*^9, 3.546079946211399*^9}, {3.546136122778719*^9, 
   3.546136164810206*^9}, 3.546136449027762*^9, 3.54623312566578*^9, {
   3.54623315837957*^9, 3.546233172933139*^9}, {3.546233958904524*^9, 
   3.54623396333546*^9}}],

Cell[BoxData[
 GraphicsBox[{InsetBox[
    GraphicsBox[{{}, {}, 
      {Hue[0.67, 0.6, 0.6], Dashing[{Small, Small}], LineBox[CompressedData["
1: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
Y4iqZVDUcDY8tm7++fcvG23bkupc+rPh/zLMdJo=
        "]]}, 
      {Hue[0.9060679774997897, 0.6, 0.6], Thickness[Large], 
       LineBox[CompressedData["
1:eJwV1nk4Vd0XB/DLvRdJpnCJNJKShCIqa1VCpdBAUZRZvPErZAz1UsboGkqG
UpJGZJ7OPUWEEhkSKlMviswy/05/3efz3Oc85+y19/quvcbK5agtN41GU+Ci
0f7+riprlOgvewd17n7uOxreEXJzsgfKat9B9OzHPyvevCPWmjmb+RpWw81R
29qPGu8IGQlevz/HayAks8otZUsVsaLieZBpXA0o0mS1hocqCSm345F5LTUw
quF4RjuzkpBouJ/iZlYL07s91Qq2VxLCkbteD1u+h/AlFpNuh94STJ6LvP3n
6+B6e2bvkaRyou+Av9BYeh1oS8bFSV0oJ6ojwlnzPXVgfVfK2hPKicrQT+wb
yh/hwLTivd7uN0SY6NCDxIyPULfo1LZJ7Q0htnZdeXlSPfC+VQ5k9JMEs3xj
1YGSethTXkESJElM2m6t/fClHkYswlx7E0jic8buxs+sBshSODxmf4QkklRO
9vyKboCtcwftlhdxCPk9EQzx4E9wRaX76JgOQbC62XwJDz+B9dULu7i4CYIv
KEFg1ZtPcEk/yek5UUYMVKWLbaQ1wnG/voymXWXES6PX63d7N0JdqHOkjHYp
sePslI7thSYYqNOWcDIrJg74nwvKNWmBgoPhhdU/8wnVm6TufbcWeC/l/OV4
YT4hk7KGL+JWC8it1BHRup5PDJd1htp8aAFR2u/bwuvzibiFc1HLdT9DxMEs
k5pzeUSPn9Xd/21vhWc2fm/cfuUQAb7WWUpibXB8wPxYiEY2cT78zUUp1TZ4
nNGw64xgNnE8cd02phHl4Uclzr1ZxIaS7rz2sDZIZ7CSdsZkER9mrUvC6O3w
8r2RedB4JiHjY1PZP9oOdNuRUacrL4l8L9uOtPqvMB69d2R05AnxSNupZcXo
V5jN7ZpQffSEiKP/r/6m6DdIDRDVbzR7QnhE+FZ4HfsGO79Xn1evyCDU77Of
H276BrmOS0rMkh8T5j3fy7ydv4NLg8rQnnOPiC9LhW6ude0Euz6Vvj3rUolW
Myfli5e7QXa5a4/StxgitEvPOT64G0Y33hLlvxRDaJ1fn1ES2w3NS2e3IG8M
kejVsZY3pxuCd9pb5G9lE2dvG0okDnfDlI2zTtn1aOK/JrX5CsceaBkcbtwW
Fk5MGM1VS53uhTTzljr9EX9CRC/CjsT/YF+3scoO9Qsg3GibrWH+E0Q2DTPJ
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
JximbmJgrVBV1AvKOSeqTZ9uYWDy4Zl//v7f9++MZY4qAzcf26b293mZnE0O
peoMdJRf2fmQsnG3metbLQZOzJh7JlEOFg3zrNOm1qdye5pNuWhPccDnvQzk
N/OyvUF5yPXnjU5dBvIqp5d4U157Tzp64CADp++8WzxP2aTu0J2xIwz8lXlD
+RTlsAWf+3NHGdiUF26wnzJH6VkG05SBLtJXTJUpj59uzxI0Z+ByH6bx3/or
hAsUsSwZ+CC5RnOe2p/Txbter7ZmoJmPl+jf/YoacK7eaM/AAtWCtr/7WSGV
1KDqxMAToipxqZRn9N9/2enCwLfsiL0BlLd4znfpXGKgx+nLneaU45rPjJn4
MDBdLWFagHI1M3LW0p+BS+w3uHVR529xWxnd8RoDJRUHunMpO7BlxXzCGNgQ
WpRmQlnT6Nu2lLsM5IhoVPhT57ukjzlolcJAer3wgj5l7cDNafIPGBhvHOom
TFkn20v8xRMG5r0MlUmg+ueImNhkSSEDC335HW5T/ffxmdaLgFIGptIVk45R
Prb/nJ0OSX1v9kGxZX/71+NFc00VA6sjCqu9qf62+qyf/6WFgafkiuz3UP3f
4+riktxGrWdWo2SIygf7JXEbrL4x0F5OxjSBsrNWd3z/DwaqGRy2+jVMgkei
n+efCar+jg0dPlTehJ3N1pQQY+LxaxW9+lR+CU5/HmllMTEod3v3FyrfoqIX
M5KkmagpPKLsRDnutcEKuXVMlHMJLgym8vDe+v9m1FSZ+OHk18QMKj9z+qRL
jI2Y6CiotjalhwT1wL1u4seZ+PlBsakE5UIpx82tpkyUrovqDeum5sXBvMSz
lkz04rIVuNhFQtUzIz+XC0xcah0ft4nK8w7XIO2IcCYKtETKHKbmAY3DWZka
xcTLTJUjiV+ovBOam8uLYWKE6vXb/a0knH9+sfh7IhNj1HZ6X/lMwp9+yx3b
njPRibYzOLqJ6k9rLdW290wsVmqwOUPNJ/Vsd5HheiYqRd72iqTm2SmurGFG
MxMbOj5ml76n1pey4eWWr0wM3BsWK1FLglK72OarQ0zc+ql1a3YVCfonfstt
FOJBwZhWm2iSBKeHm5jay3nQMjxOKo1DQuSYbc9RFg9+NXuwkEfNz6bo9lTf
VTx4Wujx6aZSaj8/vFv1UZkH23fs95srJMFP76HUZSMe1HS1+zNOzedszVPL
KqJ5MIMnXjLmHrXe0dDEmFgefHt1e8VV6j4Q+6RE0eYODzobRYy6UPcFT+nV
B+n3eXAZrbN+fyJ1Hud/BO/J5MGPjrY53+JJqOG40co+8ODz7AB2bSR1fvSi
xvKW8uKN/4xFb/qQIGFS2fo4iBdHNG8xvxhR+bXrIdqG8GKiz+kRN0MSLq8N
TF8TwYs2OVvYgkdI+Dyk5Z4Qw4v2IYdmdx+i5uX1F8LhD3jRSUrgQsR+6j5V
GKvnQvKi+Pshq9+a1HyRscndPs+LUfVTuW/WUPe7Llr0azc+3PxG4lLdIAfu
SDgsk/dcgr07sm9V/sOBq8mO17ef50dFp23RqjUEJH24/TbSdSmu+XVv1imo
DPwusIdXXhTAqafSDTabS+HnOQXJU1bLMGzbi1xGazGEzQ8wvtoJYkyPNDlq
VgRFv/R+C5oJodxnvq2RgwXQLLejS2u9MCoK/qey5Fo+OGy0VmanCaPNxdqh
qj+5QJqY++yRFcF3H6U/e4XlgNrJgQyx+yIoJrdlKI75Cpyv6bbslhbFLSo2
jQv3s+CGHd8MF1sUC7sDHfwNM6F05bnFAbHl6JBfM+PY9hwKF4LpmyKX4/uT
8/n7rJ/Ch1f7BiJExLCXMPEiWx5DxWq7t+G3xJDPbfKguO8j+Df/xP1OfnFc
K9/FPnT+IZxe225hHiGOQlUKX4aMUmE2T1lakVcCJ4XqE/dduQe+9P7a2CsS
uFV9bkvRkySQWK95To7GwvVVKac8TibA5Qsm4/xeLNxQntodGxAPMuo2VfI+
LFS7uaDi6hYPnPn/Je71Y+E+X5E9hg7xwB8RoeMdyMJNwsxkaaN4SH5aHtMf
wkLtI0k7B1fFw9s+1e1VCSyUUruhd4kTB2LWQh5BJSz0UaXHMphxULhp5cH7
ZSz8pQzG7tOxYDG6SbaUw0IvH/vsgcFYeByo+3a8nIXrDny37G6OhZ33/CRs
3rOwv2nZEYGMWLDq+Jm39ysLV4Wxn+w8Egu8adOhFt9Z6H5IRX9ybyw8c+a1
9O5i4T/hQr65GrEwObuWN/sHC02b6lP3rImF0BVmpmt+s1DHXqUhajwGlLvs
FXePsND/dAKva38MNGa4L54cY+FBc07Nsa8xIKsZnR41Rb1f2GtOoSoG3tBS
fJ5NszDBQ85+RWkMOFQ9M6yaZSGh8/q0cHYMCEQVreuZZ+FtdfN2/vQYyDKt
mlpcZGF43GzPksQY+D9Lv/Kr
        "]]}, 
      {Hue[0.14213595499957954`, 0.6, 0.6], Thickness[Tiny], 
       LineBox[CompressedData["
1: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

        "]]}, 
      {Hue[0.37820393249936934`, 0.6, 0.6], Dashing[{0, Small}], 
       LineBox[CompressedData["
1:eJwVl3c81d8fx+097r6UUUIhLVTC530yKiOjJMkoSrKKUmigjISQEZGIkhDZ
SWRlZd5bSchXkpl9r+13f/98Pp/n43E+55zX6/0+533OVvsrJy5ysLGxabEe
/3+fYfdjk740AO1ed7wOdjVV/bBy2e158zf85HAfjDxdVvVw8Kjrk+Df8GUv
WdDqZ2nVIWfZrIq431DclGNwxa60KtmnT4a36De0Wphl+zqVVJ1LMKEkT/+G
V3uULhLuFlX9/aqyVn95CB50l71UKc2vWjBdbRa3/gPnRbjLk6pfVOGPRjhW
o79gRB6/NlgdDbpZFaBk9heY8edjUsJjwFtwQizu/F/4aLGWz2kRBwPtBi1O
9/7C563teY1DCZBvybcHV/cXhmb5eDVnn4Op8/0l26Mj8GNNpPvs8CuIivAJ
Xz0+CtjuRLXv0gVQN/X6oqPtKGiKcq7XhhTAolk31uE+Ct92DetZTRXAOcqB
mfTIUUhTDVG7/7EQ9jyfP2XYOQozkRUV9aeKoSP/ivRT8zHwreF4xXOjDHD0
iwUHzo7DeTH319pelYAmD4+Zu4yDXqzDYkpHJVzlkZLxvDUOtmc7OTOVqqDz
4LfonKRxkLPqUC0fqILHz454bO0dB+ZzV+Ub6Z+AfGn7HkGbCThHyvH6yF4D
m5ZHcvttJ4G2ZvcoKqUODIj1f1bcJwH/bzRl4XMd+O5MkxT3mwR0wVp/z1Qd
/LQ9E3Hy+SRwi1g6yUM9JNc2uTb+mgRc0fR7cl89SEW8USo49w/+Jiwbs+Eb
YNsW16wg+yl4UOWuxHumCcL7t6ZFeExBr+OrkTqfJmAkf0+I85+CikyRdpun
TdAorvPgZcoUnBg2kdr6swlciZsu1fdMgXWq1MqkVTOc5bzw+J7CNPCeT4l7
cbIFXjLwpjVp0/DzScv3hwqt0PN1wvBI1jQcvM+ML9BrBZHihqPN+dPw6t72
/uLzreB97Q50VU1DvbgIxSSxFQymR3YN9k1D92nJ7C88bfBvtEqYY9MMnGz+
m73Y0wYH+9xaDj+eAVnhUlNJ1Q54q+BJdno6A9Y2jrKTqANkb9ywe/RiBniu
5c5mHu8AnKjfXE/BDPxlaEf3O3bAKIrafJ02A/vcM8+YJnTA04wCl1ekWdiX
72tvwGS1nykp/iIxC8bWgzJfODohWOvDxqzsLDzJ61RWF+kEz2+1MaA2C/+O
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
RaMYr/Uby0DsfzMvqoE=
        "]]}, 
      {RGBColor[1, 1, 0], LineBox[CompressedData["
1:eJwBEQLu/SFib1JlAgAAACAAAAACAAAAeEXhM55M4z/PdX11ONLJv9laay9y
d+M/Z9PLcPJwyL+K4kdsl4bjP+yzaM2g9se/OmokqbyV4z+mLCWQdXzHv5x5
3SIHtOM/d18zWZWIxr9gmE8WnPDjP3GMvUXDosS/59Uz/cVp5D9NcQY/gN/A
v/VQ/MoZXOU/tUajuh//sr8RR41mwUDnP33BUf6/AaI/RKm8PytR5z9O2QeE
hNKjP3gL7BiVYec/YRRs5M6hpT/gz0rLaILnP5oDEm/qO6k/sFgIMBDE5z8T
IrpG+S6wP1Bqg/leR+g/bCLR0YQrtz+QjXmM/E3pPz4XoN0pQ8I/xO+oZWZe
6T/5XLpNWKrCP/hR2D7Qbuk/B1ZdixURwz9gFjfxo4/pPyCWWYE63cM/MJ/0
VUvR6T8HP10uIXDFP9Cwbx+aVOo/b4VMX/1/yD8Q1GWyN1vrPxovCNYhRc4/
QO1B6lRr6z8fyIuNvZvOP3AGHiJye+s/0ikaKuDxzj/RONaRrJvrP0mv0vu4
nM8/kp1GcSHc6z+5xTTaWHbQPxVnJzALXew/SHj938S60T8a+uit3l7tP/Nv
Glu4FNQ/ShPF5ftu7T/Dx1l/PjjUP3osoR0Zf+0/vGUcFYVb1D/bXlmNU5/t
PzhvcmNTodQ/nMPJbMjf7T+59/xU8ynVP7n2FQx4DO4//t7oYYSE1T+1/ggd

        "]], LineBox[CompressedData["
1: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
nEqUWTUvrK0xwO2IZ/WHxxTify3H+js=
        "]]}, 
      {RGBColor[0, 0, 1], 
       LineBox[{{1.2244897959183673`*^-7, -6.612244897958786*^-7}, {
        0.0018403075233577606`, -0.009937526002051543}, {
        0.0036804925977359294`, -0.01987358315902815}, {
        0.007360862746492267, -0.039740044836081734`}, {
        0.014721603044004942`, -0.07942776299600669}, {
        0.029443083639030292`, -0.15844204815362947`}, {
        0.037657223376417276`, -0.20172792183704621`}}], 
       LineBox[{{0.6577132781014055, -0.20172792183704621`}, {
        0.6674927677691175, -0.16102692739973995`}, {
        0.6693415787947472, -0.15338386553572964`}, {
        0.6711903898203768, -0.14575005345905034`}, {
        0.6748880118716363, -0.13051225170387187`}, {
        0.6822832559741552, -0.10017027668723452`}, {
        0.6970737441791929, -0.040132869149116686`}, {0.7266547205892683, 
        0.07650525319843415}, {0.728658318029638, 0.08420504997595588}, {
        0.7306619154700078, 0.09187640511258109}, {0.7346691103507474, 
        0.10713173296388026`}, {0.7426835001122267, 0.13727876566976022`}, {
        0.7587122796351853, 0.19601030491373372`}, {0.7907698386811024, 
        0.3064363174569967}, {0.7927734361214722, 0.3129983122112355}, {
        0.794777033561842, 0.31951820259689834`}, {0.7987842284425817, 
        0.3324303583949046}, {0.799982301254143, 0.33621320306291114`}}], 
       LineBox[CompressedData["
1:eJwVlnk8VO8Xx4fBjDHMjKwtkmyhskXG3PscS2glspWICiWSNVT2PVuWFMka
xVf2pUSUrbQQWqxJRcmSlN3P75/nvs7rnHvO/bw/z309zza7i8Zn2QkEQtP6
8v9nZOuTFWLlP7Q6OGYbEtKD6ocrE+I+/0M31kTe15R3oy8nn5Mpp+cR7wRH
Jf/FLlS1b0/JNqd5FFVwaYn9UBeK2HnPXMN9Hun6VASJ7uhCCivh9xyD59Ew
q5vy6Esn8ko/qNuaM4+CtOJrXh3vROS+Lv+Q0XmU8W4bwdboLdpp8fnv6tkF
xMmMCuSo6EDp/Gg12nkBmRrUkRb8OhDlVTqnqOcCarj7gUtNtwONaVkIqIQs
IPHar3mRPS9RrvwbJYfsBeT6bjomdekF2rhWd+HN4AKSHw2/bGnajrjupY7c
NV9E3wJMtuqiFuR56u+4gs0iMqnRvKpPb0GjG4/N1NovopgDgs43Pjejxjga
odtzEc3fNE9eDWlGV3zCtpCTFtGU71Knwpvn6PchDwvXt4toex8u9Nz1GRqc
NXwN+5fQB6OTb1q/P0Wxm95vdz26hNqjxA9p1z9FuI61z13LJaSmVNBLSX6K
7t64ILl6bgm1+Zwhhuo8RaeUIn0fRy2hhY7R7QoGDeiLS5O0WscS4gfTU73f
6lBSyv4rZ7uXkAW9r2z/nTqkW/+2M6l/CY2od34xPFaHcnmHrsxOLKEfcYTT
/M8fI/uipa4S3mV071KhlPWDR2hsXNVf3nAZGc16fPZPqEGpjLru4+bLaCA4
e1e3UQ0y0NCRi7JZRmPM45Ml9Bp0P+Joz9jFZSSXx8PLdqManZdxkb8Xv4wq
Jv5LHbtdhX6dyX8v3rWMyuNcb2k0V6DfQ6KKQqYr6P2NZTTrVYrET/9T3Xpy
BcV4fEkb0itFht+6NWTPrqBdDmt1GsKlqGgiTofpuYK0nl5MVa0tQfYLnObW
yStoNHv2kRJ7CfrE//vqvZ4VFCw+F3nG8D9ETnkT9HBgBWmIlSaZLBchddH/
wmu+rqCqbqNE8oMilLTVMeHF3Aqaae0VaCAVoSMKg7mTgqtoRu3Ot70dD1Dj
vhcv1cxWkWbNlXH1ywVoui3/LbJeRcqNh42+KxYgsUOhPQb2q+gJnLij/yMf
+RrD0HGvVURik30maJOPVG2qfl9LWUXfhL/aPje6hwouZ4u29q4iUzlJO0OT
XBRf6Otgbr6GxAybi3w7MtEJtn0dPdZrKHw7eZ9xeiaSNqcpHbNfQz0Gf5qz
LmSiOvbcRSPPNXRMQ+l1Ll8mGrN8FXMgcQ3xapQnapdkIEQWr8DerKELTfNz
JoR0RLH+IVLXu4b2vbWKki5OQ93lFVeZg2vojqzfwQ6rNHTeZr+++q/1+o8O
3lF1t9HBExrOqZwE0M5RncgKvYW8y+wIN7YTwJLtiUMb6yayGmhVPipDgPfx
gXc4/qUgbfLOs3T59biwOmmhNAVRrf+1xyoTYGzy8RWSXArK5r6eGK1FALN+
g/vhEsno9alK6VAbAjw29at7rpKIKqI3WuqeJkDAB1d6z/wNdKvKP5roQADB
HTKksPob6Az1wHSgCwFoNRLSzw/eQIvVg7XXrhLA3TKrKNI5AUnTyIcvpxHg
JN4zS7kdh4qmA+9F3CWA6iyP7J1dcUi5a2ktNYcA5o20as/nsQglT5XVFhLA
9SX/i4nZGGSx6b3I0mMCbP1EsU21vY6iZO6NXu1ff//erWBpz0hE5xbHY4cJ
QLQ2J2RvjkQpP27dzBglgFbIyB7l5giU81/MgYYJAvhcDVUPFY1AdSqeJYQV
AjiIVvTmvQ5Dk0j3SvAWNvA0y+6xdwxBHtvqexK3sUE2I+vx4NYQtMi+d3eu
FBskj+8sQx+CEalFfuT5Tjbo6rN/WHYwGIkf2mDAhbPBxcgeNWEsCBlbjGyI
tGaDJ/y97+r1A9AHDSvnW3ZsECd/SDWHGoCsN/W23LdngxUjOcXkXH/kNNju
88KFDaS3mEB5wzUUcqZ0iMefDcTDbO9cJl1FVa4BhbF32eBmgCw5+KMPino8
XWGZwwYSrbqr3AE+yIbLtl4yf71fJioqlPFB5HStzkfFbKDn+/ezsu9ldLyV
/d+3J2zgF5MvtizvjVa3hGqjfjYweegw+rPBA3U5zh2kDLNBiNGmjMdeHii/
/Kxpzxc2yHjx65/3Lg9ktF/P0eknGzzq15oqzHRH2R6k2JuLbKAUXkuuiXND
+15GfpwSYQcaa4i1K8UVbRRaHHm0mR0scJGUlOOuaPLU+YlQcXYIW/o28Wyr
K0r5e2Btkyw7FBbN/2uzuIjGtlGlDNTZYZNDlfdKujO6fjnWNdOUHdyDixqc
Hc+jU89WfZws2UE5Iuv9O9J5tIfvYrDaSXbYpxuvGlBwDg3mGKZ0nGEH3ltf
dNJ/OSLFN/S6eXd20GFcu+0d5oC6pRJJR2+wg1qJsmfU1Bm0X0Zkr3MKO4ji
ZfXb0s6getk7jpG32SF0A+voH/0z6L58fntjNjt4XE8rZeadRteUHkcrl7OD
gvOr+5+c7dCsMtQdqWaHWV7nXZ8k7JCjavPE+cfsYLliOPfngy0yUX9zOOcZ
OzzqDZByNrBFstgXmkA3O/iVkSMJqqfQHdwRFD+wQ1rWStzoiM36OfDL9VA/
O1y7FLzvuY0NWtH+1xkyyg49A6dfW9lYoy4DnqS5P+zQ7Cstr+Zpha4cUxF5
L0iErrcmUj/nLNCMaY3BrCgROv3VjYNiLJC9OeZDEyOCdPOtshJpC3T0uP4n
fWkiXBj651h30hxJnzqRXqNGhJYhB765AVOUZjvc0c0kguoO2doHgaaIfvrs
yjROBIbLO6EOaVO0dPai9Q59IrgNB1/EPI+ht07B4rfNiaCkOfjiiIQJ2udM
Plp1ggjaR06+7HlrjB65xAR22RAh8q2BQlaAMcq7dHOE4kiE41rp8b+/HEW+
3oW5fpeJcDvhbgVbrRGSDH4ne/IWEdK7/gltVT6MLMqISvZ3iLADOayMVR5C
1z+raFzMIgLlnt+xbM1DaA4l7Q+8T4QN4yd+tBw6iFqWj53PqyVCJTYwLhi6
Hy3Kh7oVPyECZ77l51Th/Wj3iUrf6kYiNAm3dHQXGqDUWsHo9nYibOo9/OPk
R310zqu38NdHIkz4e7znMtBDGXlcFX8HiOD62cgp+/s+1NWtVrf2mQj7SIkT
zRH7EFPlZgfjBxHCFLfUxLzRRdRp8197Folw7r+JR8EuOqj43Mdd1zZyQOvC
LyXbX4BGUrnVw8U4ID26+/N0NiDhNg0UL8EBObJmvyssAQVI3zbMluMA/Xsx
TnHJCB39cty1hckBLBGNuyqeGArjj778BueAd1YfldJ/s9AjrccBH7Q5QPuM
SqO0GwtJZG5K+HGAA6RP2T4O8NZEf6z6S/lOcMAdp3vP7W9rINnr1EfCNhzw
PeUEfUVGA1k9ZjWJn+aAax6mNK/qvahZ9E6XshMHLPZwJ/7uU0cpvSdnzfw4
wJ1n1ekQUw1pGA2p3k3jAGcOB+/reiqobozzl91dDvA7J/1x8I8ywgMV8qRz
OODhDF/O5VxlpFvmI1j8gANCj7caXSQpoyMCAn/ratf1bdvQ+a1PEb0tYhYH
POGAXOh8NJOoiEz22drrNnJAyeUCt62HFZGFV3HvyzYOSDhGMcoN3Y3sPhhU
f3rPAY5b3V8jr51o1PXixYw+DhAZ/ymT+k8BOXCnyNgNccC5u5uC//gqoAvM
LzfHv3HA9JHsqNvh8uv306uX5+c44HpIQeeL6h0o+lSZhpAAJyhmd1+LcJZG
fAsfZj4Kc0KdwsaXT3ikUXzC2v07mzih1z7+S3ihFEppOrRRajsnSK3FzzRO
SaJMye+LKsqcMKX4KlU6ajuSeMJb/m8PJ3hfwuqPq25HeaaqTo81OGHomWPX
nyEJ9CAssE9bixN2Gd8a1dWUQBVjm+qOGnHC31fZXQ1s25BaoLaH4DFOuLTT
nxBbJY5qRc8pfDTnhObsW8apF8RR/YGq9FM2nHA943tLWs1W1FZkdPWiCycI
7d6i7pq4BQ24huIx1znhalvyknqpKCI8fbolO54TUgnju91URZEkbXm5KokT
xBlfw37ViqDz/7k9Hk7nhDfB8zYBL4XR/LjNXtX/OGFZ9/djKlkIbdJIE95f
yglfrf981k0XRHhE79+TlZzg/8Um111ZEIVKH64Mf7KuN6M38MYZAcR/mqnc
92pdzxOZ7z8H+ZFamSdjupMTQkd91ScD+ZElW+k0Ry8nlHy2/i9Pmh9l3pV5
uGuQE7j5pJoFPRloZ7+AQtAkJ+ynOCXvlKIjA9MpqR00LtAhynqfS+VBTrly
nPgGLqCYtO325uNBsbNnR42FuUDzwLYG4XAK6knoz76ylQskLIdnRvy5kd3r
9q1vd3PBH+MQXYdYEgrbwrk2qsIFvUFXfrwRJqH7F2BwQZ0LvtJ/n3XP4ULT
lOr07cAFG6FLT7uRE13VzxX1NuIC9RUVwi9BDpSZMjQffYwLxqia9iIlRPT8
68YPmRZckBtxvFHpEBFRQhJSXpzigmK5V+OUKHaU+vTaBrFL6/XuTHOHTWyo
TMOStzmBC6ixQ5HBm1Zwyd9R6UnJXBBxIbC/Jm4ZT35QJ3/mFhd8LBW3u8S1
jF/eJH6AmMUF5/Ywd8PSIo6vfAvTKuGCUNKLx/JsC3hJpYgQo4IL7v7K2G8U
MY9vczmQN1zNBXZv17pzGfM4x9B/z/wb1vNBHy5Uy/3DXz71INS/5oI1h1by
Nc85nOVzLy6miwuGBkvaNvPO4cVKH8RO9nJBiwHzeva9P/iNbE1seYALUqrq
HbSGZnGLEHZf5q91Ps9eio2d/Y2P6sfPVvGQIFq+hrA/ZAo3IzQFhdFIEGgX
I0wdn8Rba2YZZhtIIHI44sp/RpP4gx3minMbSXDTKi7ZXPYX7soj5qwiR4KX
SKvy578f+Mgzw2X2XSTo/pdvre32Aze5EhjdpUSCeuNzCYJT47jar9H7lzRI
QP37LYBjegxfeV347aEBCQLKLsW84/2Ou4QPePofIsEesXHp/tvf8GFE4zQ0
IgHpwPw0j9w3/HmJ2/ZJcxKEObQ31x75ikfd0Dil4ECCh3czfXVLvuBCZq0f
C0JJYD2TJXWgYxjXY+XC2UgSNFOgU9JnGPeWCMzfFkOCDddqEqJlhvEPk0zP
20kkqC7+e66JMYSnhRfTr+eszxfE/xuo7cc7nKO9DfJJcMKkV7NXrh9fNnEc
5CgkQdFSVuiVjD7cWlyi6GoZCRzeMw2yYj7h4rXJ+hcbSZA96UMlRH3Aje66
Fcs3kyBDANxFaR/wwFBDwbE2Ephqu78PTnmPjxzl/nLqLQnEO7J+iBf14nk/
rlwzHiLB456a/BMz3bjc5jOVe1ZIcIjJccOmrxM/zq61+TeBDEYqh1ZGAzrx
6LEtwcUcZKAqDV+RlO3EJyreG8lQydAdZ+5d6vcWf3j44ITIJjLoLhtVGV94
jQ+ryJr0iJFhv8TWdoPOVzh9I+ejBAkyKJ42FdXQeIW7fasPp8iRwdbP1/0t
owNX9VfevryXDPkl6k9sRtvxs2dpUTUsMlwLvXu30KYdTzk4Me0BZIDoX/Ph
A234P+F79b/0yRAmMxLcONyKPyoRPT5kRoZioU6+aWILjkYICU0eZDD8SPqR
W96E0/1/i729TIbSyw7t8Qea8JFNo0UDV8hwwiOGWv2lEQ8xbW2bDyFD5dNf
TiGbG/EXbTGE3cnr+r+Z3u453ICnn/WPZd0iQ5S4Qstwej3uzH5p84E7ZODc
fupl2dQTnM46tvdsHhnOPWo9YpVZh5s93OiaVkkGadivVCr/CJc9RF0tqCUD
ea1hf39KLb4wthJd9YQMFWvMjxqctXi6xOf8zmYymLy/8sfgZzX+OTl/iNRL
hsS84oqZT5X4hSuqhh5/1/WMEJv0NMtwXFR6IHBxPW9VtmLZVYrTqoSd4lbJ
UFek8qDSqRQvm1oMe8DFDYlF78IF80rwf3aN9cNC3HD9Z2y0tV0x3rZWdmhy
Ize07Ms8frnsP/x2eu6nJTFuCOO8J32B6z+c1Rv+V0iGG/b9Tn8TW1uIB+0/
suuwOjd0J80bJx64jx/7huqOa3IDS6Lo66HqAlwqWOmAI+KGewubVffJFOBt
dQL2wfrcYCr6rqyQno/zKfbdqTXnhunNOt3epDx8uKNDvvUENxA3Dmkdup6L
l56rr+224Yah0tn2vg25+LGcrJ4pB25IietImZbLwW8JOfJKX+aGvQdf89p6
Z+E1m40OTvpxg9SbnWr7hbPwDxJ7I6v8uUFl8GG/Um0mLrKbzKkfzg0F1KOJ
feyZeIp+wbJDCje4v9p3Yt7iDl51OJ6peJsbnn2PrcytSsd7TS5fnr/DDZ4s
peZq4XRc8JTBn4g8bpgau9H58sttPOny2M/7FdxwcNf5be+yUvGKa293uNVw
w9H0m3KfRFLxdyE1Dsw6bnDOO7zx+Y2bOH9CxJcXz9b1F2U94YhLwRPuy/b9
7OIGEdN/z/Pyk/DYT44vds5ww6/Foo7Swwl48bAR+e+fdR6f58U9JuLxV9/2
6tXPc0MerfGvQUw8Tp0lNx0hUMDVYZvyyv04PJrnfu1FGgWSz/ilj/+9jj9g
JPxT30CB1cObbfabXMdfCPvsIQhTwG0z7aVceTROkdxfGi9GAWRKuyJ7NQqP
YI0XlO6kwKK/3MvNeyPwAu3Obz5KFIgomC1MKg7HWw1qJbX3UEB3cTdOlA3H
uUwjM7tYFDB3MbwYuj0MD3XekTp7kAKf7JJNvTRD8Fx3Ru9jQwoEH9nRtNAa
jD/3WdgQYkKBwQdWLStmwThHWHucwAkKGO/N4DW+EoQHZZwL33OeAluq/T89
GwnAtU/YTxxxoYB1W5tuv08AThQ5fdTRjQJjdg5aLhsC8JAEq01pvuv5qyGp
UWnX8LAQw4eEaArMmnac9nvsh+tpHRLYGEcBfcu3zSw+P5y0auCjkkgBjlKb
zI1nffEIb20d+zQKyLynnn4p5oNHnt/z/mUhBRSeWkhfafDCD8gos74+pEDt
sxL7VEUvnDK6K2u1nALe1YIvtuR54lEnZZ2U6ijAt0E4akOqB37daNNaSgcF
tBOSyuNz3PBDvCJnSt5S4Ly1Z/CHnW447wuB9vZuChgm2PXMPrqEx+rwJS73
U+CZxdYp2wFXPF6NTcbu1zrv96N1VUEuuNHsSrTfDAXOvbJ69O+pM84oWZxO
mqNA1605y29EZ/zGjj+PWlco8Mb752urm0544ubvR3by8cAMk+3+sxlH/NjH
L+V6/DxQU60sF2TsiAukDIucEuKBUzy5dWLVDngS7dPIDTEeSNJ4ppgcbY+n
sL/ymt/FAx/KPxtTbM7gZg3tfQwVHvhaLOFl0H8aF77SAvLqPIDVPN5SY3Ua
T51roFgjHoDR528G7e3w22NlGc8MeaAnvJ+sl3EKP573kDhgwgPl+h1m3Cqn
8E12RY5/zXlgy3967QNJNnh6X57yjlM8MK78wqORzRq/8zq1JdaVBwT/fd7i
IHgC31wLxGQPHrgUxzUw5HgcT88ZQ2mXeWCgRbwl/KklnnZ5b21+AA+kbbdM
J1yxwG9JfCh8Gs8De9jtCv+Km+EivAFjLUk80OKIenQTTfHUfzJSr1J5oDPD
O5LEbYrf7PDO+JjJAzsXX2y5uWqCJ3sJJ/wu4YG4mzo6pTRjXMC24dV8BQ+o
nuwOc0s7iicddKCs1azXM7kdeOWO4oni1cE8jTyw2jHVFGVohCe8MPOS7OQB
Gy67lgfuh3F65WqZXA8PKOp82CFZeQiPv3tvSvEjDxjfDn1vuHQQj/P464h9
5gGNOFvzg8kH8BixlBNmM+t8Tplldi/r41RuPNVqjgcM9tAkB07p49dnv3bb
LfBAwMl4yWdtenh0254jF9mo0Ch/J78tZx8e6dYDEQwqfK+PLEIhOjj55NWr
sYJUkJ3y/FvJoYNH6Es9ShKlglGtdKllhDYevtlTJWsbFYo6dRY+pWrhoS0C
0o+UqFAszbh3qRbhHKV1dk/3UOGw10dPoXEcD0k7c7dFgwqKL1/vmd2C48Gu
FSLvtKigP9ox0pXCwgM3HuOZOEoFc/m6V+2NGjiBc1n/tykV3PW8j7UKa+AB
Uzkh85ZUSBEeKKC67cX9n8+ucNhRIZRBfU1UUcevuiROb3GjwhbJxoefvqji
B5qUBgY9qeDvYvH2mp0qLiL0tv2uDxWe2EuZKY2q4BVPqDnbAqlw1Pr1iM+0
Mv6DGmYqFU8Fn+4Px2vllPCaU5La3xKp0HPmLe9kgyIeVtG0K/8mFdRH2V4X
mivi26zWSDvuUmHu7js73i27cYvCy48UiqnA3ch26piiAi69JpT/q5QKZk6t
BLkAefyPcWVicSUVNmsf9FTplsPjFmcuKD6hAnt2rf61iB14y36nraodVPCU
68qz3CqDJ93hps69WY8/KfTsjpXG7Wby5yvfUaH6QffzAII0vpI62qneR4VN
ogIUmJLEVcdOhmj+oIKj0T95yqwEzs5adl3+RQXlTKXvEX4S+Nu42yefzFBB
ehPZdYxLAndSf6+GFqgQtOURN6f0Njw7zGhcm8wLaeMOA29IW3HXT5M9RCov
NARyhmvqiOH4rpim5zReUGc+mHYM3oJ/7GlP0xPmhet/c9JTGJtxupTOkQPS
vOARo9YMdqL44OXPTB45XpB8l02qfSqCF3X4y3Ts5AVBD68cse0iuL5HHeHI
Hl5I0hpcNp4Vwq8921N+VJcXcsx6uL/VC+CHhLvv8hvwQn2a+8gBpgAu6uR2
/d1BXkjmbvo1UbMBr+B/eNbUhBfiC3lnbjXw4z9tZUUs7XiB5+ZG+ahpOn78
Qp+8kz0v3Hd3Hq32peNtXrHo6nleOHB8IohEpuN50X/ss9x4IZgSfNDdnA+3
qXxaOR7EC9U+Znmhcjz46wb39qUwXrhzuPLIgwsUnPVCeoA3mhdsr5lnfS7n
xkWHrnMoJ/LCQpShH9tRMv6ObGnim8MLOkPST0ObOHHtDVSH6/m80HWjcnPt
Dk68ZEuDb0YhL+wVfDDElcyBxyhLZTeV84LDPyJHiDcR17eamaY854X9ZzkM
FM6x4VX2uRxb2nghAM+WN50k4JKXzEV2d/CCDFdJ+WsvAs4W9gSZdPPCD08P
+0qJNezxw8jYtFFeKO+VWOLtWcLkHrGy/xvjhYtDL4qbaEtY6vOpyoaJdb3y
zmKdhouY50fTgS9/eMHKo7rz/NA8tpsooaDAyQfHNwbqd+39i2Xw9iCcmw84
TA6Ux96ew6giESZGvHwgFNWpl0aYw8YVJn09BPlgbCPh5+6Ps1iO2aP2Oik+
+GP4UhavncH4bZ0HXu/gg3TNOhVn5gwW4CQ+M7yTD6qWfhsJNkxjJwPCRDjV
+CBe8+XO0dwpTPiBscNhPT5w3ffHogubwMIqOP1sDvDBV8dBiTduP7E/9TWx
l47wgX2slLDdfz+wzndiVclmfECT7XctVR7Hold+cAza88GJp7c/rfh8wwwu
JbU9OM8HJ3/ZHDs28hXj+Ipd93bhg6zJ2b7kI1+xax3xGxhefGCzTME9lUcx
1zQ1Cd1QPggPvFHFKTWC7aQNf6VH8oE/r6or/cFn7EdQ5P2B63zQHmTAeUj5
M3b6fL+idxIfNPDt0SIeGsbMNILQgxw+qJcZML6lO4Bt+E+e6J3PB2S/Ce3z
V/uxt+I9LTqFfIDbKh2/8LgP20+WPTJQxgfF7PHiV/U+Yaz3r6zoTXzAbRCi
a5j8Hls44C0+0Lw+r5rbbdufXqyqXnz0fjsf7CE2T8ub92K777k76XTyQTbD
sclvRw8m4Snq6zXMB7Gywu92LHdhQ2NNmM4oHyhZZcb1+3Rh6VYX2OhjfKBh
1xu0vNiJCeo2RNyfWudnt7JXjtSJkTecvdm/ygeWXVXnX0e+xprD+E7cZ6fB
jaP3bppUv8KCFqvFvLhocIG4ZcHhRwe29Jlyj8ZHA4xM+F146iU2WVJSob2F
BuUPb/Z3RbZhhZLHL9O20WBrn/788lAr5phKZPVL0sBlZadPAbMV++xv9sxT
gQbX/uT5Ulease4jy50FmjRgyVj0TZU9wxKa8pI9EQ1kRVO+c8k9w46oGVpq
69AgeVK77VluE9a6JXu47wANws2XhF/nNmKPJvSn+I7TIK02YRJuNWBqselR
bSdpMDajb0hsrMfKds9IBdnSgMhBU3SbfILdd7ttNedIA77F6ImnlnVY6vxE
e583DYaHPovoudRiAre1zib70aAzk80qsqEGi9dMIRj606D+cNkBB8EaLPwa
Um8KowHX9qtivq+rMC+OG7kFyTRwqLl1utetAvud9w3Z3aKBhTx52/Ov5ZiL
vmbfpjs0uPL05iVnq3LsbNQoIy6Xtv4/T2jGHyvDjtHV/T3LaTDp6zUb5lyC
vS2N3ri7mgbXVXOP+v57iB0yGa4ce0SDWOa9yt+iDzHdlMiJE03rsdIGPgfX
/zCVzf2W2p00SHd2b1GxeYAVP1GcW+qmQclTdZXX+fcxOZvQ+MoP63pddusd
nivAJLJ3tcoO06Dq+Xaqd0Y+xi8bqEqbooFQ159mIek8LLa9503bbxqQ65q+
Od/IxShOck5Bf2lwrLO1sZY9F2Mrfpc1t0KDg+Jnepsns7F50USSCxcdlAsa
0fRMJlZ1Hus5QKbDgaqKKVm/TMzj8fdsGQodmi1T7yaSMrFpKxb+mZcOetGD
x4xNMrDvd796HBOkA/fFTVp7tqVhudNx2krCdJhsM+reb3cbs9Ni0vlE6RC8
UTk9rOAWNjgSW9i6mQ7jZ8eKfumkYr1Se0eYknSYM1mu7ClLxkY7L+iANB3e
vG75XUxNxn5fzcrdJ0uH09ZRieedkjBaL8XBSIEOGpUHHiyoJWJiQajNdBcd
6kqClsJzbmAKuzx2nFCkg9fzPgsXgRuYQdjAz7OqdAjxZXN/xp6AmSnzH3ZS
o0PWDr64P/7x2JlBvWLXvXQQD/vpyM4WjwWqlbj6sdb766v8Cdkciz36FjQX
r0uHDu8jv1pyo7C2G9VmKXp0+Kpzr4X0PhLrxSeq0wzo0OKQlm5Hi8RmU0x9
7x2iw3T+9rjShHCMXSeqr/AIHXKGR6KO9IVh9Kl6VqkRHWSfqO42lwvDFPRl
1x4fo4PD2tl4yocQjDlrdarRjA6GruyPHdRCsP13ExpbLOhw7txey+RbwZj9
v8XgTis6bF1rf9zlHITdzX9F/n6GDsMfRciSBwKwYhP28xP2dIg3f6uekuKP
1a2pvZxxpENyReF2v8xr2AfzzJjlC3S4LCUSIf3iCvaN2DPJdnE99h8v8x/3
w+YechuRLtHhBsfsZBLND+Mnu/Pze9Ihbl/F5I6LPph4Rb67sDcdzhASrhoU
XMZ2nerv3uyz7hfzZ8ap797YwZp9N2Wu0kE1u0v/hZcXFuIoshkLpYOElfue
Lz3u2A2Bw1e1w9d5FHNWSDLdscyngYP6kXTI/HtUWjTHDXsi8jPTOIYOU3fL
UEzQJazj+VZ2i7h1PoVVuW3zrtgn12OnTybQYfDD8fO73F2xv21PpByT6bDx
yqtrf7+7YByev8Ocb9JB832H+cE/zhj/Npkxt1t0WDtTepCd7Izt9ol/cPUO
HWJHLRaqdJ0wxx2ndyfm0YEWMKx5mdcRE6Mkjnnm02FULnIi84QD9u5HU5bF
fToMVE67vy+2x/AiCQGx/+iQMmR1YfD0WWzD7pH5gop1/rsD+9M5TmNtNP6y
6Co63NVLfOPpbYddm9ZycqmhA9FUr8500hYbK80aUKmjw7FTj+9Ufz+F1ava
NtU/W/dnqsJWkGqNeQgm+GU10+FVWWWYhsJJbMffp6ohrXSQ36cm22pshSVV
i+fvf0mHxUzKHoey49g55nB0dxcdhh6cC1ysMsfENtH3VXfToUuoQC6L0xzr
XkKrt3rpcOQQsrK1NMPwJ3ddbT7Rwf+W139pNFNMAGxMf3xe57Osqrez3Bh7
IR7H9+oLHUrvXxh5JW2M+bM1tD78SofC/cuf/DKOYj+axJie43SQC9g5FHXL
CGvYNyhGmKGD65+IkQGvw5iHNN+Hkd90MJ8cR/2phzA5Ep7Q/IcO9csX7+xv
PIgltd0hRs/TYVXxQ0+V5AHs/MGTY4IEBkSos1twK+lj4goxWfNsDCCxH9uW
G6iH9VCfHO8jMmB26YGU5ft9GLze/CqTxABrYfrJqwm6mNDR/lJ5GgN0OXz0
P7C0sQ4lqhMfgwG53t7j9mVaWCA/S3KGnwEffqpFERS0sIl3aSlVQgxwJVPy
BuUAazQ74aclxgBT/3YptwIW1nJDsO2QOAMCBSlm3HWaWMfrNwIWEgyY80q4
tu09E/ugp1vsIs0AotndoG8SGthg0OqijywDsr/zdYqb7MVG62v0Q+UYoN4S
/PlvpDo2rbbzc9ouBtxcs+TNpahhf92+78xXZMC5DGN+oWN7sOXiLN8yZQaM
CqclWuaoYiQZIYF2NQYMTZbEphmrYGLCa3p/cQYYXt9iqT+liEma1CayaTFA
+dXLMC87RUwuzn2YqsOAS30JlUcqdmN7SGM+2/UZcHL4nO1S0U6MqZPdsms/
A84ThkseVypg4G+1gXmQAS5SoY3nWuSxQ//eFhkZMuA5Htoev7oDM1aJXjhx
lAEG+uSrcVI7MIuL+/QcTNb1CdsdDDeRxU5/rx26as6A+OsPqEHPpDHf99n8
hTYMePou0mXk13YsYMNJmypbBvS8k9Xq09uOhRkKFzWeZkBqZni+ep4EltAa
ve+DAwO2aN9Rd760DUsh6t34co4BD5NbWn8PimPpiDA06bTut7ZpjupRcayg
2uMypysDur/ECReEiWHFs7ua6W4MiHp/d+FN6BasYvc4Y7MHA8zSPAb2x2zG
GvJPFipfZkCRS+qsVMVGrPem3qBNAAPUwF0z8bgw1v+OIO8UxIDS8zm4YbIQ
NkJ77O0VwgD5Uqdmz15B7Ff4bkZMBAO+qLWEKjkJYL+fjZ9MjWJAl7D9Bbv6
Ddj8Ws6DnOsMeCDzXGiP8AaM47KI7qN4BhSaVnOQPzIwSkVXfPMNBnwuXeYp
0WJg9OnrA2+TGFCt56a//yEd2+zI5v09lQF1BufunVCiYSoWP+4LZDGAfaGa
tAd4sOsaprNfcxlwgi+xUyaZG/u28SmruoAB/Dobfn8hkjFYlguLKGLAhaan
PsNRXNjtgeQ3liXrflU7BxfKcq7ftwmi8hXr+zuodWisj4gdyXSyW65mwOok
s9sohx1jP601l9HAAJENvz4NnyNgVrpFuOszBnBdOj744NUqq0pKOEKrdX3/
jh+RFf6+zKKTgjr5X677J0hulhBbYp0bm9g4+poBFRWfrnBdWmA1tZufqexi
gLm2HqfQ4D/W5sKm/8J6GdD/xO9i/em/rLfOqbBjkAGfJM7u5iifZckZEqMW
PzMA0alxv3x+s0IUXd69/MqADiU5c85jM6xBxsfNd8bX/X94s1cCplnqszr2
Lr8Y0Hndgc/ad5L1o1J0gT7HAL3yEMkNHT9YGZenosuX179fIMNLMfY7y1iz
WcyMgx82i9MkfcpHWZyrt0vnefjBVHobjak4wqp56qqbtoEf8mSOB2r8GWJd
CNZ7j23ihxMXo1pWaf2sjCw30UcS/BByJcW6sfwD621Dxgk1OX6oCcsd3/+k
h8U++OJOmRI/FP5jxVaIv2OpLP8d2qXBD6I+oeeuvHvLStlreEbGgB/2xWTR
CVwvWIse+WNbzflhV1D5GcVNz1nWpWsXROz5wWTgEncypYHV+Mt8hu7JDz8P
hgm8mq5mHZkbYZv24ofH28OO5ihUsz4tO/O/ucwPQRJ7A4pcqli/eUJUYq7w
Q5pGgW4iRyVLUq7EkzuEH0qZIcL33MpYEfbkRbZEfqC4Ptja5lDEOtu+JYM7
mR/k07f+XDhXyNJWUNFm3OSH3owX6KfHA9bSzMko8TR+uGiZdGQwp4DlcrV8
I8rhh/+i79APW+exTJOsNa+U88O1ZTPGO75MlkRTxZW/7/jhd5SIrZfADdaT
LbZrPwQ2AARrDmVke7FqV8OIcrEb4GbHNn6jNzqs1+U6P2IYAhA+1R8evkJh
NYvbt1y/IQDXdomH+BK6NEOqTbM+UwTh6xeC6f6ntzWtJPqtT8QIwlHCeQ/X
YGvNpardm+RJQuCWOhUxFrZd8wpxvCP5mhAYoexHtu/GmEKSGrZSBGFofVN8
cfJrPtPbxewPxUcYAiui9LTlzzM3q51pk/YThmH3fdJDc47MpyuX0rWvCgP1
zdGGB68dmJSYGF3fQGFQ7G8dgoKzzIzC50njkcKwrW3q/KaftsyWMeU9bbeF
4WjJuZj2IAumwGmaV2idMNCMdjjv6tNj1sptOZBVLwxbM8NODLTvY1r/lhN7
8lQYHrviPBrNusyCQL2WP8+FIamiiVYwpM3UzLwqdOaVMDgPqK6Z7UBMu4Gf
VdqD6/28BW4R9+5hkvIWoqyHheETWebc+72qzKILJBvfEWF4RaQuJ+xTYf5d
kiCVfRMG43CL7JgAJWbUxuPm26aE4bXmcqbbgAJz94iDPDYjDI6VhwctAuWZ
3fc91yxmhSG9XvdQ+B45pphGQn78P2GwP+3u0fBShvmMcNevaEEY6ogJrqeK
pJmObUWGbUvrPHfNHfO+LcWkxj/aProiDJ27OUdPJ0syS83b/q2tCQPiT98X
k76d+T+z4nsD
        "]]}},
     AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
     Axes->True,
     AxesOrigin->{0, 0},
     DisplayFunction:>$DisplayFunction,
     FormatType->TraditionalForm,
     PlotRange->{{0, 6}, {-0.20172792183704621`, 0.33621320306291114`}},
     PlotRangeClipping->True,
     PlotRangePadding->{
       Scaled[0.02], 
       Scaled[0.02]}], {-1, -0.6180339887498948}, {
    Left, Bottom}, {2, 1.2360679774997896`}], GraphicsGroupBox[{
     {GrayLevel[0], 
      RectangleBox[{1.05, -0.45}, {1.425418994413408, 0.3499999999999999}]}, 
     {GrayLevel[1], EdgeForm[{GrayLevel[0], Thickness[0.001]}], 
      GraphicsGroupBox[{
        RectangleBox[{1, -0.4}, {1.3754189944134079`, 0.3999999999999999}], 
        InsetBox[
         GraphicsBox[{{{InsetBox[
              GraphicsBox[
               {RGBColor[0, 0, 1], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 0.08}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 2\"\>", {1.2100000000000002`, 0.58}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {RGBColor[1, 1, 0], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 1.24}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 1\"\>", {1.2100000000000002`, 1.74}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.37820393249936846`, 0.6, 0.6], Dashing[{0., Small}], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 2.4}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.5\"\>", {1.2100000000000002`, 2.9}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.1421359549995791, 0.6, 0.6], Thickness[Tiny], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 3.56}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.3\"\>", {1.2100000000000002`, 4.0600000000000005`},
               {-1, 0}, Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.9060679774997897, 0.6, 0.6], Thickness[Large], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 4.72}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.1\"\>", {1.2100000000000002`, 5.22}, {-1, 0},
               Automatic, {1, 0}]}, {InsetBox[
              GraphicsBox[
               {Hue[0.67, 0.6, 0.6], Dashing[{Small, Small}], 
                LineBox[{{0, 0}, {1, 0}}]}], {0.08, 5.88}, {
              Left, Bottom}, {1, 1}], 
             InsetBox["\<\"\[Alpha] = 0.05\"\>", {1.2100000000000002`, 6.38}, \
{-1, 0}, Automatic, {1, 0}]}}, {}},
          AspectRatio->2.1309523809523805`,
          FormatType->TraditionalForm,
          PlotRange->{{-0.1, 3.26}, {-0.1, 7.059999999999999}}], {1, -0.4}, {
         Left, Bottom}, {0.37541899441340787`, 0.7999999999999999}]}]}}]},
  AspectRatio->Automatic,
  Background->None,
  ColorOutput->Automatic,
  ImageSize->Automatic,
  PlotRange->All]], "Output",
 CellChangeTimes->{
  3.54623313329417*^9, {3.54623316422757*^9, 3.546233175420794*^9}, 
   3.546233754573585*^9, 3.546233968450642*^9, 3.546234053655817*^9, 
   3.554125398455493*^9, 3.554126429021795*^9, 3.555266433034654*^9},
 ImageCache->GraphicsData["CompressedBitmap", "\<\
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
U62CkkJ4nKYT7bppZnYCBmPVc5fpfHXI518Nv5GNlp7pF/uc+fDnjbWCc8s5
i6norlPrnS32bA7wm+np+Wm/9j3InBV8hfi6/7UTAEPj43NkDB0aqmV+L5uR
Q8vLne/u2mWza/r0Z6F9OyFBOzGwbCQuYNIuL3DN9l9m33wtu5w6Z98au6P7
zL1TlljeBxMX3PiDgkcWtjPGjTk4ZswYlQF7V1uPmbjwHU18sWJ1GD3r76tq
Yny6dyeZmLVt7R4/TjPQqhpKWhTqkZ/rpO1inGJ5r9/v5/RbYYlH6L59260m
T352nB3u3NE+GlZcLR1n/zHu3P5+h9zcLaxnDeqw8k7KoKhj9nUDssTUoIcK
nsCq4IcBx67qSEQEH6YwQL9IDo2RaNa4SW528hsF+RkMJqI7UUeOLIbdqo+I
PpHxUbmTr/LFLQPENWjD0tIyEI8SoVtu7DkJAO0vrz/CEWokENqEKDbNxWWi
64AB+hf1pxI6KnPrVYUs4eMTsI06fy5cOH/FKoRzoMT623lwAuOzoQ68TyLT
YwfcjLle7OHRnw2z+myc3cN7NS4uLov6Y/CRrkFa7Z8vpaOeK+yBkY239p3i
fMYIsrrv9eg7pxecNSu4cqX39a5dS19Ycuz780/pJq4UjDl7Ngy26Wvl5fKQ
QSfoPNv2x0UNCrPz1bohN0vOSfnLNeR8ws2b/QM6dy584f6Z61HRP9YW3NdA
vRj8udPzrND/Gv8DZ3mbUe3i4nzhvAsJChryqG3b/BfufMv8+RVUjc/Dw1Pg
P1fOd9engRHoPMPu5yX1i3L44A07Jz19gE9XnjwZ87RFi/wX7VpylWqvGlQc
4zo/69PCvwTOPujykxuXQh9PSGvSJO9F+1ixerVy7deoUVRUCo1V/PjzlPA4
mEf5Nr3+hjPKQNet+a7r9jf8Hg8pqFevUCJL48qMsvdlxlW5rG8p31M8IMF1
/rGBg+b+tWnPdqvlk4cMm+sYqSrUfvuBNLFajSxjjN/BxYnfNn5zVfeV7kaJ
Wgan66O8TW7wnlMTfhk/Y/lOqx1bZ47/Yd35ZLaupd8baw2vlOUX1oyeP2vL
/kVWZlOnT911xyC7jPRFu6pYixLK1J89Ck+F16RlfFyW4E7OXivZWjx4eb2j
oJKGhQVZA/wibhyMTplTamJSIlHzczo4h7EyDUGHpsIBMa5Wb52XjK8Pih5t
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
\
\>"]]
}, Open  ]]
},
WindowSize->{935, 1027},
WindowMargins->{{Automatic, 281}, {186, Automatic}},
PrintingCopies->1,
PrintingPageRange->{Automatic, Automatic},
PrintingOptions->{"PaperOrientation"->"Portrait",
"PaperSize"->{Automatic, Automatic},
"PostScriptOutputFile"->"/home/honza/IF-Weibull.pdf"},
FrontEndVersion->"8.0 for Linux x86 (32-bit) (February 23, 2011)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[557, 20, 290, 5, 30, "Input"],
Cell[850, 27, 382, 7, 50, "Input"],
Cell[CellGroupData[{
Cell[1257, 38, 807, 20, 55, "Input"],
Cell[2067, 60, 968, 24, 62, "Output"]
}, Open  ]],
Cell[3050, 87, 199, 4, 30, "Input"],
Cell[CellGroupData[{
Cell[3274, 95, 620, 13, 50, "Input"],
Cell[3897, 110, 958, 22, 56, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4892, 137, 706, 13, 30, "Input"],
Cell[5601, 152, 1047, 23, 47, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6685, 180, 410, 10, 30, "Input"],
Cell[7098, 192, 1535, 43, 84, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8670, 240, 579, 12, 30, "Input"],
Cell[9252, 254, 1212, 30, 67, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10501, 289, 363, 9, 30, "Input"],
Cell[10867, 300, 1092, 34, 128, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11996, 339, 597, 17, 30, "Input"],
Cell[12596, 358, 713, 22, 78, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13346, 385, 1233, 23, 30, "Input"],
Cell[14582, 410, 1826, 44, 95, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16445, 459, 503, 10, 30, "Input"],
Cell[16951, 471, 649, 20, 76, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17637, 496, 588, 12, 30, "Input"],
Cell[18228, 510, 474, 13, 59, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[18739, 528, 466, 11, 30, "Input"],
Cell[19208, 541, 810, 22, 114, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[20055, 568, 775, 20, 30, "Input"],
Cell[20833, 590, 634, 18, 67, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[21504, 613, 1277, 24, 30, "Input"],
Cell[22784, 639, 999, 27, 49, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[23820, 671, 387, 7, 30, "Input"],
Cell[24210, 680, 751, 21, 59, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[24998, 706, 343, 8, 30, "Input"],
Cell[25344, 716, 1139, 32, 89, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[26520, 753, 787, 20, 30, "Input"],
Cell[27310, 775, 3592, 102, 188, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[30939, 882, 505, 11, 30, "Input"],
Cell[31447, 895, 2951, 82, 176, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[34435, 982, 343, 9, 30, "Input"],
Cell[34781, 993, 3476, 98, 265, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[38294, 1096, 576, 17, 30, "Input"],
Cell[38873, 1115, 2842, 78, 185, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41752, 1198, 669, 16, 30, "Input"],
Cell[42424, 1216, 3385, 97, 149, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[45846, 1318, 1007, 24, 30, "Input"],
Cell[46856, 1344, 4703, 136, 191, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[51596, 1485, 319, 7, 30, "Input"],
Cell[51918, 1494, 4514, 129, 191, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[56469, 1628, 281, 6, 30, "Input"],
Cell[56753, 1636, 4180, 120, 187, "Output"]
}, Open  ]],
Cell[60948, 1759, 4840, 127, 291, "Input"],
Cell[65791, 1888, 241, 4, 30, "Input"],
Cell[CellGroupData[{
Cell[66057, 1896, 2286, 47, 240, "Input"],
Cell[68346, 1945, 108917, 1813, 199, 94562, 1575, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]],
Cell[177278, 3761, 85, 1, 30, "Input"],
Cell[177366, 3764, 172, 3, 88, "Input"],
Cell[177541, 3769, 271, 9, 10, "Text"],
Cell[177815, 3780, 290, 5, 30, "Input"],
Cell[178108, 3787, 422, 8, 50, "Input"],
Cell[CellGroupData[{
Cell[178555, 3799, 807, 20, 55, "Input"],
Cell[179365, 3821, 1015, 24, 62, "Output"]
}, Open  ]],
Cell[180395, 3848, 256, 5, 30, "Input"],
Cell[CellGroupData[{
Cell[180676, 3857, 620, 13, 50, "Input"],
Cell[181299, 3872, 906, 20, 56, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[182242, 3897, 706, 13, 30, "Input"],
Cell[182951, 3912, 1002, 20, 56, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[183990, 3937, 410, 10, 30, "Input"],
Cell[184403, 3949, 1366, 37, 84, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[185806, 3991, 579, 12, 30, "Input"],
Cell[186388, 4005, 1124, 27, 67, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[187549, 4037, 363, 9, 30, "Input"],
Cell[187915, 4048, 864, 27, 114, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[188816, 4080, 597, 17, 30, "Input"],
Cell[189416, 4099, 615, 19, 49, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[190068, 4123, 1228, 23, 30, "Input"],
Cell[191299, 4148, 1549, 36, 63, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[192885, 4189, 503, 10, 30, "Input"],
Cell[193391, 4201, 698, 21, 76, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[194126, 4227, 588, 12, 30, "Input"],
Cell[194717, 4241, 499, 14, 59, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[195253, 4260, 466, 11, 30, "Input"],
Cell[195722, 4273, 832, 22, 114, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[196591, 4300, 775, 20, 30, "Input"],
Cell[197369, 4322, 660, 19, 67, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[198066, 4346, 1315, 25, 30, "Input"],
Cell[199384, 4373, 1051, 28, 49, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[200472, 4406, 387, 7, 30, "Input"],
Cell[200862, 4415, 445, 11, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[201344, 4431, 343, 8, 30, "Input"],
Cell[201690, 4441, 468, 12, 48, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[202195, 4458, 787, 20, 30, "Input"],
Cell[202985, 4480, 2043, 60, 119, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[205065, 4545, 505, 11, 30, "Input"],
Cell[205573, 4558, 1596, 46, 67, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[207206, 4609, 343, 9, 30, "Input"],
Cell[207552, 4620, 1942, 56, 168, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[209531, 4681, 576, 17, 30, "Input"],
Cell[210110, 4700, 1535, 45, 83, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[211682, 4750, 405, 10, 30, "Input"],
Cell[212090, 4762, 1038, 31, 49, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[213165, 4798, 1034, 25, 30, "Input"],
Cell[214202, 4825, 1666, 49, 75, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[215905, 4879, 371, 8, 30, "Input"],
Cell[216279, 4889, 1503, 45, 75, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[217819, 4939, 714, 16, 30, "Input"],
Cell[218536, 4957, 1169, 35, 101, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[219742, 4997, 1925, 47, 119, "Input"],
Cell[221670, 5046, 1219, 37, 101, "Output"]
}, Open  ]],
Cell[222904, 5086, 241, 4, 30, "Input"],
Cell[CellGroupData[{
Cell[223170, 5094, 2237, 46, 240, "Input"],
Cell[225410, 5142, 111237, 1848, 303, 86899, 1447, "CachedBoxData", \
"BoxData", "Output"]
}, Open  ]],
Cell[336662, 6993, 270, 9, 10, "Text"],
Cell[336935, 7004, 290, 5, 30, "Input"],
Cell[337228, 7011, 405, 8, 50, "Input"],
Cell[CellGroupData[{
Cell[337658, 7023, 807, 20, 55, "Input"],
Cell[338468, 7045, 1013, 24, 62, "Output"]
}, Open  ]],
Cell[339496, 7072, 298, 5, 30, "Input"],
Cell[CellGroupData[{
Cell[339819, 7081, 620, 13, 50, "Input"],
Cell[340442, 7096, 955, 22, 58, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[341434, 7123, 706, 13, 30, "Input"],
Cell[342143, 7138, 1173, 27, 59, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[343353, 7170, 410, 10, 30, "Input"],
Cell[343766, 7182, 1497, 41, 86, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[345300, 7228, 579, 12, 30, "Input"],
Cell[345882, 7242, 1245, 31, 69, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[347164, 7278, 363, 9, 30, "Input"],
Cell[347530, 7289, 1051, 34, 114, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[348618, 7328, 597, 17, 30, "Input"],
Cell[349218, 7347, 846, 28, 38, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[350101, 7380, 1265, 24, 30, "Input"],
Cell[351369, 7406, 892, 15, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[352298, 7426, 503, 10, 30, "Input"],
Cell[352804, 7438, 724, 22, 76, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[353565, 7465, 588, 12, 30, "Input"],
Cell[354156, 7479, 499, 14, 59, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[354692, 7498, 466, 11, 30, "Input"],
Cell[355161, 7511, 831, 22, 114, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[356029, 7538, 775, 20, 30, "Input"],
Cell[356807, 7560, 660, 19, 67, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[357504, 7584, 1315, 25, 30, "Input"],
Cell[358822, 7611, 1027, 28, 49, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[359886, 7644, 387, 7, 30, "Input"],
Cell[360276, 7653, 398, 10, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[360711, 7668, 343, 8, 30, "Input"],
Cell[361057, 7678, 398, 10, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[361492, 7693, 1064, 27, 30, "Input"],
Cell[362559, 7722, 1934, 60, 102, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[364530, 7787, 823, 19, 30, "Input"],
Cell[365356, 7808, 1528, 47, 69, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[366921, 7860, 664, 18, 30, "Input"],
Cell[367588, 7880, 1355, 43, 74, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[368980, 7928, 576, 17, 30, "Input"],
Cell[369559, 7947, 1432, 45, 62, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[371028, 7997, 668, 16, 30, "Input"],
Cell[371699, 8015, 1290, 40, 78, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[373026, 8060, 1035, 25, 30, "Input"],
Cell[374064, 8087, 2109, 66, 75, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[376210, 8158, 475, 9, 30, "Input"],
Cell[376688, 8169, 2011, 62, 71, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[378736, 8236, 980, 20, 30, "Input"],
Cell[379719, 8258, 1359, 39, 69, "Output"]
}, Open  ]],
Cell[381093, 8300, 1894, 47, 83, "Input"],
Cell[382990, 8349, 241, 4, 30, "Input"],
Cell[CellGroupData[{
Cell[383256, 8357, 2286, 47, 240, "Input"],
Cell[385545, 8406, 88853, 1484, 199, 69472, 1164, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
